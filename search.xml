<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[d3-timer]]></title>
      <url>/2017/10/19/d3-timer/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>安排一个定时器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var taskHead,</div><div class="line">    taskTail</div><div class="line">var t = d3.timer(function(elapsed) &#123;</div><div class="line">  console.log(elapsed);</div><div class="line">  if (elapsed &gt; 200) t.stop();</div><div class="line">&#125;, 500);</div></pre></td></tr></table></figure></p>
<p>调用timer函数，内部生成一个Timer对象，并调用restart()函数，内部sleep()，会调用setFrame()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line">var frame = 0, // is an animation frame pending?</div><div class="line">    timeout = 0, // is a timeout pending?</div><div class="line">    interval = 0, // are any timers active?</div><div class="line">    pokeDelay = 1000, // how frequently we check for clock skew</div><div class="line">    taskHead,</div><div class="line">    taskTail,</div><div class="line">    clockLast = 0,</div><div class="line">    clockNow = 0,</div><div class="line">    clockSkew = 0,</div><div class="line">    clock = typeof performance === &quot;object&quot; &amp;&amp; performance.now ? performance : Date,</div><div class="line">    setFrame = typeof window === &quot;object&quot; &amp;&amp; window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) &#123; setTimeout(f, 17); &#125;;</div><div class="line"></div><div class="line">export function now() &#123;</div><div class="line">  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function clearNow() &#123;</div><div class="line">  clockNow = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function Timer() &#123;</div><div class="line">  this._call =</div><div class="line">  this._time =</div><div class="line">  this._next = null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Timer.prototype = timer.prototype = &#123;</div><div class="line">  constructor: Timer,</div><div class="line">  restart: function(callback, delay, time) &#123;</div><div class="line">    if (typeof callback !== &quot;function&quot;) throw new TypeError(&quot;callback is not a function&quot;);</div><div class="line">    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);</div><div class="line">    if (!this._next &amp;&amp; taskTail !== this) &#123;</div><div class="line">      if (taskTail) taskTail._next = this;</div><div class="line">      else taskHead = this;</div><div class="line">      taskTail = this;</div><div class="line">    &#125;</div><div class="line">    this._call = callback;</div><div class="line">    this._time = time;</div><div class="line">    sleep();</div><div class="line">  &#125;,</div><div class="line">  stop: function() &#123;</div><div class="line">    if (this._call) &#123;</div><div class="line">      this._call = null;</div><div class="line">      this._time = Infinity;</div><div class="line">      sleep();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export function timer(callback, delay, time) &#123;</div><div class="line">  var t = new Timer;</div><div class="line">  t.restart(callback, delay, time);</div><div class="line">  return t;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function timerFlush() &#123;</div><div class="line">  now(); // Get the current time, if not already set.</div><div class="line">  ++frame; // Pretend we’ve set an alarm, if we haven’t already.</div><div class="line">  var t = taskHead, e;</div><div class="line">  while (t) &#123;</div><div class="line">    if ((e = clockNow - t._time) &gt;= 0) t._call.call(null, e);</div><div class="line">    t = t._next;</div><div class="line">  &#125;</div><div class="line">  --frame;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function wake() &#123;</div><div class="line">  clockNow = (clockLast = clock.now()) + clockSkew;</div><div class="line">  frame = timeout = 0;</div><div class="line">  try &#123;</div><div class="line">    timerFlush();</div><div class="line">  &#125; finally &#123;</div><div class="line">    frame = 0;</div><div class="line">    nap();</div><div class="line">    clockNow = 0;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function poke() &#123;</div><div class="line">  var now = clock.now(), delay = now - clockLast;</div><div class="line">  if (delay &gt; pokeDelay) clockSkew -= delay, clockLast = now;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function nap() &#123;</div><div class="line">  var t0, t1 = taskHead, t2, time = Infinity;</div><div class="line">  while (t1) &#123;</div><div class="line">    if (t1._call) &#123;</div><div class="line">      if (time &gt; t1._time) time = t1._time;</div><div class="line">      t0 = t1, t1 = t1._next;</div><div class="line">    &#125; else &#123;</div><div class="line">      t2 = t1._next, t1._next = null;</div><div class="line">      t1 = t0 ? t0._next = t2 : taskHead = t2;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  taskTail = t0;</div><div class="line">  sleep(time);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sleep(time) &#123;</div><div class="line">  if (frame) return; // Soonest alarm already set, or will be.</div><div class="line">  if (timeout) timeout = clearTimeout(timeout);</div><div class="line">  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.</div><div class="line">  if (delay &gt; 24) &#123;</div><div class="line">    if (time &lt; Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);</div><div class="line">    if (interval) interval = clearInterval(interval);</div><div class="line">  &#125; else &#123;</div><div class="line">    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);</div><div class="line">    frame = 1, setFrame(wake);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>d3.timeout(callback[, delay[, time]])<br>时间结束后回调<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.timeout(() =&gt; &#123;console.log(&apos;timeout&apos;)&#125;, 2000)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import &#123;Timer&#125; from &quot;./timer&quot;;</div><div class="line"></div><div class="line">export default function(callback, delay, time) &#123;</div><div class="line">  var t = new Timer;</div><div class="line">  delay = delay == null ? 0 : +delay;</div><div class="line">  t.restart(function(elapsed) &#123;</div><div class="line">    t.stop();</div><div class="line">    callback(elapsed + delay);</div><div class="line">  &#125;, delay, time);</div><div class="line">  return t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>d3.interval(callback[, delay[, time]])定时回调<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.interval(() =&gt; &#123;console.log(&apos;interval&apos;)&#125;, 2000)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import &#123;Timer, now&#125; from &quot;./timer&quot;;</div><div class="line"></div><div class="line">export default function(callback, delay, time) &#123;</div><div class="line">  var t = new Timer, total = delay;</div><div class="line">  if (delay == null) return t.restart(callback, delay, time), t;</div><div class="line">  delay = +delay, time = time == null ? now() : +time;</div><div class="line">  t.restart(function tick(elapsed) &#123;</div><div class="line">    elapsed += total;</div><div class="line">    t.restart(tick, total += delay, time);</div><div class="line">    callback(elapsed);</div><div class="line">  &#125;, delay, time);</div><div class="line">  return t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> d3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[d3-request]]></title>
      <url>/2017/10/19/d3-request/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d3.request(&quot;/path/to/resource&quot;)   // 返回一个request对象</div><div class="line">  .header(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;) // 设置请求报头</div><div class="line">  .post(&quot;a=2&amp;b=3&quot;, callback) // 发送请求</div></pre></td></tr></table></figure>
<p>request请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line">import &#123;map&#125; from &quot;d3-collection&quot;;</div><div class="line">import &#123;dispatch&#125; from &quot;d3-dispatch&quot;;</div><div class="line"></div><div class="line">export default function(url, callback) &#123;</div><div class="line">  var request,</div><div class="line">      event = dispatch(&quot;beforesend&quot;, &quot;progress&quot;, &quot;load&quot;, &quot;error&quot;),</div><div class="line">      mimeType,</div><div class="line">      headers = map(),</div><div class="line">      xhr = new XMLHttpRequest,</div><div class="line">      user = null,</div><div class="line">      password = null,</div><div class="line">      response,</div><div class="line">      responseType,</div><div class="line">      timeout = 0;</div><div class="line"></div><div class="line">  // If IE does not support CORS, use XDomainRequest.</div><div class="line">  if (typeof XDomainRequest !== &quot;undefined&quot;</div><div class="line">      &amp;&amp; !(&quot;withCredentials&quot; in xhr)</div><div class="line">      &amp;&amp; /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;</div><div class="line">  // 根据onreadystatechange，readyState 触发respond</div><div class="line">  &quot;onload&quot; in xhr</div><div class="line">      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond</div><div class="line">      : xhr.onreadystatechange = function(o) &#123; xhr.readyState &gt; 3 &amp;&amp; respond(o); &#125;;</div><div class="line"></div><div class="line">  function respond(o) &#123;</div><div class="line">    var status = xhr.status, result;</div><div class="line">    if (!status &amp;&amp; hasResponse(xhr)</div><div class="line">        || status &gt;= 200 &amp;&amp; status &lt; 300</div><div class="line">        || status === 304) &#123;</div><div class="line">      if (response) &#123;</div><div class="line">        try &#123;</div><div class="line">          result = response.call(request, xhr);</div><div class="line">        &#125; catch (e) &#123;</div><div class="line">          event.call(&quot;error&quot;, request, e);</div><div class="line">          return;</div><div class="line">        &#125;</div><div class="line">      &#125; else &#123;</div><div class="line">        result = xhr;</div><div class="line">      &#125;</div><div class="line">      event.call(&quot;load&quot;, request, result);</div><div class="line">    &#125; else &#123;</div><div class="line">      event.call(&quot;error&quot;, request, o);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  xhr.onprogress = function(e) &#123;</div><div class="line">    event.call(&quot;progress&quot;, request, e);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  request = &#123;</div><div class="line">    // 设置header</div><div class="line">    header: function(name, value) &#123;</div><div class="line">      name = (name + &quot;&quot;).toLowerCase();</div><div class="line">      if (arguments.length &lt; 2) return headers.get(name);</div><div class="line">      if (value == null) headers.remove(name);</div><div class="line">      else headers.set(name, value + &quot;&quot;);</div><div class="line">      return request;</div><div class="line">    &#125;,</div><div class="line">    // 设置mimeType</div><div class="line">    // If mimeType is non-null and no Accept header is set, a default is used.</div><div class="line">    mimeType: function(value) &#123;</div><div class="line">      if (!arguments.length) return mimeType;</div><div class="line">      mimeType = value == null ? null : value + &quot;&quot;;</div><div class="line">      return request;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // Specifies what type the response value should take;</div><div class="line">    // for instance, arraybuffer, blob, document, or text.</div><div class="line">    responseType: function(value) &#123;</div><div class="line">      if (!arguments.length) return responseType;</div><div class="line">      responseType = value;</div><div class="line">      return request;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    timeout: function(value) &#123;</div><div class="line">      if (!arguments.length) return timeout;</div><div class="line">      timeout = +value;</div><div class="line">      return request;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    user: function(value) &#123;</div><div class="line">      return arguments.length &lt; 1 ? user : (user = value == null ? null : value + &quot;&quot;, request);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    password: function(value) &#123;</div><div class="line">      return arguments.length &lt; 1 ? password : (password = value == null ? null : value + &quot;&quot;, request);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // Specify how to convert the response content to a specific type;</div><div class="line">    // changes the callback value on &quot;load&quot; events.</div><div class="line">    response: function(value) &#123;</div><div class="line">      response = value;</div><div class="line">      return request;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // Alias for send(&quot;GET&quot;, …).</div><div class="line">    get: function(data, callback) &#123;</div><div class="line">      return request.send(&quot;GET&quot;, data, callback);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // Alias for send(&quot;POST&quot;, …).</div><div class="line">    post: function(data, callback) &#123;</div><div class="line">      return request.send(&quot;POST&quot;, data, callback);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // If callback is non-null, it will be used for error and load events.</div><div class="line">    send: function(method, data, callback) &#123;</div><div class="line">      xhr.open(method, url, true, user, password);</div><div class="line">      if (mimeType != null &amp;&amp; !headers.has(&quot;accept&quot;)) headers.set(&quot;accept&quot;, mimeType + &quot;,*/*&quot;);</div><div class="line">      if (xhr.setRequestHeader) headers.each(function(value, name) &#123; xhr.setRequestHeader(name, value); &#125;);</div><div class="line">      if (mimeType != null &amp;&amp; xhr.overrideMimeType) xhr.overrideMimeType(mimeType);</div><div class="line">      if (responseType != null) xhr.responseType = responseType;</div><div class="line">      if (timeout &gt; 0) xhr.timeout = timeout;</div><div class="line">      if (callback == null &amp;&amp; typeof data === &quot;function&quot;) callback = data, data = null;</div><div class="line">      if (callback != null &amp;&amp; callback.length === 1) callback = fixCallback(callback);</div><div class="line">      if (callback != null) request.on(&quot;error&quot;, callback).on(&quot;load&quot;, function(xhr) &#123; callback(null, xhr); &#125;);</div><div class="line">      event.call(&quot;beforesend&quot;, request, xhr);</div><div class="line">      xhr.send(data == null ? null : data);</div><div class="line">      return request;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    abort: function() &#123;</div><div class="line">      xhr.abort();</div><div class="line">      return request;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    on: function() &#123;</div><div class="line">      var value = event.on.apply(event, arguments);</div><div class="line">      return value === event ? request : value;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  if (callback != null) &#123;</div><div class="line">    if (typeof callback !== &quot;function&quot;) throw new Error(&quot;invalid callback: &quot; + callback);</div><div class="line">    return request.get(callback);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return request;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function fixCallback(callback) &#123;</div><div class="line">  return function(error, xhr) &#123;</div><div class="line">    callback(error == null ? xhr : null);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function hasResponse(xhr) &#123;</div><div class="line">  var type = xhr.responseType;</div><div class="line">  return type &amp;&amp; type !== &quot;text&quot;</div><div class="line">      ? xhr.response // null on error</div><div class="line">      : xhr.responseText; // &quot;&quot; on error</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>请求不同类型封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d3.text(&quot;/path/to/file.txt&quot;, function(error, text) &#123;</div><div class="line">  if (error) throw error;</div><div class="line">  console.log(text); // Hello, world!</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>text.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import type from &quot;./type&quot;;</div><div class="line"></div><div class="line">export default type(&quot;text/plain&quot;, function(xhr) &#123;</div><div class="line">  return xhr.responseText;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>type.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import request from &quot;./request&quot;;</div><div class="line"></div><div class="line">export default function(defaultMimeType, response) &#123;</div><div class="line">  return function(url, callback) &#123;</div><div class="line">    var r = request(url).mimeType(defaultMimeType).response(response);</div><div class="line">    if (callback != null) &#123;</div><div class="line">      if (typeof callback !== &quot;function&quot;) throw new Error(&quot;invalid callback: &quot; + callback);</div><div class="line">      return r.get(callback);</div><div class="line">    &#125;</div><div class="line">    return r;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> d3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[d3-color]]></title>
      <url>/2017/10/19/d3-color/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>d3-color支持多种颜色格式，rgb(red,green,blue)，hsl(hue,saturation,lightness)，lab，hcl，cubehelix。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d3.color(&apos;steelblue&apos;) // At&#123;r: 70, g: 130, b: 180, opacity: 1&#125;</div><div class="line">d3.rgb(&apos;steelblue&apos;) // At&#123;r: 70, g: 130, b: 180, opacity: 1&#125;</div><div class="line">d3.hsl(&apos;steelblue&apos;) // Rt&#123;h: 207.27272727272728, s: 0.44, l: 0.4901960784313726, opacity: 1&#125;</div><div class="line">d3.lab(&apos;steelblue&apos;) // Dt&#123;l: 52.46551718768575, a: -4.0774710123572255, b: -32.19186122981343, opacity: 1&#125;</div><div class="line">d3.hcl(&apos;steelblue&apos;) // Ht&#123;h: 262.78126775909277, c: 32.44906314974561, l: 52.46551718768575, opacity: 1&#125;</div><div class="line">d3.cubehelix(&apos;steelblue&apos;) // Vt&#123;h: 202.84837896488932, s: 0.6273147230777709, l: 0.460784355920337, opacity: 1&#125;</div><div class="line"></div><div class="line">d3.color(&apos;steelblue&apos;).toString() // &quot;rgb(70, 130, 180)&quot;</div></pre></td></tr></table></figure></p>
<p>rgb,hsl,lab,hcl,cubehelix继承自color<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">export default function(constructor, factory, prototype) &#123;</div><div class="line">  constructor.prototype = factory.prototype = prototype;</div><div class="line">  prototype.constructor = constructor;</div><div class="line">&#125;</div><div class="line">// 返回parent.prototype的copy对象，该对象同时继承definition的属性和方法</div><div class="line">export function extend(parent, definition) &#123;</div><div class="line">  var prototype = Object.create(parent.prototype);</div><div class="line">  for (var key in definition) prototype[key] = definition[key];</div><div class="line">  return prototype;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function Color() &#123;&#125;</div><div class="line"></div><div class="line">export function rgb(r, g, b, opacity) &#123;</div><div class="line">  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function Rgb(r, g, b, opacity) &#123;</div><div class="line">  this.r = +r;</div><div class="line">  this.g = +g;</div><div class="line">  this.b = +b;</div><div class="line">  this.opacity = +opacity;</div><div class="line">&#125;</div><div class="line"></div><div class="line">define(Rgb, rgb, extend(Color, &#123;</div><div class="line">  brighter: function(k) &#123;</div><div class="line">    k = k == null ? brighter : Math.pow(brighter, k);</div><div class="line">    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);</div><div class="line">  &#125;,</div><div class="line">  darker: function(k) &#123;</div><div class="line">    k = k == null ? darker : Math.pow(darker, k);</div><div class="line">    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);</div><div class="line">  &#125;,</div><div class="line">  rgb: function() &#123;</div><div class="line">    return this;</div><div class="line">  &#125;,</div><div class="line">  // 判断颜色是否有效</div><div class="line">  displayable: function() &#123;</div><div class="line">    return (0 &lt;= this.r &amp;&amp; this.r &lt;= 255)</div><div class="line">        &amp;&amp; (0 &lt;= this.g &amp;&amp; this.g &lt;= 255)</div><div class="line">        &amp;&amp; (0 &lt;= this.b &amp;&amp; this.b &lt;= 255)</div><div class="line">        &amp;&amp; (0 &lt;= this.opacity &amp;&amp; this.opacity &lt;= 1);</div><div class="line">  &#125;,</div><div class="line">  toString: function() &#123;</div><div class="line">    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));</div><div class="line">    return (a === 1 ? &quot;rgb(&quot; : &quot;rgba(&quot;)</div><div class="line">        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + &quot;, &quot;</div><div class="line">        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + &quot;, &quot;</div><div class="line">        + Math.max(0, Math.min(255, Math.round(this.b) || 0))</div><div class="line">        + (a === 1 ? &quot;)&quot; : &quot;, &quot; + a + &quot;)&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> d3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[d3-dispatch]]></title>
      <url>/2017/10/19/d3-dispatch/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>事件分发器的用法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 创建事件分发器 传入参数  事件分发器type</div><div class="line">var d = dispatch(&quot;start&quot;)</div><div class="line">// 绑定事件</div><div class="line">function startCallback() &#123;console.log(&apos;startCallback&apos;)&#125;</div><div class="line">// type.name</div><div class="line">d.on(&quot;start.call&quot;, startCallback)</div><div class="line">// 触发事件</div><div class="line">d.call(&quot;start&quot;);</div><div class="line">//d.apply(&quot;start&quot;);</div><div class="line">// &#123;_:&#123;start: [&#123;name:call, value: startCallback&#125;]&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>生成的事件分发器对象<br>{_:{start: [{name:call, value: startCallback}]}}<br>使用apply或call触发事件回调函数，遍历type数组内所有事件type名称，执行value.apply()或value.call(),value内存储对应的回调函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">var noop = &#123;value: function() &#123;&#125;&#125;;</div><div class="line">// 事件分发器工厂</div><div class="line">function dispatch() &#123;</div><div class="line">  for (var i = 0, n = arguments.length, _ = &#123;&#125;, t; i &lt; n; ++i) &#123;</div><div class="line">    if (!(t = arguments[i] + &quot;&quot;) || (t in _)) throw new Error(&quot;illegal type: &quot; + t);</div><div class="line">    _[t] = [];</div><div class="line">  &#125;</div><div class="line">  return new Dispatch(_);</div><div class="line">&#125;</div><div class="line">// 事件分发器构造函数</div><div class="line">function Dispatch(_) &#123;</div><div class="line">  this._ = _;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function parseTypenames(typenames, types) &#123;</div><div class="line">  // 事件分发器类型字符串处理</div><div class="line">  // 去除开始结束空格，去除特殊字符</div><div class="line">  return typenames.trim().split(/^|\s+/).map(function(t) &#123;</div><div class="line">    // type.name 拆分</div><div class="line">    var name = &quot;&quot;, i = t.indexOf(&quot;.&quot;);</div><div class="line">    if (i &gt;= 0) name = t.slice(i + 1), t = t.slice(0, i);</div><div class="line">    if (t &amp;&amp; !types.hasOwnProperty(t)) throw new Error(&quot;unknown type: &quot; + t);</div><div class="line">    return &#123;type: t, name: name&#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Dispatch.prototype = dispatch.prototype = &#123;</div><div class="line">  constructor: Dispatch,</div><div class="line">  on: function(typename, callback) &#123;</div><div class="line">    var _ = this._,</div><div class="line">        T = parseTypenames(typename + &quot;&quot;, _),</div><div class="line">        t,</div><div class="line">        i = -1,</div><div class="line">        n = T.length;</div><div class="line"></div><div class="line">    // If no callback was specified, return the callback of the given type and name.</div><div class="line">    if (arguments.length &lt; 2) &#123;</div><div class="line">      while (++i &lt; n) if ((t = (typename = T[i]).type) &amp;&amp; (t = get(_[t], typename.name))) return t;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // If a type was specified, set the callback for the given type and name.</div><div class="line">    // Otherwise, if a null callback was specified, remove callbacks of the given name.</div><div class="line">    if (callback != null &amp;&amp; typeof callback !== &quot;function&quot;) throw new Error(&quot;invalid callback: &quot; + callback);</div><div class="line">    while (++i &lt; n) &#123;</div><div class="line">      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);</div><div class="line">      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return this;</div><div class="line">  &#125;,</div><div class="line">  copy: function() &#123;</div><div class="line">    // 复制_，生成新的dispatch对象</div><div class="line">    var copy = &#123;&#125;, _ = this._;</div><div class="line">    for (var t in _) copy[t] = _[t].slice();</div><div class="line">    return new Dispatch(copy);</div><div class="line">  &#125;,</div><div class="line">  call: function(type, that) &#123;</div><div class="line">    if ((n = arguments.length - 2) &gt; 0) for (var args = new Array(n), i = 0, n, t; i &lt; n; ++i) args[i] = arguments[i + 2];</div><div class="line">    if (!this._.hasOwnProperty(type)) throw new Error(&quot;unknown type: &quot; + type);</div><div class="line">    // 遍历执行回调函数</div><div class="line">    for (t = this._[type], i = 0, n = t.length; i &lt; n; ++i) t[i].value.apply(that, args);</div><div class="line">  &#125;,</div><div class="line">  apply: function(type, that, args) &#123;</div><div class="line">    if (!this._.hasOwnProperty(type)) throw new Error(&quot;unknown type: &quot; + type);</div><div class="line">    for (var t = this._[type], i = 0, n = t.length; i &lt; n; ++i) t[i].value.apply(that, args);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function get(type, name) &#123;</div><div class="line">  for (var i = 0, n = type.length, c; i &lt; n; ++i) &#123;</div><div class="line">    if ((c = type[i]).name === name) &#123;</div><div class="line">      return c.value;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function set(type, name, callback) &#123;</div><div class="line">  for (var i = 0, n = type.length; i &lt; n; ++i) &#123;</div><div class="line">    if (type[i].name === name) &#123;</div><div class="line">      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));</div><div class="line">      break;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  if (callback != null) type.push(&#123;name: name, value: callback&#125;);</div><div class="line">  return type;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> d3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[d3-select]]></title>
      <url>/2017/10/18/d3-selection/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css">]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> d3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js-each，map，reduce实现]]></title>
      <url>/2017/10/16/lodash-hash%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">const HASH_UNDEFINED = &apos;__lodash_hash_undefined__&apos;</div><div class="line">class Hash &#123;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Creates a hash object.</div><div class="line">   *</div><div class="line">   * @private</div><div class="line">   * @constructor</div><div class="line">   * @param &#123;Array&#125; [entries] The key-value pairs to cache.</div><div class="line">   */</div><div class="line">  constructor(entries) &#123;</div><div class="line">    let index = -1</div><div class="line">    const length = entries == null ? 0 : entries.length</div><div class="line"></div><div class="line">    this.clear()</div><div class="line">    while (++index &lt; length) &#123;</div><div class="line">      const entry = entries[index]</div><div class="line">      this.set(entry[0], entry[1])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Removes all key-value entries from the hash.</div><div class="line">   *</div><div class="line">   * @memberOf Hash</div><div class="line">   */</div><div class="line">  clear() &#123;</div><div class="line">    this.__data__ = Object.create(null)</div><div class="line">    this.size = 0</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Removes `key` and its value from the hash.</div><div class="line">   *</div><div class="line">   * @memberOf Hash</div><div class="line">   * @param &#123;Object&#125; hash The hash to modify.</div><div class="line">   * @param &#123;string&#125; key The key of the value to remove.</div><div class="line">   * @returns &#123;boolean&#125; Returns `true` if the entry was removed, else `false`.</div><div class="line">   */</div><div class="line">  delete(key) &#123;</div><div class="line">    const result = this.has(key) &amp;&amp; delete this.__data__[key]</div><div class="line">    this.size -= result ? 1 : 0</div><div class="line">    return result</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Gets the hash value for `key`.</div><div class="line">   *</div><div class="line">   * @memberOf Hash</div><div class="line">   * @param &#123;string&#125; key The key of the value to get.</div><div class="line">   * @returns &#123;*&#125; Returns the entry value.</div><div class="line">   */</div><div class="line">  get(key) &#123;</div><div class="line">    const data = this.__data__</div><div class="line">    const result = data[key]</div><div class="line">    return result === HASH_UNDEFINED ? undefined : result</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Checks if a hash value for `key` exists.</div><div class="line">   *</div><div class="line">   * @memberOf Hash</div><div class="line">   * @param &#123;string&#125; key The key of the entry to check.</div><div class="line">   * @returns &#123;boolean&#125; Returns `true` if an entry for `key` exists, else `false`.</div><div class="line">   */</div><div class="line">  has(key) &#123;</div><div class="line">    const data = this.__data__</div><div class="line">    return data[key] !== undefined</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Sets the hash `key` to `value`.</div><div class="line">   *</div><div class="line">   * @memberOf Hash</div><div class="line">   * @param &#123;string&#125; key The key of the value to set.</div><div class="line">   * @param &#123;*&#125; value The value to set.</div><div class="line">   * @returns &#123;Object&#125; Returns the hash instance.</div><div class="line">   */</div><div class="line">  set(key, value) &#123;</div><div class="line">    const data = this.__data__</div><div class="line">    this.size += this.has(key) ? 0 : 1</div><div class="line">    data[key] = value === undefined ? HASH_UNDEFINED : value</div><div class="line">    return this</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lodash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js-each，map，reduce实现]]></title>
      <url>/2017/10/16/lodash-flattern/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">// 减少一级数组嵌套</div><div class="line">function flatten(array) &#123;</div><div class="line">  const length = array == null ? 0 : array.length</div><div class="line">  return length ? baseFlatten(array, 1) : []</div><div class="line">&#125;</div><div class="line">// 减少到一维</div><div class="line">function flattenDeep(array) &#123;</div><div class="line">  const length = array == null ? 0 : array.length</div><div class="line">  return length ? baseFlatten(array, INFINITY) : []</div><div class="line">&#125;</div><div class="line">// 减少depth维</div><div class="line">function flattenDepth(array, depth) &#123;</div><div class="line">  const length = array == null ? 0 : array.length</div><div class="line">  if (!length) &#123;</div><div class="line">    return []</div><div class="line">  &#125;</div><div class="line">  depth = depth === undefined ? 1 : +depth</div><div class="line">  return baseFlatten(array, depth)</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> * @private</div><div class="line"> * @param &#123;Array&#125; array 需要处理的数组</div><div class="line"> * @param &#123;number&#125; depth 需要减少的维度</div><div class="line"> * @param &#123;boolean&#125; [predicate=isFlattenable] 每个元素回调函数，判断是否一维，默认isFlattenable</div><div class="line"> * @param &#123;boolean&#125; [isStrict] Restrict to values that pass `predicate` checks.</div><div class="line"> * @param &#123;Array&#125; [result=[]] 初始结果值</div><div class="line"> * @returns &#123;Array&#125; 返回结果</div><div class="line"> */</div><div class="line">function baseFlatten(array, depth, predicate, isStrict, result) &#123;</div><div class="line">  predicate || (predicate = isFlattenable)</div><div class="line">  result || (result = [])</div><div class="line"></div><div class="line">  if (array == null) &#123;</div><div class="line">    return result</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  for (const value of array) &#123;</div><div class="line">    if (depth &gt; 0 &amp;&amp; predicate(value)) &#123;</div><div class="line">      if (depth &gt; 1) &#123;</div><div class="line">        // Recursively flatten arrays (susceptible to call stack limits).</div><div class="line">        baseFlatten(value, depth - 1, predicate, isStrict, result)</div><div class="line">        console.log(value)</div><div class="line">      &#125; else &#123;</div><div class="line">        result.push(...value)</div><div class="line">      &#125;</div><div class="line">    &#125; else if (!isStrict) &#123;</div><div class="line">      result[result.length] = value</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lodash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs反向代理]]></title>
      <url>/2017/10/13/nodejs%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>正向代理代理客户端，反向代理代理服务器。<br>使用nodejs实现简单的反向代理需要<br>1、创建一个http服务<br>2、服务接收到客户端请求后，去请求目的url<br>3、获取请求结果，返回给客户端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line">var https = require(&apos;https&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">console.log(&apos;run&apos;)</div><div class="line">// Create HTTP Server</div><div class="line">http.createServer(function(req, res) &#123;</div><div class="line"></div><div class="line">    var uri = &apos;https://github.com/&apos; + req.url;</div><div class="line">    var file = req.url.replace(/\?.*/ig, &apos;&apos;);</div><div class="line">    var ext = path.extname(file);</div><div class="line">    var type = getContentType(ext);</div><div class="line"></div><div class="line">    res.writeHead(200, &#123;</div><div class="line">        &apos;Content-Type&apos;: type</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    https.get(uri, function(response) &#123;</div><div class="line">        response.addListener(&apos;data&apos;, function(chunk)</div><div class="line">        &#123;</div><div class="line">            res.write(chunk, &apos;binary&apos;);</div><div class="line">        &#125;);</div><div class="line">        response.addListener(&apos;end&apos;, function()</div><div class="line">        &#123;</div><div class="line">            res.end();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(3000);</div><div class="line"></div><div class="line">// Get content-type</div><div class="line">var getContentType = function(ext) &#123;</div><div class="line">    var contentType = &apos;&apos;;</div><div class="line">    switch (ext) &#123;</div><div class="line">        case &quot;&quot;:</div><div class="line">            contentType = &quot;text/html&quot;;</div><div class="line">            break;</div><div class="line">        case &quot;.html&quot;:</div><div class="line">            contentType = &quot;text/html&quot;;</div><div class="line">            break;</div><div class="line">        case &quot;.js&quot;:</div><div class="line">            contentType = &quot;text/javascriptss&quot;;</div><div class="line">            break;</div><div class="line">        case &quot;.css&quot;:</div><div class="line">            contentType = &quot;text/css&quot;;</div><div class="line">            break;</div><div class="line">        case &quot;.gif&quot;:</div><div class="line">            contentType = &quot;image/gif&quot;;</div><div class="line">            break;</div><div class="line">        case &quot;.jpg&quot;:</div><div class="line">            contentType = &quot;image/jpeg&quot;;</div><div class="line">            break;</div><div class="line">        case &quot;.png&quot;:</div><div class="line">            contentType = &quot;image/png&quot;;</div><div class="line">            break;</div><div class="line">        case &quot;.ico&quot;:</div><div class="line">            contentType = &quot;image/icon&quot;;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            contentType = &quot;application/octet-stream&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return contentType;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反向代理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用synaptic搭建XOR感知器]]></title>
      <url>/2017/07/11/%E4%BD%BF%E7%94%A8synaptic%E6%90%AD%E5%BB%BAXOR%E6%84%9F%E7%9F%A5%E5%99%A8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>synaptic大约是现在最活跃的js神经网络库，<a href="https://github.com/cazala/synaptic" target="_blank" rel="external">github地址</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习之特征选择]]></title>
      <url>/2017/06/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>机器学习第一步是特征选择</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scikit-learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-router源码分析]]></title>
      <url>/2017/06/28/react-router%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>版本是master</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;</div><div class="line">import &#123;</div><div class="line">  BrowserRouter as Router,</div><div class="line">  Route,</div><div class="line">  Link</div><div class="line">&#125; from &apos;react-router-dom&apos;</div><div class="line"></div><div class="line">const Home = () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;Home&lt;/h2&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const About = () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;About&lt;/h2&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const AboutAuthor = () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;AboutAuthor&lt;/h2&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const AboutTopic = () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;AboutTopic&lt;/h2&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const Topic = (&#123; match &#125;) =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h3&gt;&#123;match.params.topicId&#125;&lt;/h3&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const Topics = (&#123; match &#125;) =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;Topics&lt;/h2&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`$&#123;match.url&#125;/rendering`&#125;&gt;</div><div class="line">          Rendering with React</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`$&#123;match.url&#125;/components`&#125;&gt;</div><div class="line">          Components</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`$&#123;match.url&#125;/props-v-state`&#125;&gt;</div><div class="line">          Props v. State</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line"></div><div class="line">    &lt;Route path=&#123;`$&#123;match.url&#125;/:topicId`&#125; component=&#123;Topic&#125;/&gt;</div><div class="line">    &lt;Route exact path=&#123;match.url&#125; render=&#123;() =&gt; (</div><div class="line">      &lt;h3&gt;Please select a topic.&lt;/h3&gt;</div><div class="line">    )&#125;/&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const BasicExample = () =&gt; (</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;Link to=&quot;/topics&quot;&gt;Topics&lt;/Link&gt;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line"></div><div class="line">      &lt;hr/&gt;</div><div class="line"></div><div class="line">      &lt;Route exact path=&quot;/&quot; component=&#123;Home&#125;/&gt;</div><div class="line">      &lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</div><div class="line">      &lt;Route path=&quot;/topics&quot; component=&#123;Topics&#125;/&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">)</div><div class="line">export default BasicExample</div></pre></td></tr></table></figure>
<p>Router本身是一个react组件，这点也可以从源码中看出来</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Router-Component"><a href="#Router-Component" class="headerlink" title="Router Component"></a>Router Component</h3><p>history用于取location，<br>state的match存储了一个有关当前pathname的对象，Router的children是Route，用于存储要渲染的Component，判断该Component是否渲染是在Route内判断的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">import warning from &apos;warning&apos;</div><div class="line">import invariant from &apos;invariant&apos;</div><div class="line">import React from &apos;react&apos;</div><div class="line">import PropTypes from &apos;prop-types&apos;</div><div class="line"></div><div class="line">/**</div><div class="line"> * The public API for putting history on context.</div><div class="line"> */</div><div class="line">class Router extends React.Component &#123;</div><div class="line">  static propTypes = &#123;</div><div class="line">    history: PropTypes.object.isRequired,</div><div class="line">    children: PropTypes.node</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static contextTypes = &#123;</div><div class="line">    router: PropTypes.object</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static childContextTypes = &#123;</div><div class="line">    router: PropTypes.object.isRequired</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getChildContext() &#123;</div><div class="line">    return &#123;</div><div class="line">      router: &#123;</div><div class="line">        ...this.context.router,</div><div class="line">        history: this.props.history,</div><div class="line">        route: &#123;</div><div class="line">          location: this.props.history.location,</div><div class="line">          match: this.state.match</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  state = &#123;</div><div class="line">    match: this.computeMatch(this.props.history.location.pathname)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  computeMatch(pathname) &#123;</div><div class="line">    return &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      url: &apos;/&apos;,</div><div class="line">      params: &#123;&#125;,</div><div class="line">      isExact: pathname === &apos;/&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line">    const &#123; children, history &#125; = this.props</div><div class="line"></div><div class="line">    invariant(</div><div class="line">      children == null || React.Children.count(children) === 1,</div><div class="line">      &apos;A &lt;Router&gt; may have only one child element&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    // Do this here so we can setState when a &lt;Redirect&gt; changes the</div><div class="line">    // location in componentWillMount. This happens e.g. when doing</div><div class="line">    // server rendering using a &lt;StaticRouter&gt;.</div><div class="line">    this.unlisten = history.listen(() =&gt; &#123;</div><div class="line">      this.setState(&#123;</div><div class="line">        match: this.computeMatch(history.location.pathname)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillReceiveProps(nextProps) &#123;</div><div class="line">    warning(</div><div class="line">      this.props.history === nextProps.history,</div><div class="line">      &apos;You cannot change &lt;Router history&gt;&apos;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    this.unlisten()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const &#123; children &#125; = this.props</div><div class="line">    return children ? React.Children.only(children) : null</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Router</div></pre></td></tr></table></figure></p>
<h3 id="Route-Component"><a href="#Route-Component" class="headerlink" title="Route Component"></a>Route Component</h3><p>Route用于匹配一个路径并渲染Component<br><img src="/2017/06/28/react-router源码分析/route渲染流程图.png" alt="route渲染流程图"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">import warning from &apos;warning&apos;</div><div class="line">import React from &apos;react&apos;</div><div class="line">import PropTypes from &apos;prop-types&apos;</div><div class="line">import matchPath from &apos;./matchPath&apos;</div><div class="line"></div><div class="line">/**</div><div class="line"> * The public API for matching a single path and rendering.</div><div class="line"> */</div><div class="line">class Route extends React.Component &#123;</div><div class="line">  static propTypes = &#123;</div><div class="line">    computedMatch: PropTypes.object, // private, from &lt;Switch&gt;</div><div class="line">    path: PropTypes.string,</div><div class="line">    exact: PropTypes.bool,</div><div class="line">    strict: PropTypes.bool,</div><div class="line">    component: PropTypes.func,</div><div class="line">    render: PropTypes.func,</div><div class="line">    children: PropTypes.oneOfType([</div><div class="line">      PropTypes.func,</div><div class="line">      PropTypes.node</div><div class="line">    ]),</div><div class="line">    location: PropTypes.object</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static contextTypes = &#123;</div><div class="line">    router: PropTypes.shape(&#123;</div><div class="line">      history: PropTypes.object.isRequired,</div><div class="line">      route: PropTypes.object.isRequired,</div><div class="line">      staticContext: PropTypes.object</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  static childContextTypes = &#123;</div><div class="line">    router: PropTypes.object.isRequired</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getChildContext() &#123;</div><div class="line">    return &#123;</div><div class="line">      router: &#123;</div><div class="line">        ...this.context.router,</div><div class="line">        route: &#123;</div><div class="line">          location: this.props.location || this.context.router.route.location,</div><div class="line">          match: this.state.match</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  state = &#123;</div><div class="line">    match: this.computeMatch(this.props, this.context.router)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  computeMatch(&#123; computedMatch, location, path, strict, exact &#125;, &#123; route &#125;) &#123;</div><div class="line">    if (computedMatch)</div><div class="line">      return computedMatch // &lt;Switch&gt; already computed the match for us</div><div class="line"></div><div class="line">    const pathname = (location || route.location).pathname</div><div class="line"></div><div class="line">    return path ? matchPath(pathname, &#123; path, strict, exact &#125;) : route.match</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line">    const &#123; component, render, children &#125; = this.props</div><div class="line"></div><div class="line">    warning(</div><div class="line">      !(component &amp;&amp; render),</div><div class="line">      &apos;You should not use &lt;Route component&gt; and &lt;Route render&gt; in the same route; &lt;Route render&gt; will be ignored&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    warning(</div><div class="line">      !(component &amp;&amp; children),</div><div class="line">      &apos;You should not use &lt;Route component&gt; and &lt;Route children&gt; in the same route; &lt;Route children&gt; will be ignored&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    warning(</div><div class="line">      !(render &amp;&amp; children),</div><div class="line">      &apos;You should not use &lt;Route render&gt; and &lt;Route children&gt; in the same route; &lt;Route children&gt; will be ignored&apos;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillReceiveProps(nextProps, nextContext) &#123;</div><div class="line">    warning(</div><div class="line">      !(nextProps.location &amp;&amp; !this.props.location),</div><div class="line">      &apos;&lt;Route&gt; elements should not change from uncontrolled to controlled (or vice versa). You initially used no &quot;location&quot; prop and then provided one on a subsequent render.&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    warning(</div><div class="line">      !(!nextProps.location &amp;&amp; this.props.location),</div><div class="line">      &apos;&lt;Route&gt; elements should not change from controlled to uncontrolled (or vice versa). You provided a &quot;location&quot; prop initially but omitted it on a subsequent render.&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">    this.setState(&#123;</div><div class="line">      match: this.computeMatch(nextProps, nextContext.router)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const &#123; match &#125; = this.state</div><div class="line">    const &#123; children, component, render &#125; = this.props</div><div class="line">    const &#123; history, route, staticContext &#125; = this.context.router</div><div class="line">    const location = this.props.location || route.location</div><div class="line">    const props = &#123; match, location, history, staticContext &#125;</div><div class="line"></div><div class="line">    return (</div><div class="line">      component ? ( // 先判断Route是否有component props</div><div class="line">        // 判断是否匹配</div><div class="line">        match ? React.createElement(component, props) : null</div><div class="line">      ) : render ? ( // render prop is next, only called if there&apos;s a match</div><div class="line">        match ? render(props) : null</div><div class="line">      ) : children ? ( // children come last, always called</div><div class="line">        typeof children === &apos;function&apos; ? (</div><div class="line">          children(props)</div><div class="line">        ) : !Array.isArray(children) || children.length ? ( // Preact defaults to empty children array</div><div class="line">          React.Children.only(children)</div><div class="line">        ) : (</div><div class="line">          null</div><div class="line">        )</div><div class="line">      ) : (</div><div class="line">        null</div><div class="line">      )</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Route</div></pre></td></tr></table></figure>
<h3 id="matchPath匹配路径"><a href="#matchPath匹配路径" class="headerlink" title="matchPath匹配路径"></a>matchPath匹配路径</h3><p>1、path-to-regexp把路径path转换成正则对象，并存储<br>2、正则匹配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">import pathToRegexp from &apos;path-to-regexp&apos;</div><div class="line">// var re = pathToRegexp(&apos;/foo/:bar&apos;, keys)</div><div class="line">// re = /^\/foo\/([^\/]+?)\/?$/i</div><div class="line">const patternCache = &#123;&#125;</div><div class="line">const cacheLimit = 10000</div><div class="line">let cacheCount = 0</div><div class="line"></div><div class="line">const compilePath = (pattern, options) =&gt; &#123;</div><div class="line">  const cacheKey = `$&#123;options.end&#125;$&#123;options.strict&#125;`</div><div class="line">  const cache = patternCache[cacheKey] || (patternCache[cacheKey] = &#123;&#125;)</div><div class="line"></div><div class="line">  if (cache[pattern])</div><div class="line">    return cache[pattern]</div><div class="line"></div><div class="line">  const keys = []</div><div class="line">  const re = pathToRegexp(pattern, keys, options)</div><div class="line">  const compiledPattern = &#123; re, keys &#125;</div><div class="line"></div><div class="line">  if (cacheCount &lt; cacheLimit) &#123;</div><div class="line">    cache[pattern] = compiledPattern</div><div class="line">    cacheCount++</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return compiledPattern</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Public API for matching a URL pathname to a path pattern.</div><div class="line"> */</div><div class="line">const matchPath = (pathname, options = &#123;&#125;) =&gt; &#123;</div><div class="line">  if (typeof options === &apos;string&apos;)</div><div class="line">    options = &#123; path: options &#125;</div><div class="line"></div><div class="line">  const &#123; path = &apos;/&apos;, exact = false, strict = false &#125; = options</div><div class="line">  const &#123; re, keys &#125; = compilePath(path, &#123; end: exact, strict &#125;)</div><div class="line">  // 匹配路径</div><div class="line">  const match = re.exec(pathname)</div><div class="line"></div><div class="line">  if (!match)</div><div class="line">    return null</div><div class="line"></div><div class="line">  const [ url, ...values ] = match</div><div class="line">  const isExact = pathname === url</div><div class="line"></div><div class="line">  if (exact &amp;&amp; !isExact)</div><div class="line">    return null</div><div class="line"></div><div class="line">  return &#123;</div><div class="line">    path, // the path pattern used to match</div><div class="line">    url: path === &apos;/&apos; &amp;&amp; url === &apos;&apos; ? &apos;/&apos; : url, // the matched portion of the URL</div><div class="line">    isExact, // whether or not we matched exactly</div><div class="line">    params: keys.reduce((memo, key, index) =&gt; &#123;</div><div class="line">      memo[key.name] = values[index]</div><div class="line">      return memo</div><div class="line">    &#125;, &#123;&#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default matchPath</div></pre></td></tr></table></figure></p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>Prompt：用于页面跳转时的提示<br>Redirect：在组件内跳转location<br>StaticRouter：用于服务器端渲染</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内存管理速成]]></title>
      <url>/2017/06/22/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E9%80%9F%E6%88%90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css">]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习-参数求解的三种方法]]></title>
      <url>/2017/06/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%8F%82%E6%95%B0%E6%B1%82%E8%A7%A3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>机器学习参数求解最常用的三种方法：最小二乘法，梯度下降法，最速牛顿法。</p>
<h2 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h2><p>用偏差平方和最小的原则拟合曲线，最小二乘法。<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>a</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn></mrow></msub><mi>x</mi><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>k</mi></mrow></msub><msup><mi>x</mi><mrow><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">y = a_{0} + a_{1}x + ... + a_{k}x^{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><br>假设多项式为<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>a</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn></mrow></msub><mi>x</mi><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>k</mi></mrow></msub><msup><mi>x</mi><mrow><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">y = a_{0} + a_{1}x + ... + a_{k}x^{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><br>求偏差平方和，即各已知点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mrow><mi>i</mi></mrow></msub><mo separator="true">,</mo><msub><mi>y</mi><mrow><mi>i</mi></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_{i}, y_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>到这条曲线的距离之和<br>

<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mrow><mn>2</mn></mrow></msup><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>n</mi></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></msubsup><mo>[</mo><msub><mi>y</mi><mrow><mi>i</mi></mrow></msub><mo>−</mo><mo>(</mo><msub><mi>a</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn></mrow></msub><msub><mi>x</mi><mrow><mn>1</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>k</mi></mrow></msub><msubsup><mi>x</mi><mrow><mi>i</mi></mrow><mrow><mi>k</mi></mrow></msubsup><mo>)</mo><msup><mo>]</mo><mrow><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">R^{2} = \sum_{n}^{i=1} [y_{i} - (a_{0} + a_{1}x_{1} + ... + a_{k}x_{i}^{k})]^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.149118em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.258664em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><br>我们的目的是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mrow><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">R^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>最小，对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>求偏导得<br>

<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>2</mn><msubsup><mo>∑</mo><mrow><mi>n</mi></mrow><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></msubsup><mo>[</mo><mi>y</mi><mo>−</mo><mo>(</mo><msub><mi>a</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mn>1</mn></mrow></msub><msub><mi>x</mi><mrow><mn>1</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>k</mi></mrow></msub><msubsup><mi>x</mi><mrow><mi>i</mi></mrow><mrow><mi>k</mi></mrow></msubsup><mo>)</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">-2 \sum_{n}^{i=1} [y - (a_{0} + a_{1}x_{1} + ... + a_{k}x_{i}^{k})]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.149118em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mord">−</span><span class="mord mathrm">2</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mbin">−</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.258664em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scikit-learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorBoard可视化学习]]></title>
      <url>/2017/06/16/TensorBoard%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>TensorBoard可视化是通过读取TensorFlow的事件文件来工作。TensorFlow 的事件文件包括了你会在 TensorFlow 运行中涉及到的主要数据。</p>
<h2 id="创建TensorFlow图，选择节点输出数据"><a href="#创建TensorFlow图，选择节点输出数据" class="headerlink" title="创建TensorFlow图，选择节点输出数据"></a>创建TensorFlow图，选择节点输出数据</h2><h2 id="执行操作，汇总数据"><a href="#执行操作，汇总数据" class="headerlink" title="执行操作，汇总数据"></a>执行操作，汇总数据</h2><h2 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h2>]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用TensorFlow的softmax回归识别手写数字图片]]></title>
      <url>/2017/06/15/%E4%BD%BF%E7%94%A8TensorFlow%E7%9A%84softmax%E5%9B%9E%E5%BD%92%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h2><p>数据集中每个数据单元由一张图片和一个对应标签组成。图片包含28*28个像素点<br><img src="/2017/06/15/使用TensorFlow的softmax回归识别手写数字图片/img.png" alt=""><br>每个像素点的值介于0-1之间，</p>
<h2 id="Softmax回归"><a href="#Softmax回归" class="headerlink" title="Softmax回归"></a>Softmax回归</h2><p>Softmax回归是Logistic回归的推广，Logistic回归用于处理二分类问题，Softmax回归可以处理多分类问题。<br>Logistic函数(或称为Sigmoid函数)<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">
g(z) = \frac{1}{1 + e^{-z}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord mathit" style="margin-right:0.04398em;">z</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br><img src="/2017/06/15/使用TensorFlow的softmax回归识别手写数字图片/logistic.png" alt=""><br>线性函数<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mrow><mn>0</mn></mrow></msub><mo>+</mo><msub><mi>θ</mi><mrow><mn>1</mn></mrow></msub><msub><mi>x</mi><mrow><mn>1</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>θ</mi><mrow><mi>n</mi></mrow></msub><msub><mi>x</mi><mrow><mi>n</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi></mrow></msubsup><msub><mi>θ</mi><mrow><mi>i</mi></mrow></msub><msub><mi>x</mi><mrow><mi>i</mi></mrow></msub><mo>=</mo><msup><mi>θ</mi><mrow><mi>T</mi></mrow></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">
\theta _{0} + \theta _{1}x_{1} + ... + \theta _{n}x_{n} = \sum_{i=0}^{n} \theta _{i}x_{i} = \theta ^{T}x
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8413309999999999em;"></span><span class="strut bottom" style="height:1.141341em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span></span></span></span><br>代入g(z)<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>g</mi><mo>(</mo><msup><mi>θ</mi><mrow><mi>T</mi></mrow></msup><mi>x</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>θ</mi><mrow><mi>T</mi></mrow></msup><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">
h _{\theta}(x) = g(\theta ^{T}x) = \frac{1}{1 + e ^{-\theta ^{T}x}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.401904em;vertical-align:-0.556796em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.49846499999999994em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="vlist"><span style="top:-0.289em;margin-right:0.1em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>可推导<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">;</mo><mi>θ</mi><mo>)</mo><mo>=</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">
P(y=1|x;\theta) = h _{\theta}(x)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mord mathrm">∣</span><span class="mord mathit">x</span><span class="mpunct">;</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>y</mi><mo>=</mo><mn>0</mn><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">;</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">
P(y=0|x;\theta) = 1 - h _{\theta}(x)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord mathrm">0</span><span class="mord mathrm">∣</span><span class="mord mathit">x</span><span class="mpunct">;</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span></p>
<p>使用最大似然估计进行参数估计，假设所有样本独立同分布，<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">;</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mo>(</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><mi>x</mi><mo>)</mo><msup><mo>)</mo><mrow><mi>y</mi></mrow></msup><mo>(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><mi>x</mi><mo>)</mo><msup><mo>)</mo><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow></msup></mrow><annotation encoding="application/x-tex">
P(y|x;\theta) = (h _{\theta}(x)) ^{y} (1 - h _{\theta}(x)) ^ {1-y}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathrm">∣</span><span class="mord mathit">x</span><span class="mpunct">;</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><br>似然函数<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>m</mi></mrow></msubsup><mi>P</mi><mo>(</mo><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mi mathvariant="normal">∣</mi><msup><mi>x</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo separator="true">;</mo><mi>θ</mi><mo>)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>m</mi></mrow></msubsup><mo>(</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><msup><mi>x</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo><msup><mo>)</mo><mrow><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup></mrow></msup><mo>(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><msup><mi>x</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo><msup><mo>)</mo><mrow><mn>1</mn><mo>−</mo><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup></mrow></msup></mrow><annotation encoding="application/x-tex">
L(\theta) = \prod_{i=1}^{m}P(y ^{(i)} | x^{(i)}; \theta) = \prod_{i=1}^{m} (h _{\theta}(x ^{(i)})) ^{y ^{(i)}} (1 - h_{\theta}(x ^{(i)})) ^{1 - y ^{(i)}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9921em;"></span><span class="strut bottom" style="height:1.29211em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∏</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">∣</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">;</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∏</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><br>对数似然函数<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>L</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>m</mi></mrow></msubsup><mo>(</mo><mo>(</mo><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo>(</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><msup><mi>x</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>)</mo><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><msup><mi>y</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo>(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mrow><mi>θ</mi></mrow></msub><mo>(</mo><msup><mi>x</mi><mrow><mo>(</mo><mi>i</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">
l(\theta) = log L(\theta) = \sum_{i=1}^{m} ( (y^{(i)})log(h_{\theta}(x^{(i)})) + (1-y^{(i)})log(1-h_{\theta}(x^{(i)})))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8879999999999999em;"></span><span class="strut bottom" style="height:1.1880099999999998em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit">h</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">θ</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><br>最大似然估计是求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>(</mo><mi>θ</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">l(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>取最大值时的θ。可以使用梯度下降法求。
图片分类需要识别0-9，使用Softmax回归取得每个数字的概率。
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>(</mo><mi>y</mi><mo>=</mo><mn>0</mn><mi mathvariant="normal">∣</mi><mi>x</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>(</mo><msup><mi>w</mi><mrow><mi>T</mi></mrow></msup><mi>x</mi><mo>+</mo><mi>b</mi><mo>)</mo></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">
p(y=0|x) = \frac{1}{1 + e^{(w^{T}x+b)}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.401904em;vertical-align:-0.556796em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord mathrm">0</span><span class="mord mathrm">∣</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.49846499999999994em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="vlist"><span style="top:-0.289em;margin-right:0.1em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptscriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathit">b</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[神经网络基础]]></title>
      <url>/2017/06/14/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>DNN，Deep Neural Networks，深度神经网络<br>对于人工智能的实现分为两派：一派是自顶向下通过逻辑和符号推导实现，另一类是自底向上通过模拟大脑中的神经网络实现。神经网络是第二派的实现。<br>神经网络由若干神经元组成<br><img src="/2017/06/14/神经网络基础/neuron_networks.png" alt=""></p>
<h2 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h2><p><img src="/2017/06/14/神经网络基础/neuron.png" alt=""><br>输入：x1,x2,…xn<br>权重：w1,w2,…wn<br>组合函数：c<br>激活函数：a<br>偏移：b<br>输出：y</p>
<h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><p>神经元最早的起源于上世纪50-60年代，Frank Rosenblatt发明了一种叫感知机的神经元。感知机的输入输出是二进制0或1。<br><img src="/2017/06/14/神经网络基础/perceptron.png" alt=""></p>
<h2 id="sigmoid神经元"><a href="#sigmoid神经元" class="headerlink" title="sigmoid神经元"></a>sigmoid神经元</h2><p>在使用感知机构建神经网络时，神经元权重和偏移发生很小变化都可能导致输出的剧烈变化。所以引入了sigmoid神经元。sigmoid神经元的输入输出是浮点值。<br>感知机<br><img src="/2017/06/14/神经网络基础/step.png" alt=""><br>sigmoid神经元<br><img src="/2017/06/14/神经网络基础/sigmoid.png" alt=""><br>sigmoid神经元相当于平滑的感知机，意味着当权重和偏移变化时，输出按预期小幅度变化。</p>
<h2 id="神经网络的结构"><a href="#神经网络的结构" class="headerlink" title="神经网络的结构"></a>神经网络的结构</h2><p>输入层–&gt;隐层–&gt;输出层<br><img src="/2017/06/14/神经网络基础/multilayer.png" alt=""><br>隐层的设计需要考虑层数和时间的平衡。</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用tf.contrib.learn快速搭建DNN识别鸢尾花]]></title>
      <url>/2017/06/13/%E4%BD%BF%E7%94%A8tf.contrib.learn%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BADNN%E8%AF%86%E5%88%AB%E9%B8%A2%E5%B0%BE%E8%8A%B1/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>tf.contrib.learn是TensorFlow提供高级API。下面是使用DNN预测鸢尾花卉数据集的例子。<br>先分析下鸢尾花卉数据集,0/1/2分别代表Setosa,versicolor,virginica三个种类的花</p>
<table>
<thead>
<tr>
<th style="text-align:left">Sepal.Length（花萼长度）</th>
<th style="text-align:left">Sepal.Width（花萼宽度）</th>
<th style="text-align:left">Petal.Length（花瓣长度）</th>
<th style="text-align:left">Petal.Width（花瓣宽度）</th>
<th>种类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">7.9</td>
<td style="text-align:left">3.8</td>
<td style="text-align:left">6.4</td>
<td style="text-align:left">　2.0</td>
<td>0/1/2</td>
</tr>
</tbody>
</table>
<p>１、载入数据<br>２、构造神经网络分类器<br>３、利用训练数据拟合模型<br>４、评估模型的精确性<br>５、新的样本分类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">from __future__ import absolute_import</div><div class="line">from __future__ import division</div><div class="line">from __future__ import print_function</div><div class="line"></div><div class="line">import tensorflow as tf</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">IRIS_TRAINING = &quot;iris_training.csv&quot;</div><div class="line">IRIS_TEST = &quot;iris_test.csv&quot;</div><div class="line"></div><div class="line"># 加载数据集</div><div class="line">training_set = tf.contrib.learn.datasets.base.load_csv_with_header(</div><div class="line">    filename=IRIS_TRAINING,</div><div class="line">    target_dtype=np.int,</div><div class="line">    features_dtype=np.float32)</div><div class="line">test_set = tf.contrib.learn.datasets.base.load_csv_with_header(</div><div class="line">    filename=IRIS_TEST,</div><div class="line">    target_dtype=np.int,</div><div class="line">    features_dtype=np.float32)</div><div class="line"></div><div class="line">print(training_set)</div><div class="line"># 特征</div><div class="line">feature_columns = [tf.contrib.layers.real_valued_column(&quot;&quot;, dimension=4)]</div><div class="line"></div><div class="line"># 构造３层DNN网络，每层分别是10,20,10个节点</div><div class="line">classifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,</div><div class="line">                                            hidden_units=[10, 20, 10],</div><div class="line">                                            n_classes=3,</div><div class="line">                                            model_dir=&quot;/tmp/iris_model&quot;)</div><div class="line"></div><div class="line"># 拟合模型，迭代2000步</div><div class="line">classifier.fit(x=training_set.data,</div><div class="line">               y=training_set.target,</div><div class="line">               steps=2000)</div><div class="line"></div><div class="line"># 计算精度</div><div class="line">accuracy_score = classifier.evaluate(x=test_set.data,</div><div class="line">                                     y=test_set.target)[&quot;accuracy&quot;]</div><div class="line">print(&apos;Accuracy: &#123;0:f&#125;&apos;.format(accuracy_score))</div><div class="line"></div><div class="line"># 对２个新样本预测</div><div class="line">new_samples = np.array(</div><div class="line">    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)</div><div class="line">y = list(classifier.predict(new_samples, as_iterable=True))</div><div class="line">print(&apos;Predictions: &#123;&#125;&apos;.format(str(y)))</div></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Accuracy: 0.966667</div><div class="line">Predictions: [1, 1]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow基础使用]]></title>
      <url>/2017/06/11/TensorFlow%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>TensorFlow几个要点<br>１、使用图graph来代表计算<br>２、在Sessions环境中执行图<br>３、使用tensors代表数据<br>４、使用Variables变量维护状态<br>５、使用feeds和fetches获取或写入操作</p>
<h2 id="图的使用"><a href="#图的使用" class="headerlink" title="图的使用"></a>图的使用</h2><p>构建下图<br><img src="/2017/06/11/TensorFlow基础使用/mul.png" alt=""></p>
<h3 id="构建图"><a href="#构建图" class="headerlink" title="构建图"></a>构建图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"># 声明常量</div><div class="line">matrix1 = tf.constant([[3., 3.]])</div><div class="line">matrix2 = tf.constant([[2.],[2.]])</div><div class="line"># 声明操作</div><div class="line">product = tf.matmul(matrix1, matrix2)</div></pre></td></tr></table></figure>
<h3 id="启动图"><a href="#启动图" class="headerlink" title="启动图"></a>启动图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 启动默认图</div><div class="line">sess = tf.Session()</div><div class="line"># 在图中执行　操作</div><div class="line">result = sess.run(product)</div><div class="line">print(result)</div><div class="line"># ==&gt; [[ 12.]]</div><div class="line"># 关闭图</div><div class="line">sess.close()</div></pre></td></tr></table></figure>
<p>Sessions自动释放资源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">with tf.Session() as sess:</div><div class="line">  result = sess.run([product])</div><div class="line">  print(result)</div></pre></td></tr></table></figure></p>
<h2 id="在Python解释器中使用"><a href="#在Python解释器中使用" class="headerlink" title="在Python解释器中使用"></a>在Python解释器中使用</h2><p>在解释器中可以使用InteractiveSession class, Tensor.eval() ，Operation.run()，避免使用变量保存session<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Enter an interactive TensorFlow Session.</div><div class="line">import tensorflow as tf</div><div class="line">sess = tf.InteractiveSession()</div><div class="line"></div><div class="line">x = tf.Variable([1.0, 2.0])</div><div class="line">a = tf.constant([3.0, 3.0])</div><div class="line"></div><div class="line"># Initialize &apos;x&apos; using the run() method of its initializer op.</div><div class="line">x.initializer.run()</div><div class="line"></div><div class="line"># Add an op to subtract &apos;a&apos; from &apos;x&apos;.  Run it and print the result</div><div class="line">sub = tf.sub(x, a)</div><div class="line">print(sub.eval())</div><div class="line"># ==&gt; [-2. -1.]</div><div class="line"></div><div class="line"># Close the Session when we&apos;re done.</div><div class="line">sess.close()</div></pre></td></tr></table></figure></p>
<h2 id="Tensors"><a href="#Tensors" class="headerlink" title="Tensors"></a>Tensors</h2><p>TensorFlow使用tensor数据结构表示所有数据，在不同操作之间只能传入tensor数据。tensor类似Ｎ维数组，一个tensor包括一个数据类型，一个rank(阶，张量的维数)和一个shape（形状，张量的维度）</p>
<table>
<thead>
<tr>
<th style="text-align:left">阶</th>
<th style="text-align:left">形状</th>
<th style="text-align:left">维数</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">[]</td>
<td style="text-align:left">0-D</td>
<td style="text-align:left">纯量 s = 483</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">[D0]</td>
<td style="text-align:left">1-D</td>
<td style="text-align:left">向量 v = [1.1, 2.2, 3.3]</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">[D0,D1]</td>
<td style="text-align:left">2-D</td>
<td style="text-align:left">矩阵 m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">[D0,D1,D2]</td>
<td style="text-align:left">3-D</td>
<td style="text-align:left">3阶张量 t = [[[2], [4], [6]], [[8], [10], [12]], [[14], [16], [18]]]</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td style="text-align:left">[D0,…Dn]</td>
<td style="text-align:left">4-D</td>
<td style="text-align:left">n阶</td>
</tr>
</tbody>
</table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量存储图的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"># 创建变量state,并初始化为０</div><div class="line">state = tf.Variable(0, name=&quot;counter&quot;)</div><div class="line"># 创建常量one,值为１</div><div class="line">one = tf.constant(1)</div><div class="line"># 加操作</div><div class="line">new_value = tf.add(state, one)</div><div class="line"># 赋值 new_value给state</div><div class="line">update = tf.assign(state, new_value)</div><div class="line"># 初始化所有变量</div><div class="line">init_op = tf.global_variables_initializer()</div><div class="line"># 启动图，执行操作</div><div class="line">with tf.Session() as sess:</div><div class="line">  # 执行init_op操作</div><div class="line">  sess.run(init_op)</div><div class="line">  # 打印state初始值</div><div class="line">  print(sess.run(state))</div><div class="line">  # 执行更新state的操作，并打印</div><div class="line">  for _ in range(3):</div><div class="line">    sess.run(update)</div><div class="line">    print(sess.run(state))</div><div class="line"></div><div class="line"># output:</div><div class="line"></div><div class="line"># 0</div><div class="line"># 1</div><div class="line"># 2</div><div class="line"># 3</div></pre></td></tr></table></figure></p>
<p>sess.run(init_op)之前并没有执行任何操作，所以state为０。sess.run(update)执行操作才会更新state值。</p>
<h2 id="Fetches"><a href="#Fetches" class="headerlink" title="Fetches"></a>Fetches</h2><p>用于取出操作的结果。尽量在一次操作运行中取出多个tensor，提高效率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line">input1 = tf.constant([3.0])</div><div class="line">input2 = tf.constant([2.0])</div><div class="line">input3 = tf.constant([5.0])</div><div class="line"># 加</div><div class="line">intermed = tf.add(input2, input3)</div><div class="line"># 乘</div><div class="line">mul = tf.multiply(input1, intermed)</div><div class="line"># (input2 + input3) * input1</div><div class="line">with tf.Session() as sess:</div><div class="line">  result = sess.run([mul, intermed])</div><div class="line">  print(result)</div><div class="line"></div><div class="line"># output:</div><div class="line"># [array([ 21.], dtype=float32), array([ 7.], dtype=float32)]</div></pre></td></tr></table></figure></p>
<h2 id="Feeds"><a href="#Feeds" class="headerlink" title="Feeds"></a>Feeds</h2><p>用于临时保存tensor值，调用方法结束后，feed消失<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line">input1 = tf.placeholder(tf.float32)</div><div class="line">input2 = tf.placeholder(tf.float32)</div><div class="line"># 乘</div><div class="line">output = tf.multiply(input1, input2)</div><div class="line"></div><div class="line">with tf.Session() as sess:</div><div class="line">  print(sess.run([output], feed_dict=&#123;input1:[7.], input2:[2.]&#125;))</div><div class="line"></div><div class="line"># 输出:</div><div class="line"># [array([ 14.], dtype=float32)]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门]]></title>
      <url>/2017/06/10/TensorFlow%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="一个使用梯度下降实现线性回归的例子"><a href="#一个使用梯度下降实现线性回归的例子" class="headerlink" title="一个使用梯度下降实现线性回归的例子"></a>一个使用梯度下降实现线性回归的例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">import tensorflow as tf</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># 使用NumPy生成100个随机数, y = x * 0.1 + 0.3</div><div class="line">x_data = np.random.rand(100).astype(np.float32)</div><div class="line">y_data = x_data * 0.1 + 0.3</div><div class="line"></div><div class="line"># 目的是求出方程y_data = W * x_data + b的W和b的值</div><div class="line"># 声明变量W和b</div><div class="line">W = tf.Variable(tf.random_uniform([1], -1.0, 1.0))</div><div class="line">b = tf.Variable(tf.zeros([1]))</div><div class="line">y = W * x_data + b</div><div class="line"></div><div class="line"># 求最小均方差</div><div class="line"># reduce_mean 求平均值</div><div class="line"># square 求平方</div><div class="line"># 梯度下降优化</div><div class="line">loss = tf.reduce_mean(tf.square(y - y_data))</div><div class="line">optimizer = tf.train.GradientDescentOptimizer(0.5)</div><div class="line"># 使用梯度下降算法求loss最小值</div><div class="line">train = optimizer.minimize(loss)</div><div class="line"></div><div class="line"># 对所有变量进行初始化</div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"># 启动graph，执行阶段</div><div class="line">sess = tf.Session()</div><div class="line">sess.run(init)</div><div class="line"></div><div class="line"># 拟合直线</div><div class="line">for step in range(501):</div><div class="line">    sess.run(train)</div><div class="line">    if step % 20 == 0:</div><div class="line">        print(step, sess.run(W), sess.run(b))</div><div class="line"></div><div class="line"># 最佳结果是W: [0.1], b: [0.3]</div><div class="line"></div><div class="line"># 结束后关闭Session</div><div class="line">sess.close()</div></pre></td></tr></table></figure>
<p>终端输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0 [ 0.86394864] [-0.13441049]</div><div class="line">20 [ 0.34454051] [ 0.1738376]</div><div class="line">40 [ 0.17663138] [ 0.26046464]</div><div class="line">60 [ 0.12401388] [ 0.28761086]</div><div class="line">80 [ 0.10752521] [ 0.29611763]</div><div class="line">100 [ 0.10235816] [ 0.29878339]</div><div class="line">120 [ 0.10073899] [ 0.29961875]</div><div class="line">140 [ 0.10023157] [ 0.29988053]</div><div class="line">160 [ 0.10007257] [ 0.29996258]</div><div class="line">180 [ 0.10002275] [ 0.29998827]</div><div class="line">200 [ 0.10000715] [ 0.29999632]</div></pre></td></tr></table></figure></p>
<h2 id="TensorFlow的几个概念"><a href="#TensorFlow的几个概念" class="headerlink" title="TensorFlow的几个概念"></a>TensorFlow的几个概念</h2><p>Session：用于执行graph的上下文环境<br>Graph：计算任务，由许多节点组成<br>节点：代表不同的操作，被分配到cpu或gpu执行<br>Variable：变量</p>
<p>TensorFlow分两个阶段，构建阶段和执行阶段</p>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>先随机对W赋值，然后改变W的值，使loss按梯度下降的方向进行减少</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一步一步实现一个小的koa]]></title>
      <url>/2017/06/08/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9A%84koa/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="koa对象"><a href="#koa对象" class="headerlink" title="koa对象"></a>koa对象</h2><p>1 http服务创建<br>2 中间件的添加<br>3 为中间件传入请求，响应参数<br>4 中间件的执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">const Emitter = require(&apos;events&apos;);</div><div class="line">const http = require(&apos;http&apos;);</div><div class="line"></div><div class="line">module.exports = class Application extends Emitter &#123;</div><div class="line">    constructor() &#123;</div><div class="line">    super();</div><div class="line"></div><div class="line">    this.middleware = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 创建http服务，监听端口</div><div class="line">  listen() &#123;</div><div class="line">    const server = http.createServer(this.callback());</div><div class="line">    return server.listen.apply(server, arguments);</div><div class="line">  &#125;</div><div class="line">  // 接收到http请求，触发的回调函数</div><div class="line">  callback() &#123;</div><div class="line">    console.log(&apos;http callback&apos;)</div><div class="line">    console.log(this)</div><div class="line">    const fn = this.compose(this.middleware);</div><div class="line"></div><div class="line">    const handleRequest = (request, response) =&gt; &#123;</div><div class="line">      // 把http请求，响应放进context传入中间件</div><div class="line">      const context = Object.create(null, &#123;</div><div class="line">        request: &#123;value: request&#125;,</div><div class="line">        response: &#123;value: response&#125;,</div><div class="line">      &#125;)</div><div class="line">      return fn(context).catch((err) =&gt; &#123;</div><div class="line">        console.log(&apos;err&apos;)</div><div class="line">        console.log(err)</div><div class="line">      &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    return handleRequest;</div><div class="line">  &#125;</div><div class="line">  // 添加中间件</div><div class="line">  use(fn) &#123;</div><div class="line">    this.middleware.push(fn);</div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line">  // 执行所有中间件</div><div class="line">  compose(middleware) &#123;</div><div class="line">    console.log(&apos;compose&apos;)</div><div class="line">    console.log(middleware)</div><div class="line">    return function(context, next) &#123;</div><div class="line">      console.log(&apos;dispatch&apos;)</div><div class="line">      let index = -1</div><div class="line">      return dispatch(0)</div><div class="line">      function dispatch(i) &#123;</div><div class="line">        console.log(&apos;dispatch:&apos; + i)</div><div class="line">        index = i</div><div class="line">        let fn = middleware[i]</div><div class="line">        if (i === middleware.length) fn = next</div><div class="line">        if (!fn) return Promise.resolve()</div><div class="line">        try &#123;</div><div class="line">        return Promise.resolve(fn(context, function next () &#123;</div><div class="line">          return dispatch(i + 1)</div><div class="line">        &#125;))</div><div class="line">      &#125; catch (err) &#123;</div><div class="line">        return Promise.reject(err)</div><div class="line">      &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;./application&apos;)</div><div class="line">const app = new Koa()</div><div class="line"></div><div class="line">// x-response-time</div><div class="line"></div><div class="line">app.use(async function (context, next) &#123;</div><div class="line">  console.log(&apos;x-response-time start&apos;)</div><div class="line">  console.log(context)</div><div class="line">  const start = new Date()</div><div class="line">  await next()</div><div class="line">  const ms = new Date() - start</div><div class="line">  console.log(&apos;x-response-time end&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// logger</div><div class="line"></div><div class="line">app.use(async function (context, next) &#123;</div><div class="line">  console.log(&apos;logger start&apos;)</div><div class="line">  const start = new Date()</div><div class="line">  await next()</div><div class="line">  const ms = new Date() - start</div><div class="line">  console.log(&apos;logger end&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// response</div><div class="line"></div><div class="line">app.use(context =&gt; &#123;</div><div class="line">  // 可以使用原生的方法处理请求，响应</div><div class="line">  console.log(&apos;hello world&apos;)</div><div class="line">  context.response.stateCode = &apos;200&apos;</div><div class="line">  context.response.end(&apos;Hello World&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(3001)</div></pre></td></tr></table></figure>
<h3 id="最终输出log"><a href="#最终输出log" class="headerlink" title="最终输出log"></a>最终输出log</h3><p>koa-dispatch 中间件执行发起<br><img src="/2017/06/08/一步一步实现一个小的koa/log.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> koa </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习-朴素贝叶斯]]></title>
      <url>/2017/06/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="贝叶斯"><a href="#贝叶斯" class="headerlink" title="贝叶斯"></a>贝叶斯</h2><h3 id="贝叶斯推断：先估计一个值，根据实际结果不断修正。"><a href="#贝叶斯推断：先估计一个值，根据实际结果不断修正。" class="headerlink" title="贝叶斯推断：先估计一个值，根据实际结果不断修正。"></a>贝叶斯推断：先估计一个值，根据实际结果不断修正。</h3><h3 id="贝叶斯定理：P-A-B-，条件概率，事件B发生的情况下，事件A发生的概率。"><a href="#贝叶斯定理：P-A-B-，条件概率，事件B发生的情况下，事件A发生的概率。" class="headerlink" title="贝叶斯定理：P(A|B)，条件概率，事件B发生的情况下，事件A发生的概率。"></a>贝叶斯定理：P(A|B)，条件概率，事件B发生的情况下，事件A发生的概率。</h3><p><img src="/2017/06/06/机器学习-朴素贝叶斯/venturi-diagram.jpg" alt="文氏图"><br>由文氏图得<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo>⋂</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = \frac {P \left ( A \bigcap B \right )} {P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0100069999999999em;"></span><span class="strut bottom" style="height:1.530007em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.48500699999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="op-symbol small-op mop" style="top:0.074995em;">⋂</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>又<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo>⋂</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( B|A \right ) = \frac {P \left ( A \bigcap B \right )} {P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0100069999999999em;"></span><span class="strut bottom" style="height:1.530007em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.48500699999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="op-symbol small-op mop" style="top:0.074995em;">⋂</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>故<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo>⋂</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( A \bigcap B \right ) = P \left ( A|B \right ) \ast P \left ( B \right ) = P \left ( B|A \right ) \ast P \left ( A \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>最终<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = \frac{P \left ( B|A \right ) \ast P \left ( A \right )}{P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p>
<h3 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h3><p>由文氏图得<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo>⋂</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo>⋂</mo><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( B \right ) = P \left ( B \bigcap A \right ) + P \left (  B \bigcap{A}&#x27; \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.751892em;"></span><span class="strut bottom" style="height:1.001902em;vertical-align:-0.25001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord"><span class="mord textstyle uncramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>由条件概率公式得<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo>⋂</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( B \bigcap A \right ) = P \left ( B|A \right ) \ast P \left ( A \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>代入得全概率公式<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( B \right ) = P \left ( B|A \right ) \ast P \left ( A \right ) + P \left ( B|{A}&#x27; \right ) \ast P \left ( {A}&#x27; \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.751892em;"></span><span class="strut bottom" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord"><span class="mord textstyle uncramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord textstyle uncramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>代入条件概率公式得到条件概率另一种写法</p>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = \frac{P \left ( B|A \right ) \ast P \left ( A \right )}{P \left ( B \right )} = \frac{P\left ( B|A \right )\ast P\left ( A \right )}{P \left ( B|A \right ) \ast P \left ( A \right ) + P \left ( B|{A}&#x27; \right ) \ast P \left ( {A}&#x27; \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord"><span class="mord scriptstyle cramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord scriptstyle cramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>
<h3 id="贝叶斯推断"><a href="#贝叶斯推断" class="headerlink" title="贝叶斯推断"></a>贝叶斯推断</h3><p>条件概率<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = P \left ( A \right ) \ast \frac{P \left ( B|A \right )}{P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>P(A)：先验概率，在事件B发生之前，事件A发生的概率，与事件B无关。<br>P(A|B)：后验概率，在事件B发生之后，事件A发生的概率。<br>P(B|A)/P(B)：可能性函数，用于调整先验概率，使之接近后验概率。若大于1，先验概率被增强，后验概率变大，反之，先验概率被削弱，后验概率变小。</p>
<h2 id="使用贝叶斯过滤垃圾邮件"><a href="#使用贝叶斯过滤垃圾邮件" class="headerlink" title="使用贝叶斯过滤垃圾邮件"></a>使用贝叶斯过滤垃圾邮件</h2><p>假定先验概率，垃圾邮件的概率P(S)=50%，正常邮件的概率P(H)=50%<br>根据条件概率公式，某个词语存在的条件下，垃圾邮件的概率：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>W</mi><mi mathvariant="normal">∣</mi><mi>S</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>S</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>W</mi><mi mathvariant="normal">∣</mi><mi>S</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>S</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>W</mi><mi mathvariant="normal">∣</mi><mi>H</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>H</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( S|W \right ) = \frac{P\left ( W|S \right ) \ast P\left ( S \right )}{P\left ( W|S \right )\ast P\left ( S \right )+P\left ( W|H \right )\ast P\left ( H \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>需要求出P(W|S)垃圾邮件中W单词的概率和P(W|H)正常邮件中W单词的概率<br>一般情况下我们需要根据多个单词的出现判断垃圾邮件<br>P1 = P(S|W1)<br>P2 = P(S|W2)</p>
<table>
<thead>
<tr>
<th style="text-align:left">事件</th>
<th style="text-align:left">单词W1</th>
<th style="text-align:left">单词W2</th>
<th style="text-align:left">是否是垃圾邮件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">垃圾邮件E1</td>
<td style="text-align:left">P1</td>
<td style="text-align:left">P2</td>
<td style="text-align:left">P(S)</td>
</tr>
<tr>
<td style="text-align:left">正常邮件E2</td>
<td style="text-align:left">1-P1</td>
<td style="text-align:left">1-P2</td>
<td style="text-align:left">1-P(S)</td>
</tr>
</tbody>
</table>
<p>假设事件独立<br>P(E1) = P(S|W1)P(S|W2)P(S)<br>P(E2) = (1-P(S|W1))(1-P(S|W2))(1-P(S))<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>E</mi><mn>1</mn><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>E</mi><mn>1</mn><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>E</mi><mn>2</mn><mo fence="true">)</mo></mrow></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>1</mn><mo>)</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>2</mn><mo>)</mo><mi>P</mi><mo>(</mo><mi>S</mi><mo>)</mo></mrow><mrow><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>1</mn><mo>)</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>2</mn><mo>)</mo><mi>P</mi><mo>(</mo><mi>S</mi><mo>)</mo><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>1</mn><mo>)</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>2</mn><mo>)</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo>(</mo><mi>S</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P=\frac{P\left ( E1 \right )}{P\left ( E1 \right ) + P\left ( E2 \right )}=\frac{P(S|W1)P(S|W2)P(S)}{P(S|W1)P(S|W2)P(S)+(1-P(S|W1)(1-P(S|W2)(1-P(S))))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="mord mathrm">1</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="mord mathrm">2</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="mord mathrm">1</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>代入P(S)=0.5<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>1</mn><mo>)</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>2</mn><mo>)</mo></mrow><mrow><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>1</mn><mo>)</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>2</mn><mo>)</mo><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>1</mn><mo>)</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo>(</mo><mi>S</mi><mi mathvariant="normal">∣</mi><mi>W</mi><mn>2</mn><mo>)</mo><mo>)</mo><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P=\frac{P(S|W1)P(S|W2)}{P(S|W1)P(S|W2)+(1-P(S|W1)(1-P(S|W2)))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathrm">2</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><mi>P</mi><mn>1</mn><mi>P</mi><mn>2</mn></mrow><mrow><mi>P</mi><mn>1</mn><mi>P</mi><mn>2</mn><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mn>1</mn><mo>)</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mn>2</mn><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P=\frac{P1P2}{P1P2 + (1-P1)(1-P2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">2</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">2</span><span class="mclose">)</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>扩展到所有单词<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><mi>P</mi><mn>1</mn><mi>P</mi><mn>2</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>P</mi><mi>n</mi></mrow><mrow><mi>P</mi><mn>1</mn><mi>P</mi><mn>2</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>P</mi><mi>n</mi><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mn>1</mn><mo>)</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mn>2</mn><mo>)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mi>n</mi><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P=\frac{P1P2...Pn}{P1P2...Pn + (1-P1)(1-P2)...(1-Pn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit">n</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p>
<h2 id="朴素贝叶斯三个模型（scikit-learn）"><a href="#朴素贝叶斯三个模型（scikit-learn）" class="headerlink" title="朴素贝叶斯三个模型（scikit-learn）"></a>朴素贝叶斯三个模型（scikit-learn）</h2><p>高斯Gaussian:特征值分布符合高斯分布<br>多项式Multinomial:适合文本分类<br>伯努利Bernoulli:特征取值是布尔型的<br><!--<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><msub><mi>x</mi><mrow><mi>i</mi></mrow></msub><mi mathvariant="normal">∣</mi><mi>y</mi><mo>)</mo><mo>=</mo><mi>P</mi><mo>(</mo><mi>i</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo>)</mo><msub><mi>x</mi><mrow><mi>i</mi></mrow></msub><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo>(</mo><mi>i</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo>)</mo><mo>)</mo><mo>(</mo><mn>1</mn><mo>−</mo><msub><mi>x</mi><mrow><mi>i</mi></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">P(x_{i}|y)= P(i|y)x_{i} + (1-P(i|y))(1-x_{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span>–&gt;</p>
--></p>]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scikit-learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人工智能应用收集]]></title>
      <url>/2017/06/06/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">介绍</th>
<th style="text-align:left">链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">logojoy</td>
<td style="text-align:left">使用遗传算法生成logo</td>
<td style="text-align:left"><a href="https://www.logojoy.com/" target="_blank" rel="external">https://www.logojoy.com/</a></td>
</tr>
<tr>
<td style="text-align:left">PaintsChainer</td>
<td style="text-align:left">漫画线稿自动上色</td>
<td style="text-align:left"><a href="https://github.com/pfnet/PaintsChainer" target="_blank" rel="external">https://github.com/pfnet/PaintsChainer</a></td>
</tr>
<tr>
<td style="text-align:left">arkie</td>
<td style="text-align:left">生成设计海报</td>
<td style="text-align:left"><a href="http://www.arkie.cn/" target="_blank" rel="external">http://www.arkie.cn/</a></td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa-router源码分析]]></title>
      <url>/2017/05/31/koa-router%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>本文koa-router版本是7.2.0</p>
<p>路由定义：根据请求url路径，通过判断或正则匹配返回对应的页面。</p>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="原生示例："><a href="#原生示例：" class="headerlink" title="原生示例："></a>原生示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line"></div><div class="line">async function route( url ) &#123;</div><div class="line">  let view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class="line">  switch ( url ) &#123;</div><div class="line">    case &apos;/&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    case &apos;/index&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    case &apos;/todo&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;to do&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    case &apos;/404&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    default:</div><div class="line">      break</div><div class="line">  &#125;</div><div class="line">  let html = view</div><div class="line">  return html</div><div class="line">&#125;</div><div class="line"></div><div class="line">app.use( async ( ctx ) =&gt; &#123;</div><div class="line">  let url = ctx.request.url</div><div class="line">  let html = await route( url )</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="一个简单的koa-router例子"><a href="#一个简单的koa-router例子" class="headerlink" title="一个简单的koa-router例子"></a>一个简单的koa-router例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">var router = new Router()</div><div class="line"></div><div class="line">router.get(&apos;/&apos;, function (ctx, next) &#123;</div><div class="line">  console.log(ctx.router)</div><div class="line">  console.log(ctx.params)</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;/&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.get(&apos;/name/:id&apos;, function (ctx, next) &#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;name:$&#123;ctx.params.id&#125;&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.get(&apos;/company&apos;, function (ctx, next) &#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;company&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line">app.use(router.routes()).use(router.allowedMethods())</div><div class="line">console.log(router)</div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="多个子router的使用"><a href="#多个子router的使用" class="headerlink" title="多个子router的使用"></a>多个子router的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">// 子路由1</div><div class="line">let home = new Router()</div><div class="line">home.get(&apos;/&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li&gt;&lt;a href=&quot;/page/helloworld&quot;&gt;/page/helloworld&lt;/a&gt;&lt;/li&gt;</div><div class="line">      &lt;li&gt;&lt;a href=&quot;/page/404&quot;&gt;/page/404&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 子路由2</div><div class="line">let page = new Router()</div><div class="line">page.get(&apos;/404&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  ctx.body = &apos;404 page!&apos;</div><div class="line">&#125;).get(&apos;/helloworld&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  ctx.body = &apos;helloworld page!&apos;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 装载子路由</div><div class="line">let router = new Router()</div><div class="line">router.use(&apos;/&apos;, home.routes(), home.allowedMethods())</div><div class="line">router.use(&apos;/page&apos;, page.routes(), page.allowedMethods())</div><div class="line"></div><div class="line">// 加载路由中间件</div><div class="line">app.use(router.routes()).use(router.allowedMethods())</div><div class="line"></div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">let home = new Router()</div><div class="line">let page = new Router()</div><div class="line">page.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;page:$&#123;ctx.params.pageid&#125;&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line">// /home/232/page</div><div class="line">home.use(&apos;/home/:fid/page&apos;, page.routes(), page.allowedMethods());</div><div class="line"></div><div class="line">// 加载路由中间件</div><div class="line">app.use(home.routes())</div><div class="line"></div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="路由前缀"><a href="#路由前缀" class="headerlink" title="路由前缀"></a>路由前缀</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">let router = new Router(&#123;</div><div class="line">  prefix: &apos;/users&apos;</div><div class="line">&#125;)</div><div class="line">// /users</div><div class="line">router.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;user home&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line">// /users/:userid</div><div class="line">router.get(&apos;/:userid&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;user-id:$&#123;ctx.params.userid&#125;&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(router.routes()).use(router.allowedMethods())</div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h2 id="Router的结构"><a href="#Router的结构" class="headerlink" title="Router的结构"></a>Router的结构</h2><p>Router构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = Router;</div><div class="line"></div><div class="line">function Router(opts) &#123;</div><div class="line">  if (!(this instanceof Router)) &#123;</div><div class="line">    return new Router(opts);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  this.opts = opts || &#123;&#125;;</div><div class="line">  this.methods = this.opts.methods || [</div><div class="line">    &apos;HEAD&apos;,</div><div class="line">    &apos;OPTIONS&apos;,</div><div class="line">    &apos;GET&apos;,</div><div class="line">    &apos;PUT&apos;,</div><div class="line">    &apos;PATCH&apos;,</div><div class="line">    &apos;POST&apos;,</div><div class="line">    &apos;DELETE&apos;</div><div class="line">  ];</div><div class="line"></div><div class="line">  this.params = &#123;&#125;;</div><div class="line">  //stack存储不同的Layer，Router和Layer的关系是Router包含Layer</div><div class="line">  this.stack = [];</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p> Layer构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">function Layer(path, methods, middleware, opts) &#123;</div><div class="line">  this.opts = opts || &#123;&#125;;</div><div class="line">  this.name = this.opts.name || null;</div><div class="line">  this.methods = [];</div><div class="line">  this.paramNames = [];</div><div class="line">  this.stack = Array.isArray(middleware) ? middleware : [middleware];</div><div class="line"></div><div class="line">  methods.forEach(function(method) &#123;</div><div class="line">    var l = this.methods.push(method.toUpperCase());</div><div class="line">    if (this.methods[l-1] === &apos;GET&apos;) &#123;</div><div class="line">      this.methods.unshift(&apos;HEAD&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;, this);</div><div class="line"></div><div class="line">  // ensure middleware is a function</div><div class="line">  this.stack.forEach(function(fn) &#123;</div><div class="line">    var type = (typeof fn);</div><div class="line">    if (type !== &apos;function&apos;) &#123;</div><div class="line">      throw new Error(</div><div class="line">        methods.toString() + &quot; `&quot; + (this.opts.name || path) +&quot;`: `middleware` &quot;</div><div class="line">        + &quot;must be a function, not `&quot; + type + &quot;`&quot;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;, this);</div><div class="line"></div><div class="line">  this.path = path;</div><div class="line">  this.regexp = pathToRegExp(path, this.paramNames, this.opts);</div><div class="line"></div><div class="line">  debug(&apos;defined route %s %s&apos;, this.methods, this.opts.prefix + this.path);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Router对象"><a href="#Router对象" class="headerlink" title="Router对象"></a>Router对象</h3><p>可以看出layer存储匹配规则等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Router &#123;</div><div class="line">  opts: &#123;&#125;,</div><div class="line">  methods: [ &apos;HEAD&apos;, &apos;OPTIONS&apos;, &apos;GET&apos;, &apos;PUT&apos;, &apos;PATCH&apos;, &apos;POST&apos;, &apos;DELETE&apos; ],</div><div class="line">  params: &#123;&#125;,</div><div class="line">  stack:</div><div class="line">   [ Layer &#123;</div><div class="line">       opts: [Object],</div><div class="line">       name: null,</div><div class="line">       methods: [Object],</div><div class="line">       paramNames: [],</div><div class="line">       stack: [Object],</div><div class="line">       path: &apos;/&apos;,</div><div class="line">       regexp: /^(?:\/(?=$))?$/i &#125;,</div><div class="line">     Layer &#123;</div><div class="line">       opts: [Object],</div><div class="line">       name: null,</div><div class="line">       methods: [Object],</div><div class="line">       paramNames: [Object],</div><div class="line">       stack: [Object],</div><div class="line">       path: &apos;/name/:id&apos;,</div><div class="line">       regexp: /^\/name\/((?:[^\/]+?))(?:\/(?=$))?$/i &#125;,</div><div class="line">     Layer &#123;</div><div class="line">       opts: [Object],</div><div class="line">       name: null,</div><div class="line">       methods: [Object],</div><div class="line">       paramNames: [],</div><div class="line">       stack: [Object],</div><div class="line">       path: &apos;/company&apos;,</div><div class="line">       regexp: /^\/company(?:\/(?=$))?$/i &#125; ] &#125;</div></pre></td></tr></table></figure></p>
<h3 id="path的匹配"><a href="#path的匹配" class="headerlink" title="path的匹配"></a>path的匹配</h3><p>分两层，Router遍历所有layer，返回匹配的matched对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Router.prototype.match = function (path, method) &#123;</div><div class="line">  var layers = this.stack;</div><div class="line">  var layer;</div><div class="line">  var matched = &#123;</div><div class="line">    //存储path匹配的layer</div><div class="line">    path: [],</div><div class="line">    //存储methods匹配的layer</div><div class="line">    pathAndMethod: [],</div><div class="line">    // 是否匹配成功</div><div class="line">    route: false</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  for (var len = layers.length, i = 0; i &lt; len; i++) &#123;</div><div class="line">    layer = layers[i];</div><div class="line"></div><div class="line">    debug(&apos;test %s %s&apos;, layer.path, layer.regexp);</div><div class="line"></div><div class="line">    if (layer.match(path)) &#123;</div><div class="line">      matched.path.push(layer);</div><div class="line"></div><div class="line">      if (layer.methods.length === 0 || ~layer.methods.indexOf(method)) &#123;</div><div class="line">        matched.pathAndMethod.push(layer);</div><div class="line">        if (layer.methods.length) matched.route = true;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return matched;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Layer层通过正则匹配路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Layer.prototype.match = function (path) &#123;</div><div class="line">  return this.regexp.test(path);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Router-use"><a href="#Router-use" class="headerlink" title="Router.use()"></a>Router.use()</h3><p>Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());<br>router.routes()返回一个中间件，用于对请求发起路由匹配，把一些router参数加入ctx对象,执行router.routes()，返回的是一个dispatch(ctx, next)方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">Router.prototype.routes = Router.prototype.middleware = function () &#123;</div><div class="line">  var router = this;</div><div class="line"></div><div class="line">  var dispatch = function dispatch(ctx, next) &#123;</div><div class="line">    debug(&apos;%s %s&apos;, ctx.method, ctx.path);</div><div class="line">    // 获取path</div><div class="line">    var path = router.opts.routerPath || ctx.routerPath || ctx.path;</div><div class="line">    // 发起path match，获取matched对象</div><div class="line">    var matched = router.match(path, ctx.method);</div><div class="line">    var layerChain, layer, i;</div><div class="line"></div><div class="line">    if (ctx.matched) &#123;</div><div class="line">      ctx.matched.push.apply(ctx.matched, matched.path);</div><div class="line">    &#125; else &#123;</div><div class="line">      ctx.matched = matched.path;</div><div class="line">    &#125;</div><div class="line">    // 可以从ctx 取router</div><div class="line">    ctx.router = router;</div><div class="line">    // 判断是否匹配成功</div><div class="line">    if (!matched.route) return next();</div><div class="line"></div><div class="line">    var matchedLayers = matched.pathAndMethod</div><div class="line">    var mostSpecificLayer = matchedLayers[matchedLayers.length - 1]</div><div class="line">    ctx._matchedRoute = mostSpecificLayer.path;</div><div class="line">    if (mostSpecificLayer.name) &#123;</div><div class="line">      ctx._matchedRouteName = mostSpecificLayer.name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    layerChain = matchedLayers.reduce(function(memo, layer) &#123;</div><div class="line">      memo.push(function(ctx, next) &#123;</div><div class="line">        ctx.captures = layer.captures(path, ctx.captures);</div><div class="line">        ctx.params = layer.params(path, ctx.captures, ctx.params);</div><div class="line">        return next();</div><div class="line">      &#125;);</div><div class="line">      return memo.concat(layer.stack);</div><div class="line">    &#125;, []);</div><div class="line"></div><div class="line">    return compose(layerChain)(ctx, next);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  dispatch.router = this;</div><div class="line"></div><div class="line">  return dispatch;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Router-allowedMethods"><a href="#Router-allowedMethods" class="headerlink" title="Router.allowedMethods()"></a>Router.allowedMethods()</h3><p>执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">Router.prototype.allowedMethods = function (options) &#123;</div><div class="line">  options = options || &#123;&#125;;</div><div class="line">  var implemented = this.methods;</div><div class="line"></div><div class="line">  return function allowedMethods(ctx, next) &#123;</div><div class="line">    return next().then(function() &#123;</div><div class="line">      var allowed = &#123;&#125;;</div><div class="line"></div><div class="line">      if (!ctx.status || ctx.status === 404) &#123;</div><div class="line">        ctx.matched.forEach(function (route) &#123;</div><div class="line">          route.methods.forEach(function (method) &#123;</div><div class="line">            allowed[method] = method;</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        var allowedArr = Object.keys(allowed);</div><div class="line">        // 判断请求method是否在允许范围内</div><div class="line">        if (!~implemented.indexOf(ctx.method)) &#123;</div><div class="line">          if (options.throw) &#123;</div><div class="line">            var notImplementedThrowable;</div><div class="line">            if (typeof options.notImplemented === &apos;function&apos;) &#123;</div><div class="line">              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function</div><div class="line">            &#125; else &#123;</div><div class="line">              notImplementedThrowable = new HttpError.NotImplemented();</div><div class="line">            &#125;</div><div class="line">            throw notImplementedThrowable;</div><div class="line">          &#125; else &#123;</div><div class="line">            ctx.status = 501;</div><div class="line">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class="line">          &#125;</div><div class="line">        &#125; else if (allowedArr.length) &#123;</div><div class="line">          if (ctx.method === &apos;OPTIONS&apos;) &#123;</div><div class="line">            ctx.status = 204;</div><div class="line">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class="line">          &#125; else if (!allowed[ctx.method]) &#123;</div><div class="line">            if (options.throw) &#123;</div><div class="line">              var notAllowedThrowable;</div><div class="line">              if (typeof options.methodNotAllowed === &apos;function&apos;) &#123;</div><div class="line">                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function</div><div class="line">              &#125; else &#123;</div><div class="line">                notAllowedThrowable = new HttpError.MethodNotAllowed();</div><div class="line">              &#125;</div><div class="line">              throw notAllowedThrowable;</div><div class="line">            &#125; else &#123;</div><div class="line">              ctx.status = 405;</div><div class="line">              ctx.set(&apos;Allow&apos;, allowedArr);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>app.use(router.routes()).use(router.allowedMethods());<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">Router.prototype.use = function () &#123;</div><div class="line">  var router = this;</div><div class="line">  // 将传入参数转换为数组</div><div class="line">  var middleware = Array.prototype.slice.call(arguments);</div><div class="line">  var path = &apos;(.*)&apos;;</div><div class="line"></div><div class="line">  // support array of paths</div><div class="line">  if (Array.isArray(middleware[0]) &amp;&amp; typeof middleware[0][0] === &apos;string&apos;) &#123;</div><div class="line">    middleware[0].forEach(function (p) &#123;</div><div class="line">      router.use.apply(router, [p].concat(middleware.slice(1)));</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var hasPath = typeof middleware[0] === &apos;string&apos;;</div><div class="line">  if (hasPath) &#123;</div><div class="line">    path = middleware.shift();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  middleware.forEach(function (m) &#123;</div><div class="line">    if (m.router) &#123;</div><div class="line">      // 对router.routes()参数的处理</div><div class="line">      m.router.stack.forEach(function (nestedLayer) &#123;</div><div class="line">        if (path) nestedLayer.setPrefix(path);</div><div class="line">        // 绑定layer</div><div class="line">        if (router.opts.prefix) nestedLayer.setPrefix(router.opts.prefix);</div><div class="line">        router.stack.push(nestedLayer);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      if (router.params) &#123;</div><div class="line">        Object.keys(router.params).forEach(function (key) &#123;</div><div class="line">          m.router.param(key, router.params[key]);</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">      // 创建并注册一个route</div><div class="line">      router.register(path, [], m, &#123; end: false, ignoreCaptures: !hasPath &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  return this;</div><div class="line">&#125;;</div><div class="line">// 创建并注册一个route</div><div class="line">Router.prototype.register = function (path, methods, middleware, opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line"></div><div class="line">  var router = this;</div><div class="line">  var stack = this.stack;</div><div class="line"></div><div class="line">  // support array of paths</div><div class="line">  if (Array.isArray(path)) &#123;</div><div class="line">    path.forEach(function (p) &#123;</div><div class="line">      router.register.call(router, p, methods, middleware, opts);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // create route Layer</div><div class="line">  var route = new Layer(path, methods, middleware, &#123;</div><div class="line">    end: opts.end === false ? opts.end : true,</div><div class="line">    name: opts.name,</div><div class="line">    sensitive: opts.sensitive || this.opts.sensitive || false,</div><div class="line">    strict: opts.strict || this.opts.strict || false,</div><div class="line">    prefix: opts.prefix || this.opts.prefix || &quot;&quot;,</div><div class="line">    ignoreCaptures: opts.ignoreCaptures</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  if (this.opts.prefix) &#123;</div><div class="line">    route.setPrefix(this.opts.prefix);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // add parameter middleware</div><div class="line">  Object.keys(this.params).forEach(function (param) &#123;</div><div class="line">    route.param(param, this.params[param]);</div><div class="line">  &#125;, this);</div><div class="line"></div><div class="line">  stack.push(route);</div><div class="line"></div><div class="line">  return route;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> koa-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa源码分析]]></title>
      <url>/2017/05/25/koa%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>本文koa版本是2.2.0</p>
<h2 id="创建koa服务"><a href="#创建koa服务" class="headerlink" title="创建koa服务:"></a>创建koa服务:</h2><ol>
<li>创建koa的app对象</li>
<li>为app添加中间件</li>
<li>监听端口，创建server</li>
</ol>
<p>下面是一个简单的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;);</div><div class="line">const app = new Koa();</div><div class="line"></div><div class="line">// x-response-time</div><div class="line"></div><div class="line">app.use(async function (ctx, next) &#123;</div><div class="line">  console.log(&apos;x-response-time start&apos;)</div><div class="line">  const start = new Date();</div><div class="line">  await next();</div><div class="line">  const ms = new Date() - start;</div><div class="line">  ctx.set(&apos;X-Response-Time&apos;, `$&#123;ms&#125;ms`);</div><div class="line">  console.log(&apos;x-response-time end&apos;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logger</div><div class="line"></div><div class="line">app.use(async function (ctx, next) &#123;</div><div class="line">  console.log(&apos;logger start&apos;)</div><div class="line">  const start = new Date();</div><div class="line">  await next();</div><div class="line">  const ms = new Date() - start;</div><div class="line">  console.log(`$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;ms&#125;`);</div><div class="line">  console.log(&apos;logger end&apos;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// response</div><div class="line"></div><div class="line">app.use(ctx =&gt; &#123;</div><div class="line">  console.log(&apos;hello world&apos;)</div><div class="line">  ctx.body = &apos;Hello World&apos;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(3000);</div></pre></td></tr></table></figure></p>
<p>当请求<a href="http://localhost:3000/时，页面返回&#39;Hello" target="_blank" rel="external">http://localhost:3000/时，页面返回&#39;Hello</a> World’</p>
<h3 id="中间件执行顺序"><a href="#中间件执行顺序" class="headerlink" title="中间件执行顺序"></a>中间件执行顺序</h3><p>命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’</p>
<h3 id="async异步函数"><a href="#async异步函数" class="headerlink" title="async异步函数"></a>async异步函数</h3><p>从请求到响应类似下图<br><img src="/2017/05/25/koa源码分析/koa-onion.png" alt=""></p>
<h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><h3 id="app对象结构"><a href="#app对象结构" class="headerlink" title="app对象结构"></a>app对象结构</h3><p><img src="/2017/05/25/koa源码分析/koa2.png" alt=""><br>创建Koa的app对象，Application继承Emitter对象，代码结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Application extends Emitter &#123;</div><div class="line"> constructor() &#123;</div><div class="line">   super();</div><div class="line"></div><div class="line">   this.proxy = false;</div><div class="line">   // 用于存储中间件的数组</div><div class="line">   this.middleware = [];</div><div class="line">   this.subdomainOffset = 2;</div><div class="line">   this.env = process.env.NODE_ENV || &apos;development&apos;;</div><div class="line">   // 上下文对象</div><div class="line">   this.context = Object.create(context);</div><div class="line">   // 请求对象</div><div class="line">   this.request = Object.create(request);</div><div class="line">   // 响应对象</div><div class="line">   this.response = Object.create(response);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="添加中间件"><a href="#添加中间件" class="headerlink" title="添加中间件"></a>添加中间件</h3><p>koa的中间件是很重要，使用app.use()添加中间件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">use(fn) &#123;</div><div class="line">  //判断fn不是函数返回错误</div><div class="line">  if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;middleware must be a function!&apos;);</div><div class="line">  if (isGeneratorFunction(fn)) &#123;</div><div class="line">    deprecate(&apos;Support for generators will be removed in v3. &apos; +</div><div class="line">              &apos;See the documentation for examples of how to convert old middleware &apos; +</div><div class="line">              &apos;https://github.com/koajs/koa/blob/master/docs/migration.md&apos;);</div><div class="line">    fn = convert(fn);</div><div class="line">  &#125;</div><div class="line">  debug(&apos;use %s&apos;, fn._name || fn.name || &apos;-&apos;);</div><div class="line">  //把中间件函数push进application的middleware数组内</div><div class="line">  this.middleware.push(fn);</div><div class="line">  return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h3><p>app.listen()监听端口，listen是createServer()的封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen() &#123;</div><div class="line">  debug(&apos;listen&apos;);</div><div class="line">  const server = http.createServer(this.callback());</div><div class="line">  return server.listen.apply(server, arguments);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="接收到请求时的回调函数"><a href="#接收到请求时的回调函数" class="headerlink" title="接收到请求时的回调函数"></a>接收到请求时的回调函数</h3><p>当服务接收到http请求时，触发callback函数，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">callback() &#123;</div><div class="line">  // 执行中间件</div><div class="line">  const fn = compose(this.middleware);</div><div class="line"></div><div class="line">  if (!this.listeners(&apos;error&apos;).length) this.on(&apos;error&apos;, this.onerror);</div><div class="line"></div><div class="line">  const handleRequest = (req, res) =&gt; &#123;</div><div class="line">    res.statusCode = 404;</div><div class="line">    const ctx = this.createContext(req, res);</div><div class="line">    const onerror = err =&gt; ctx.onerror(err);</div><div class="line">    const handleResponse = () =&gt; respond(ctx);</div><div class="line">    onFinished(res, onerror);</div><div class="line">    // fn()</div><div class="line">    return fn(ctx).then(handleResponse).catch(onerror);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  return handleRequest;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p> compose返回一个用于执行中间件的函数，在callback()函数执行fn(ctx)，从dispatch(0)开始，执行第一个中间件函数，然后递归执行dispatch(i)，执行中间件函数，直到执行完所有中间件函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function compose (middleware) &#123;</div><div class="line">  // 参数判断</div><div class="line">  if (!Array.isArray(middleware)) throw new TypeError(&apos;Middleware stack must be an array!&apos;)</div><div class="line">  for (const fn of middleware) &#123;</div><div class="line">    if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;Middleware must be composed of functions!&apos;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return function (context, next) &#123;</div><div class="line">    // last called middleware #</div><div class="line">    // 闭包，存储index变量，中间件执行当前坐标</div><div class="line">    let index = -1</div><div class="line">    // 从第一个中间件开始执行</div><div class="line">    return dispatch(0)</div><div class="line">    function dispatch (i) &#123;</div><div class="line">      if (i &lt;= index) return Promise.reject(new Error(&apos;next() called multiple times&apos;))</div><div class="line">      index = i</div><div class="line">      // 取出中间件函数</div><div class="line">      let fn = middleware[i]</div><div class="line">      // 最后一个是请求处理</div><div class="line">      if (i === middleware.length) fn = next</div><div class="line">      if (!fn) return Promise.resolve()</div><div class="line">      try &#123;</div><div class="line">        // 执行中间件函数</div><div class="line">        return Promise.resolve(fn(context, function next () &#123;</div><div class="line">          // 执行下一个中间件</div><div class="line">          return dispatch(i + 1)</div><div class="line">        &#125;))</div><div class="line">      &#125; catch (err) &#123;</div><div class="line">        return Promise.reject(err)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="context保存请求，响应对象"><a href="#context保存请求，响应对象" class="headerlink" title="context保存请求，响应对象"></a>context保存请求，响应对象</h3><p> context上下文用于管理请求，响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">createContext(req, res) &#123;</div><div class="line">  const context = Object.create(this.context);</div><div class="line">  const request = context.request = Object.create(this.request);</div><div class="line">  const response = context.response = Object.create(this.response);</div><div class="line">  // 通过context可以获取app,request,response对象</div><div class="line">  context.app = request.app = response.app = this;</div><div class="line">  context.req = request.req = response.req = req;</div><div class="line">  context.res = request.res = response.res = res;</div><div class="line">  request.ctx = response.ctx = context;</div><div class="line">  request.response = response;</div><div class="line">  response.request = request;</div><div class="line">  context.originalUrl = request.originalUrl = req.url;</div><div class="line">  context.cookies = new Cookies(req, res, &#123;</div><div class="line">    keys: this.keys,</div><div class="line">    secure: request.secure</div><div class="line">  &#125;);</div><div class="line">  request.ip = request.ips[0] || req.socket.remoteAddress || &apos;&apos;;</div><div class="line">  context.accept = request.accept = accepts(req);</div><div class="line">  context.state = &#123;&#125;;</div><div class="line">  return context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="请求和响应委托-Delegator-给context"><a href="#请求和响应委托-Delegator-给context" class="headerlink" title="请求和响应委托(Delegator)给context"></a>请求和响应委托(Delegator)给context</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// context 对象</div><div class="line">const delegate = require(&apos;delegates&apos;);</div><div class="line">const proto = module.exports = &#123;</div><div class="line">  // 请求委托</div><div class="line">  delegate(proto, &apos;response&apos;)</div><div class="line">    .method(&apos;set&apos;)</div><div class="line">    .access(&apos;body&apos;)</div><div class="line">    .getter(&apos;headerSent&apos;)</div><div class="line">  // 响应委托</div><div class="line">  delegate(proto, &apos;request&apos;)</div><div class="line">    .method(&apos;get&apos;)</div><div class="line">    .access(&apos;url&apos;)</div><div class="line">    .getter(&apos;origin&apos;)</div><div class="line">&#125;</div><div class="line">// delegate 实现</div><div class="line">// proto 被委托的对象</div><div class="line">function Delegator(proto, target) &#123;</div><div class="line">  if (!(this instanceof Delegator)) return new Delegator(proto, target);</div><div class="line">  this.proto = proto;</div><div class="line">  this.target = target;</div><div class="line">  this.methods = [];</div><div class="line">  this.getters = [];</div><div class="line">  this.setters = [];</div><div class="line">  this.fluents = [];</div><div class="line">&#125;</div><div class="line">// 获取委托对象</div><div class="line">Delegator.prototype.access = function(name)&#123;</div><div class="line">  return this.getter(name).setter(name);</div><div class="line">&#125;;</div><div class="line">Delegator.prototype.getter = function(name)&#123;</div><div class="line">  var proto = this.proto;</div><div class="line">  var target = this.target;</div><div class="line">  this.getters.push(name);</div><div class="line"></div><div class="line">  proto.__defineGetter__(name, function()&#123;</div><div class="line">    return this[target][name];</div><div class="line">  &#125;);</div><div class="line">  // 用于链式调用</div><div class="line">  return this;</div><div class="line">&#125;;</div><div class="line">Delegator.prototype.method = function(name)&#123;</div><div class="line">  var proto = this.proto;</div><div class="line">  var target = this.target;</div><div class="line">  this.methods.push(name);</div><div class="line"></div><div class="line">  proto[name] = function()&#123;</div><div class="line">    // 方法委托</div><div class="line">    return this[target][name].apply(this[target], arguments);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  return this;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="response-body-处理"><a href="#response-body-处理" class="headerlink" title="response body 处理"></a>response body 处理</h3><p>分三种情况string,buffer,stream<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  get body() &#123;</div><div class="line">    return this._body;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  set body(val) &#123;</div><div class="line">    const original = this._body;</div><div class="line">    this._body = val;</div><div class="line"></div><div class="line">    if (this.res.headersSent) return;</div><div class="line"></div><div class="line">    // no content</div><div class="line">    if (null == val) &#123;</div><div class="line">      if (!statuses.empty[this.status]) this.status = 204;</div><div class="line">      this.remove(&apos;Content-Type&apos;);</div><div class="line">      this.remove(&apos;Content-Length&apos;);</div><div class="line">      this.remove(&apos;Transfer-Encoding&apos;);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // set the status</div><div class="line">    if (!this._explicitStatus) this.status = 200;</div><div class="line"></div><div class="line">    // set the content-type only if not yet set</div><div class="line">    const setType = !this.header[&apos;content-type&apos;];</div><div class="line"></div><div class="line">    // string字符串处理</div><div class="line">    if (&apos;string&apos; == typeof val) &#123;</div><div class="line">      if (setType) this.type = /^\s*&lt;/.test(val) ? &apos;html&apos; : &apos;text&apos;;</div><div class="line">      this.length = Buffer.byteLength(val);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // buffer</div><div class="line">    if (Buffer.isBuffer(val)) &#123;</div><div class="line">      if (setType) this.type = &apos;bin&apos;;</div><div class="line">      this.length = val.length;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // stream流</div><div class="line">    if (&apos;function&apos; == typeof val.pipe) &#123;</div><div class="line">      onFinish(this.res, destroy.bind(null, val));</div><div class="line">      ensureErrorHandler(val, err =&gt; this.ctx.onerror(err));</div><div class="line"></div><div class="line">      // overwriting</div><div class="line">      if (null != original &amp;&amp; original != val) this.remove(&apos;Content-Length&apos;);</div><div class="line"></div><div class="line">      if (setType) this.type = &apos;bin&apos;;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // json</div><div class="line">    this.remove(&apos;Content-Length&apos;);</div><div class="line">    this.type = &apos;json&apos;;</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> koa </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
