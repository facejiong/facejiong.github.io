{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1496718737215},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1496718737045},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1496718736975},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1496718737298},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1496718737166},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1496718737329},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1496718737320},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1496718737325},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1496718737334},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1496718737345},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1496718737363},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1496718737354},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1496718737435},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1496718738071},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1496718737459},{"_id":"source/_posts/hello-world.md","hash":"2e3c2c8217023c26feba537723b088c50b83b9bf","modified":1496718736554},{"_id":"source/_posts/人工智能应用收集.md","hash":"499b1e373790b6362270a2fb1eda1159ccc5c3a2","modified":1496747801291},{"_id":"source/categories/index.md","hash":"b56d964e25a49577ad279d5727e846bb3fa8f700","modified":1496718736865},{"_id":"source/tags/index.md","hash":"4c2a8abfa3bfe9b43b333b14848fe2cfb36d09bf","modified":1496718736916},{"_id":"source/_posts/koa-router源码分析.md","hash":"e87a604126282a3c9b2e38b8f8b7baeab0e5729b","modified":1496732970854},{"_id":"source/_posts/koa源码分析.md","hash":"e31bf858b466a6b05370453a018b0789b4f0684d","modified":1496733032585},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1496718737476},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1496718737486},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1496718737496},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1496718737505},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1496718737512},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1496718737524},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1496718737529},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1496718737534},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1496718737539},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1496718737545},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1496718737551},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1496718737556},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1496718737563},{"_id":"themes/next/_config.yml","hash":"c1c2e17595f66e7c8c014f9bfff4ebf76ccadaa2","modified":1496718737424},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1496718737518},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1496718738049},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1496718738053},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1496718738046},{"_id":"themes/next/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1496718738056},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1496718738088},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1496718738075},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1496718738059},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1496718738067},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1496718739406},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718738560},{"_id":"source/_posts/koa源码分析/koa-onion.png","hash":"a5c74cf845c9f0e870546133b14102a3540cc602","modified":1496718736816},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1496718737557},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1496718739425},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1496718737556},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1496718739415},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1496718738062},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1496718737573},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1496718737568},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1496718737591},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1496718737603},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1496718737613},{"_id":"themes/next/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1496718737585},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1496718737608},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1496718737640},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1496718737646},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1496718737651},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1496718737597},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1496718737656},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1496718737744},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1496718737740},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1496718737768},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1496718737626},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1496718737957},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1496718737992},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1496718737960},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1496718738095},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1496718738101},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1496718738114},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1496718738119},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1496718738135},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1496718738140},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1496718738564},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1496718738560},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1496718737987},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1496718737972},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1496718738568},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1496718738576},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1496718738580},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1496718738572},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496718738589},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496718738565},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1496718738584},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1496718738588},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1496718738588},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496718738590},{"_id":"source/_posts/koa源码分析/koa2.png","hash":"8a5749d4d4d23a05bbb1da4209ab79cfcc8f768e","modified":1496718736833},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718737749},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718737749},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718738439},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718738439},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718738447},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496718738592},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718738544},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718738555},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1496718738590},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1496718738591},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1496718737630},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1496718737660},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1496718737679},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1496718737684},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1496718737672},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1496718737723},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1496718737749},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1496718737755},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1496718737781},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1496718737735},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1496718737800},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1496718737635},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1496718737804},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1496718737812},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1496718737825},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1496718737718},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1496718737796},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1496718737821},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1496718737872},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1496718737861},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1496718737850},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1496718737880},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1496718737911},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1496718737926},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1496718737920},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1496718737940},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1496718737952},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1496718737903},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1496718737948},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1496718737936},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1496718738003},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1496718738039},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1496718738442},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1496718738030},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1496718738438},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1496718738447},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1496718738544},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1496718738550},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1496718738555},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1496718738595},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1496718738021},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1496718738596},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1496718738597},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1496718738593},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1496718738596},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1496718738611},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1496718738633},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1496718738626},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1496718738627},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496718738724},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1496718738649},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1496718738650},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1496718738993},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496718738928},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1496718738935},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1496718738993},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1496718739001},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1496718739052},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1496718739047},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1496718739055},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1496718739059},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1496718739005},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1496718739116},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1496718739156},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1496718739166},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1496718739161},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1496718739169},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1496718739178},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1496718739180},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1496718739199},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1496718739214},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1496718739345},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1496718739228},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1496718739055},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1496718739341},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1496718739381},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1496718739391},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1496718739153},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1496718737995},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1496718739403},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1496718737999},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1496718738147},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1496718738154},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1496718738150},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1496718738157},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1496718738144},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1496718738216},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1496718738412},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1496718738319},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1496718738416},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1496718738431},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1496718738426},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1496718738421},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1496718738451},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1496718738467},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1496718738470},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1496718738476},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1496718738434},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1496718738481},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1496718738486},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1496718738508},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1496718738492},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1496718738511},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1496718738505},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1496718738515},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1496718738511},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1496718738521},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1496718738518},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1496718738527},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1496718738537},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1496718738525},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1496718738632},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1496718738534},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496718738936},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496718738937},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496718738938},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1496718738700},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496718738938},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496718738939},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496718738940},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1496718738959},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1496718738723},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1496718738973},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1496718739038},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1496718738989},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1496718739067},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1496718739063},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1496718739070},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1496718739325},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1496718739336},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496718739042},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1496718738666},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1496718738695},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496718739108},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496718739112},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1496718739362},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1496718738164},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1496718738168},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1496718738174},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1496718738178},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1496718738181},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1496718738161},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1496718738189},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1496718738185},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1496718738193},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1496718738209},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1496718738196},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1496718738205},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1496718738212},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1496718738219},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1496718738200},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1496718738226},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1496718738229},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1496718738223},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1496718738241},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1496718738238},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1496718738250},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1496718738247},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1496718738244},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1496718738261},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1496718738253},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1496718738258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1496718738268},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1496718738234},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1496718738265},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1496718738288},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1496718738305},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1496718738310},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1496718738294},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1496718738313},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1496718738316},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1496718738272},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1496718738324},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1496718738344},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1496718738330},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1496718738350},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1496718738360},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1496718738369},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1496718738356},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1496718738372},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1496718738380},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1496718738383},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1496718738387},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1496718738377},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1496718738394},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1496718738391},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1496718738495},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1496718738499},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1496718738516},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496718738652},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496718738652},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496718738941},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496718738657},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496718738661},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1496718738942},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1496718738365},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1496718738955},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496718739077},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496718739083},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496718739103},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1496718738953},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1496718738954},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1496718738958},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1496718738927},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1496718739097},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1496718739312},{"_id":"public/content.json","hash":"390981697d60a7feb5bfee7a3300696589c0dc58","modified":1496747819599},{"_id":"public/atom.xml","hash":"9c88a884ddc9fc47d1d0aafae728c556cbf830bb","modified":1496747819602},{"_id":"public/search.xml","hash":"e7cfae953b13da53dbb62e7fb1ba7696b8476fb3","modified":1496747819603},{"_id":"public/categories/index.html","hash":"6adac460fea8b9eedf9b4cbd52cd7ceb0a2d658f","modified":1496747819609},{"_id":"public/tags/index.html","hash":"d75094f9388187008e3baaa0437fa2129c119aa7","modified":1496747819609},{"_id":"public/2017/06/06/人工智能应用收集/index.html","hash":"6c91440145de7fcffd98317ff93e23cb94ce2132","modified":1496747819609},{"_id":"public/categories/nodejs/index.html","hash":"a626ac1e50d7f4d46557d4559f894d0465dc3518","modified":1496747819609},{"_id":"public/archives/index.html","hash":"885efab5cf15532c2000b6beeb8de397617d8f5a","modified":1496747819609},{"_id":"public/archives/2017/index.html","hash":"075faa5af6e61595d4cfde51e2d2652abbefe762","modified":1496747819609},{"_id":"public/archives/2017/05/index.html","hash":"14dd4477c74bbb1620607045a3a281ffb1d193e5","modified":1496747819609},{"_id":"public/archives/2017/06/index.html","hash":"4f178200e22d019969daa52d6462c0c359730993","modified":1496747819609},{"_id":"public/tags/AI/index.html","hash":"a8b8045d63102eac6fbea41ef242645acaef0b5f","modified":1496747819609},{"_id":"public/tags/koa-router/index.html","hash":"f3010418d188200340990a9931f81967bd7aae79","modified":1496747819609},{"_id":"public/tags/koa/index.html","hash":"dbc6bcc0ae5a49d0bfe7b6370ef78130699e98d6","modified":1496747819609},{"_id":"public/2017/06/06/hello-world/index.html","hash":"b3e762301ce03f5f93653d288c0bd9ca9deaeacd","modified":1496747819609},{"_id":"public/2017/05/31/koa-router源码分析/index.html","hash":"19f75d7c4636e6f28adacc9df3cd7129a83e191d","modified":1496747819609},{"_id":"public/2017/05/25/koa源码分析/index.html","hash":"cb55d90e835e086d4ea8782c7c56c418dcbf8e36","modified":1496747819610},{"_id":"public/index.html","hash":"db6689ab270c3763955b210a90262175421dc5bc","modified":1496747819610},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1496747819638},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1496747819638},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1496747819638},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1496747819638},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1496747819638},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496747819638},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496747819638},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1496747819638},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1496747819638},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1496747819638},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496747819638},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496747819638},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1496747819638},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1496747819638},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1496747819638},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1496747819639},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496747819639},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496747819639},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496747819641},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496747819641},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496747819641},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496747819641},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1496747819641},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496747819641},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496747819642},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496747819642},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496747819642},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496747819642},{"_id":"public/2017/05/25/koa源码分析/koa-onion.png","hash":"a5c74cf845c9f0e870546133b14102a3540cc602","modified":1496747819642},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496747821458},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496747821468},{"_id":"public/2017/05/25/koa源码分析/koa2.png","hash":"8a5749d4d4d23a05bbb1da4209ab79cfcc8f768e","modified":1496747821472},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496747821488},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496747821488},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496747821488},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496747821488},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496747821488},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1496747821488},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1496747821488},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496747821488},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496747821488},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496747821488},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496747821488},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1496747821488},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496747821489},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1496747821489},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1496747821489},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1496747821489},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1496747821489},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1496747821489},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1496747821489},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1496747821489},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496747821489},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496747821489},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1496747821489},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496747821489},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496747821489},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496747821489},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496747821489},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496747821489},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496747821489},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496747821489},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496747821489},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496747821489},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496747821489},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496747821489},{"_id":"public/css/main.css","hash":"7703b333bc90d1ed3360abc7be96a862d32b0896","modified":1496747821489},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1496747821489},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1496747821489},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1496747821489},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496747821489},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496747821489},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496747821489},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1496747821489},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1496747821490},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496747821490},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496747821490},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496747821490},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496747821490},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496747821490},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1496747821490},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1496747821490},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496747821490},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496747821490},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496747821490},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496747821490},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496747821490},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496747821490},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1496747821517}],"Category":[{"name":"nodejs","_id":"cj3lh07os0007dsowp5s8ldpz"}],"Data":[],"Page":[{"title":"分类","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\ncomments: false\n---\n","date":"2017-06-06T03:12:16.865Z","updated":"2017-06-06T03:12:16.865Z","path":"categories/index.html","layout":"page","_id":"cj3lh07nz0001dsow7hhyxklq","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\ncomments: false\n---\n","date":"2017-06-06T03:12:16.916Z","updated":"2017-06-06T03:12:16.916Z","path":"tags/index.html","layout":"page","_id":"cj3lh07o40003dsowvp1lgb6y","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### katex\n\n{% katex [displayMode] %}\n\na^{b^{\\sqrt{c}}}\n\n{% endkatex %}\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### katex\n\n{% katex [displayMode] %}\n\na^{b^{\\sqrt{c}}}\n\n{% endkatex %}\n","slug":"hello-world","published":1,"date":"2017-06-06T03:12:16.528Z","updated":"2017-06-06T03:12:16.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3lh07np0000dsowdifqe5jy","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\"><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<h3 id=\"katex\"><a href=\"#katex\" class=\"headerlink\" title=\"katex\"></a>katex</h3><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mrow><msup><mi>b</mi><mrow><msqrt><mrow><mi>c</mi></mrow></msqrt></mrow></msup></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\na^{b^{\\sqrt{c}}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.05974em;\"></span><span class=\"strut bottom\" style=\"height:1.05974em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">b</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.07142857142857144em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1.4285714285714286em;\">​</span></span><span class=\"reset-scriptstyle scriptscriptstyle uncramped\"><span class=\"mord scriptscriptstyle uncramped\"><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:-0.00527999999999984em;\"><span class=\"style-wrap reset-scriptscriptstyle scriptscriptstyle uncramped\">√</span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:2em;\">​</span></span><span class=\"mord scriptscriptstyle cramped\"><span class=\"mord mathit\">c</span></span></span><span style=\"top:-0.7252799999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:2em;\">​</span></span><span class=\"reset-scriptscriptstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:2em;\">​</span></span>​</span></span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1.4285714285714286em;\">​</span></span>​</span></span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">​</span></span>​</span></span></span></span></span></span>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<h3 id=\"katex\"><a href=\"#katex\" class=\"headerlink\" title=\"katex\"></a>katex</h3><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mrow><msup><mi>b</mi><mrow><msqrt><mrow><mi>c</mi></mrow></msqrt></mrow></msup></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\na^{b^{\\sqrt{c}}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.05974em;\"></span><span class=\"strut bottom\" style=\"height:1.05974em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">b</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.07142857142857144em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1.4285714285714286em;\">​</span></span><span class=\"reset-scriptstyle scriptscriptstyle uncramped\"><span class=\"mord scriptscriptstyle uncramped\"><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:-0.00527999999999984em;\"><span class=\"style-wrap reset-scriptscriptstyle scriptscriptstyle uncramped\">√</span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:2em;\">​</span></span><span class=\"mord scriptscriptstyle cramped\"><span class=\"mord mathit\">c</span></span></span><span style=\"top:-0.7252799999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:2em;\">​</span></span><span class=\"reset-scriptscriptstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:2em;\">​</span></span>​</span></span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1.4285714285714286em;\">​</span></span>​</span></span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">​</span></span>​</span></span></span></span></span></span>\n"},{"title":"人工智能应用收集","date":"2017-06-06T10:49:19.000Z","_content":"\n| 名称 | 介绍 | 链接|\n|:--------|:---------|:-------|\n| logojoy | 使用遗传算法生成logo | https://www.logojoy.com/ |\n| PaintsChainer | 漫画线稿自动上色 | https://github.com/pfnet/PaintsChainer |\n","source":"_posts/人工智能应用收集.md","raw":"---\ntitle: 人工智能应用收集\ndate: 2017-06-06 18:49:19\ntags: AI\n---\n\n| 名称 | 介绍 | 链接|\n|:--------|:---------|:-------|\n| logojoy | 使用遗传算法生成logo | https://www.logojoy.com/ |\n| PaintsChainer | 漫画线稿自动上色 | https://github.com/pfnet/PaintsChainer |\n","slug":"人工智能应用收集","published":1,"updated":"2017-06-06T11:16:41.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3lh07o10002dsowc6lqf6qh","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">介绍</th>\n<th style=\"text-align:left\">链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">logojoy</td>\n<td style=\"text-align:left\">使用遗传算法生成logo</td>\n<td style=\"text-align:left\"><a href=\"https://www.logojoy.com/\" target=\"_blank\" rel=\"external\">https://www.logojoy.com/</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PaintsChainer</td>\n<td style=\"text-align:left\">漫画线稿自动上色</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/pfnet/PaintsChainer\" target=\"_blank\" rel=\"external\">https://github.com/pfnet/PaintsChainer</a></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">介绍</th>\n<th style=\"text-align:left\">链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">logojoy</td>\n<td style=\"text-align:left\">使用遗传算法生成logo</td>\n<td style=\"text-align:left\"><a href=\"https://www.logojoy.com/\" target=\"_blank\" rel=\"external\">https://www.logojoy.com/</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PaintsChainer</td>\n<td style=\"text-align:left\">漫画线稿自动上色</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/pfnet/PaintsChainer\" target=\"_blank\" rel=\"external\">https://github.com/pfnet/PaintsChainer</a></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"koa-router源码分析","date":"2017-05-31T05:55:38.000Z","_content":"本文koa-router版本是7.2.0\n\n## 路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\n### 下面是一个简单的原生路由例子：\n```\nconst Koa = require('koa')\nconst app = new Koa()\n\nasync function route( url ) {\n  let view = `<html><header></header><body>404</body></html>`\n  switch ( url ) {\n    case '/':\n      view = `<html><header></header><body>index</body></html>`\n      break\n    case '/index':\n      view = `<html><header></header><body>index</body></html>`\n      break\n    case '/todo':\n      view = `<html><header></header><body>to do</body></html>`\n      break\n    case '/404':\n      view = `<html><header></header><body>404</body></html>`\n      break\n    default:\n      break\n  }\n  let html = view\n  return html\n}\n\napp.use( async ( ctx ) => {\n  let url = ctx.request.url\n  let html = await route( url )\n  ctx.body = html\n})\n\napp.listen(3000)\n```\n### 一个简单的koa-router例子\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\nvar router = new Router()\n\nrouter.get('/', function (ctx, next) {\n  console.log(ctx.router)\n  console.log(ctx.params)\n  let html = `\n    <p>/</p>\n  `\n  ctx.body = html\n})\n\nrouter.get('/name/:id', function (ctx, next) {\n  let html = `\n    <p>name:${ctx.params.id}</p>\n  `\n  ctx.body = html\n})\n\nrouter.get('/company', function (ctx, next) {\n  let html = `\n    <p>company</p>\n  `\n  ctx.body = html\n})\napp.use(router.routes()).use(router.allowedMethods())\nconsole.log(router)\napp.listen(3000)\n```\n### 多个子router的使用\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\n// 子路由1\nlet home = new Router()\nhome.get('/', async ( ctx )=>{\n  let html = `\n    <ul>\n      <li><a href=\"/page/helloworld\">/page/helloworld</a></li>\n      <li><a href=\"/page/404\">/page/404</a></li>\n    </ul>\n  `\n  ctx.body = html\n})\n\n// 子路由2\nlet page = new Router()\npage.get('/404', async ( ctx )=>{\n  ctx.body = '404 page!'\n}).get('/helloworld', async ( ctx )=>{\n  ctx.body = 'helloworld page!'\n})\n\n// 装载子路由\nlet router = new Router()\nrouter.use('/', home.routes(), home.allowedMethods())\nrouter.use('/page', page.routes(), page.allowedMethods())\n\n// 加载路由中间件\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3000)\n```\n### 路由嵌套\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\nlet home = new Router()\nlet page = new Router()\npage.get('/:pageid', async ( ctx )=>{\n  let html = `\n    <p>page:${ctx.params.pageid}</p>\n  `\n  ctx.body = html\n})\n// /home/232/page\nhome.use('/home/:fid/page', page.routes(), page.allowedMethods());\n\n// 加载路由中间件\napp.use(home.routes())\n\napp.listen(3000)\n```\n### 路由前缀\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\nlet router = new Router({\n  prefix: '/users'\n})\n// /users\nrouter.get('/:pageid', async ( ctx )=>{\n  let html = `\n    <p>user home</p>\n  `\n  ctx.body = html\n})\n// /users/:userid\nrouter.get('/:userid', async ( ctx )=>{\n  let html = `\n    <p>user-id:${ctx.params.userid}</p>\n  `\n  ctx.body = html\n})\n\napp.use(router.routes()).use(router.allowedMethods())\napp.listen(3000)\n```\n## Router的结构，Router构造函数\n```\nmodule.exports = Router;\n\nfunction Router(opts) {\n  if (!(this instanceof Router)) {\n    return new Router(opts);\n  }\n\n  this.opts = opts || {};\n  this.methods = this.opts.methods || [\n    'HEAD',\n    'OPTIONS',\n    'GET',\n    'PUT',\n    'PATCH',\n    'POST',\n    'DELETE'\n  ];\n\n  this.params = {};\n  //stack存储不同的Layer，Router和Layer的关系是Router包含Layer\n  this.stack = [];\n};\n```\n### Layer构造函数\n```\nfunction Layer(path, methods, middleware, opts) {\n  this.opts = opts || {};\n  this.name = this.opts.name || null;\n  this.methods = [];\n  this.paramNames = [];\n  this.stack = Array.isArray(middleware) ? middleware : [middleware];\n\n  methods.forEach(function(method) {\n    var l = this.methods.push(method.toUpperCase());\n    if (this.methods[l-1] === 'GET') {\n      this.methods.unshift('HEAD');\n    }\n  }, this);\n\n  // ensure middleware is a function\n  this.stack.forEach(function(fn) {\n    var type = (typeof fn);\n    if (type !== 'function') {\n      throw new Error(\n        methods.toString() + \" `\" + (this.opts.name || path) +\"`: `middleware` \"\n        + \"must be a function, not `\" + type + \"`\"\n      );\n    }\n  }, this);\n\n  this.path = path;\n  this.regexp = pathToRegExp(path, this.paramNames, this.opts);\n\n  debug('defined route %s %s', this.methods, this.opts.prefix + this.path);\n};\n```\n### Router对象\n```\nRouter {\n  opts: {},\n  methods: [ 'HEAD', 'OPTIONS', 'GET', 'PUT', 'PATCH', 'POST', 'DELETE' ],\n  params: {},\n  stack:\n   [ Layer {\n       opts: [Object],\n       name: null,\n       methods: [Object],\n       paramNames: [],\n       stack: [Object],\n       path: '/',\n       regexp: /^(?:\\/(?=$))?$/i },\n     Layer {\n       opts: [Object],\n       name: null,\n       methods: [Object],\n       paramNames: [Object],\n       stack: [Object],\n       path: '/name/:id',\n       regexp: /^\\/name\\/((?:[^\\/]+?))(?:\\/(?=$))?$/i },\n     Layer {\n       opts: [Object],\n       name: null,\n       methods: [Object],\n       paramNames: [],\n       stack: [Object],\n       path: '/company',\n       regexp: /^\\/company(?:\\/(?=$))?$/i } ] }\n\n```\n### path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\n```\nRouter.prototype.match = function (path, method) {\n  var layers = this.stack;\n  var layer;\n  var matched = {\n    //存储path匹配的layer\n    path: [],\n    //存储methods匹配的layer\n    pathAndMethod: [],\n    // 是否匹配成功\n    route: false\n  };\n\n  for (var len = layers.length, i = 0; i < len; i++) {\n    layer = layers[i];\n\n    debug('test %s %s', layer.path, layer.regexp);\n\n    if (layer.match(path)) {\n      matched.path.push(layer);\n\n      if (layer.methods.length === 0 || ~layer.methods.indexOf(method)) {\n        matched.pathAndMethod.push(layer);\n        if (layer.methods.length) matched.route = true;\n      }\n    }\n  }\n\n  return matched;\n};\n```\nLayer层通过正则匹配路径\n```\nLayer.prototype.match = function (path) {\n  return this.regexp.test(path);\n};\n```\n#### Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());\nrouter.routes()返回一个中间件，用于对请求发起路由匹配，把一些router参数加入ctx对象,执行router.routes()，返回的是一个dispatch(ctx, next)方法\n```\nRouter.prototype.routes = Router.prototype.middleware = function () {\n  var router = this;\n\n  var dispatch = function dispatch(ctx, next) {\n    debug('%s %s', ctx.method, ctx.path);\n    // 获取path\n    var path = router.opts.routerPath || ctx.routerPath || ctx.path;\n    // 发起path match，获取matched对象\n    var matched = router.match(path, ctx.method);\n    var layerChain, layer, i;\n\n    if (ctx.matched) {\n      ctx.matched.push.apply(ctx.matched, matched.path);\n    } else {\n      ctx.matched = matched.path;\n    }\n    // 可以从ctx 取router\n    ctx.router = router;\n    // 判断是否匹配成功\n    if (!matched.route) return next();\n\n    var matchedLayers = matched.pathAndMethod\n    var mostSpecificLayer = matchedLayers[matchedLayers.length - 1]\n    ctx._matchedRoute = mostSpecificLayer.path;\n    if (mostSpecificLayer.name) {\n      ctx._matchedRouteName = mostSpecificLayer.name;\n    }\n\n    layerChain = matchedLayers.reduce(function(memo, layer) {\n      memo.push(function(ctx, next) {\n        ctx.captures = layer.captures(path, ctx.captures);\n        ctx.params = layer.params(path, ctx.captures, ctx.params);\n        return next();\n      });\n      return memo.concat(layer.stack);\n    }, []);\n\n    return compose(layerChain)(ctx, next);\n  };\n\n  dispatch.router = this;\n\n  return dispatch;\n};\n```\n#### router.allowedMethods()，执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许\n```\nRouter.prototype.allowedMethods = function (options) {\n  options = options || {};\n  var implemented = this.methods;\n\n  return function allowedMethods(ctx, next) {\n    return next().then(function() {\n      var allowed = {};\n\n      if (!ctx.status || ctx.status === 404) {\n        ctx.matched.forEach(function (route) {\n          route.methods.forEach(function (method) {\n            allowed[method] = method;\n          });\n        });\n\n        var allowedArr = Object.keys(allowed);\n        // 判断请求method是否在允许范围内\n        if (!~implemented.indexOf(ctx.method)) {\n          if (options.throw) {\n            var notImplementedThrowable;\n            if (typeof options.notImplemented === 'function') {\n              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function\n            } else {\n              notImplementedThrowable = new HttpError.NotImplemented();\n            }\n            throw notImplementedThrowable;\n          } else {\n            ctx.status = 501;\n            ctx.set('Allow', allowedArr);\n          }\n        } else if (allowedArr.length) {\n          if (ctx.method === 'OPTIONS') {\n            ctx.status = 204;\n            ctx.set('Allow', allowedArr);\n          } else if (!allowed[ctx.method]) {\n            if (options.throw) {\n              var notAllowedThrowable;\n              if (typeof options.methodNotAllowed === 'function') {\n                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function\n              } else {\n                notAllowedThrowable = new HttpError.MethodNotAllowed();\n              }\n              throw notAllowedThrowable;\n            } else {\n              ctx.status = 405;\n              ctx.set('Allow', allowedArr);\n            }\n          }\n        }\n      }\n    });\n  };\n};\n```\napp.use(router.routes()).use(router.allowedMethods());\n```\nRouter.prototype.use = function () {\n  var router = this;\n  // 将传入参数转换为数组\n  var middleware = Array.prototype.slice.call(arguments);\n  var path = '(.*)';\n\n  // support array of paths\n  if (Array.isArray(middleware[0]) && typeof middleware[0][0] === 'string') {\n    middleware[0].forEach(function (p) {\n      router.use.apply(router, [p].concat(middleware.slice(1)));\n    });\n\n    return this;\n  }\n\n  var hasPath = typeof middleware[0] === 'string';\n  if (hasPath) {\n    path = middleware.shift();\n  }\n\n  middleware.forEach(function (m) {\n    if (m.router) {\n      // 对router.routes()参数的处理\n      m.router.stack.forEach(function (nestedLayer) {\n        if (path) nestedLayer.setPrefix(path);\n        // 绑定layer\n        if (router.opts.prefix) nestedLayer.setPrefix(router.opts.prefix);\n        router.stack.push(nestedLayer);\n      });\n\n      if (router.params) {\n        Object.keys(router.params).forEach(function (key) {\n          m.router.param(key, router.params[key]);\n        });\n      }\n    } else {\n      // 创建并注册一个route\n      router.register(path, [], m, { end: false, ignoreCaptures: !hasPath });\n    }\n  });\n\n  return this;\n};\n// 创建并注册一个route\nRouter.prototype.register = function (path, methods, middleware, opts) {\n  opts = opts || {};\n\n  var router = this;\n  var stack = this.stack;\n\n  // support array of paths\n  if (Array.isArray(path)) {\n    path.forEach(function (p) {\n      router.register.call(router, p, methods, middleware, opts);\n    });\n\n    return this;\n  }\n\n  // create route Layer\n  var route = new Layer(path, methods, middleware, {\n    end: opts.end === false ? opts.end : true,\n    name: opts.name,\n    sensitive: opts.sensitive || this.opts.sensitive || false,\n    strict: opts.strict || this.opts.strict || false,\n    prefix: opts.prefix || this.opts.prefix || \"\",\n    ignoreCaptures: opts.ignoreCaptures\n  });\n\n  if (this.opts.prefix) {\n    route.setPrefix(this.opts.prefix);\n  }\n\n  // add parameter middleware\n  Object.keys(this.params).forEach(function (param) {\n    route.param(param, this.params[param]);\n  }, this);\n\n  stack.push(route);\n\n  return route;\n};\n```\n","source":"_posts/koa-router源码分析.md","raw":"---\ntitle: 'koa-router源码分析'\ndate: 2017-05-31 13:55:38\ntags: koa-router\ncategories: nodejs\n---\n本文koa-router版本是7.2.0\n\n## 路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\n### 下面是一个简单的原生路由例子：\n```\nconst Koa = require('koa')\nconst app = new Koa()\n\nasync function route( url ) {\n  let view = `<html><header></header><body>404</body></html>`\n  switch ( url ) {\n    case '/':\n      view = `<html><header></header><body>index</body></html>`\n      break\n    case '/index':\n      view = `<html><header></header><body>index</body></html>`\n      break\n    case '/todo':\n      view = `<html><header></header><body>to do</body></html>`\n      break\n    case '/404':\n      view = `<html><header></header><body>404</body></html>`\n      break\n    default:\n      break\n  }\n  let html = view\n  return html\n}\n\napp.use( async ( ctx ) => {\n  let url = ctx.request.url\n  let html = await route( url )\n  ctx.body = html\n})\n\napp.listen(3000)\n```\n### 一个简单的koa-router例子\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\nvar router = new Router()\n\nrouter.get('/', function (ctx, next) {\n  console.log(ctx.router)\n  console.log(ctx.params)\n  let html = `\n    <p>/</p>\n  `\n  ctx.body = html\n})\n\nrouter.get('/name/:id', function (ctx, next) {\n  let html = `\n    <p>name:${ctx.params.id}</p>\n  `\n  ctx.body = html\n})\n\nrouter.get('/company', function (ctx, next) {\n  let html = `\n    <p>company</p>\n  `\n  ctx.body = html\n})\napp.use(router.routes()).use(router.allowedMethods())\nconsole.log(router)\napp.listen(3000)\n```\n### 多个子router的使用\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\n// 子路由1\nlet home = new Router()\nhome.get('/', async ( ctx )=>{\n  let html = `\n    <ul>\n      <li><a href=\"/page/helloworld\">/page/helloworld</a></li>\n      <li><a href=\"/page/404\">/page/404</a></li>\n    </ul>\n  `\n  ctx.body = html\n})\n\n// 子路由2\nlet page = new Router()\npage.get('/404', async ( ctx )=>{\n  ctx.body = '404 page!'\n}).get('/helloworld', async ( ctx )=>{\n  ctx.body = 'helloworld page!'\n})\n\n// 装载子路由\nlet router = new Router()\nrouter.use('/', home.routes(), home.allowedMethods())\nrouter.use('/page', page.routes(), page.allowedMethods())\n\n// 加载路由中间件\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3000)\n```\n### 路由嵌套\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\nlet home = new Router()\nlet page = new Router()\npage.get('/:pageid', async ( ctx )=>{\n  let html = `\n    <p>page:${ctx.params.pageid}</p>\n  `\n  ctx.body = html\n})\n// /home/232/page\nhome.use('/home/:fid/page', page.routes(), page.allowedMethods());\n\n// 加载路由中间件\napp.use(home.routes())\n\napp.listen(3000)\n```\n### 路由前缀\n```\nconst Koa = require('koa')\nconst app = new Koa()\nconst Router = require('koa-router')\n\nlet router = new Router({\n  prefix: '/users'\n})\n// /users\nrouter.get('/:pageid', async ( ctx )=>{\n  let html = `\n    <p>user home</p>\n  `\n  ctx.body = html\n})\n// /users/:userid\nrouter.get('/:userid', async ( ctx )=>{\n  let html = `\n    <p>user-id:${ctx.params.userid}</p>\n  `\n  ctx.body = html\n})\n\napp.use(router.routes()).use(router.allowedMethods())\napp.listen(3000)\n```\n## Router的结构，Router构造函数\n```\nmodule.exports = Router;\n\nfunction Router(opts) {\n  if (!(this instanceof Router)) {\n    return new Router(opts);\n  }\n\n  this.opts = opts || {};\n  this.methods = this.opts.methods || [\n    'HEAD',\n    'OPTIONS',\n    'GET',\n    'PUT',\n    'PATCH',\n    'POST',\n    'DELETE'\n  ];\n\n  this.params = {};\n  //stack存储不同的Layer，Router和Layer的关系是Router包含Layer\n  this.stack = [];\n};\n```\n### Layer构造函数\n```\nfunction Layer(path, methods, middleware, opts) {\n  this.opts = opts || {};\n  this.name = this.opts.name || null;\n  this.methods = [];\n  this.paramNames = [];\n  this.stack = Array.isArray(middleware) ? middleware : [middleware];\n\n  methods.forEach(function(method) {\n    var l = this.methods.push(method.toUpperCase());\n    if (this.methods[l-1] === 'GET') {\n      this.methods.unshift('HEAD');\n    }\n  }, this);\n\n  // ensure middleware is a function\n  this.stack.forEach(function(fn) {\n    var type = (typeof fn);\n    if (type !== 'function') {\n      throw new Error(\n        methods.toString() + \" `\" + (this.opts.name || path) +\"`: `middleware` \"\n        + \"must be a function, not `\" + type + \"`\"\n      );\n    }\n  }, this);\n\n  this.path = path;\n  this.regexp = pathToRegExp(path, this.paramNames, this.opts);\n\n  debug('defined route %s %s', this.methods, this.opts.prefix + this.path);\n};\n```\n### Router对象\n```\nRouter {\n  opts: {},\n  methods: [ 'HEAD', 'OPTIONS', 'GET', 'PUT', 'PATCH', 'POST', 'DELETE' ],\n  params: {},\n  stack:\n   [ Layer {\n       opts: [Object],\n       name: null,\n       methods: [Object],\n       paramNames: [],\n       stack: [Object],\n       path: '/',\n       regexp: /^(?:\\/(?=$))?$/i },\n     Layer {\n       opts: [Object],\n       name: null,\n       methods: [Object],\n       paramNames: [Object],\n       stack: [Object],\n       path: '/name/:id',\n       regexp: /^\\/name\\/((?:[^\\/]+?))(?:\\/(?=$))?$/i },\n     Layer {\n       opts: [Object],\n       name: null,\n       methods: [Object],\n       paramNames: [],\n       stack: [Object],\n       path: '/company',\n       regexp: /^\\/company(?:\\/(?=$))?$/i } ] }\n\n```\n### path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\n```\nRouter.prototype.match = function (path, method) {\n  var layers = this.stack;\n  var layer;\n  var matched = {\n    //存储path匹配的layer\n    path: [],\n    //存储methods匹配的layer\n    pathAndMethod: [],\n    // 是否匹配成功\n    route: false\n  };\n\n  for (var len = layers.length, i = 0; i < len; i++) {\n    layer = layers[i];\n\n    debug('test %s %s', layer.path, layer.regexp);\n\n    if (layer.match(path)) {\n      matched.path.push(layer);\n\n      if (layer.methods.length === 0 || ~layer.methods.indexOf(method)) {\n        matched.pathAndMethod.push(layer);\n        if (layer.methods.length) matched.route = true;\n      }\n    }\n  }\n\n  return matched;\n};\n```\nLayer层通过正则匹配路径\n```\nLayer.prototype.match = function (path) {\n  return this.regexp.test(path);\n};\n```\n#### Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());\nrouter.routes()返回一个中间件，用于对请求发起路由匹配，把一些router参数加入ctx对象,执行router.routes()，返回的是一个dispatch(ctx, next)方法\n```\nRouter.prototype.routes = Router.prototype.middleware = function () {\n  var router = this;\n\n  var dispatch = function dispatch(ctx, next) {\n    debug('%s %s', ctx.method, ctx.path);\n    // 获取path\n    var path = router.opts.routerPath || ctx.routerPath || ctx.path;\n    // 发起path match，获取matched对象\n    var matched = router.match(path, ctx.method);\n    var layerChain, layer, i;\n\n    if (ctx.matched) {\n      ctx.matched.push.apply(ctx.matched, matched.path);\n    } else {\n      ctx.matched = matched.path;\n    }\n    // 可以从ctx 取router\n    ctx.router = router;\n    // 判断是否匹配成功\n    if (!matched.route) return next();\n\n    var matchedLayers = matched.pathAndMethod\n    var mostSpecificLayer = matchedLayers[matchedLayers.length - 1]\n    ctx._matchedRoute = mostSpecificLayer.path;\n    if (mostSpecificLayer.name) {\n      ctx._matchedRouteName = mostSpecificLayer.name;\n    }\n\n    layerChain = matchedLayers.reduce(function(memo, layer) {\n      memo.push(function(ctx, next) {\n        ctx.captures = layer.captures(path, ctx.captures);\n        ctx.params = layer.params(path, ctx.captures, ctx.params);\n        return next();\n      });\n      return memo.concat(layer.stack);\n    }, []);\n\n    return compose(layerChain)(ctx, next);\n  };\n\n  dispatch.router = this;\n\n  return dispatch;\n};\n```\n#### router.allowedMethods()，执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许\n```\nRouter.prototype.allowedMethods = function (options) {\n  options = options || {};\n  var implemented = this.methods;\n\n  return function allowedMethods(ctx, next) {\n    return next().then(function() {\n      var allowed = {};\n\n      if (!ctx.status || ctx.status === 404) {\n        ctx.matched.forEach(function (route) {\n          route.methods.forEach(function (method) {\n            allowed[method] = method;\n          });\n        });\n\n        var allowedArr = Object.keys(allowed);\n        // 判断请求method是否在允许范围内\n        if (!~implemented.indexOf(ctx.method)) {\n          if (options.throw) {\n            var notImplementedThrowable;\n            if (typeof options.notImplemented === 'function') {\n              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function\n            } else {\n              notImplementedThrowable = new HttpError.NotImplemented();\n            }\n            throw notImplementedThrowable;\n          } else {\n            ctx.status = 501;\n            ctx.set('Allow', allowedArr);\n          }\n        } else if (allowedArr.length) {\n          if (ctx.method === 'OPTIONS') {\n            ctx.status = 204;\n            ctx.set('Allow', allowedArr);\n          } else if (!allowed[ctx.method]) {\n            if (options.throw) {\n              var notAllowedThrowable;\n              if (typeof options.methodNotAllowed === 'function') {\n                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function\n              } else {\n                notAllowedThrowable = new HttpError.MethodNotAllowed();\n              }\n              throw notAllowedThrowable;\n            } else {\n              ctx.status = 405;\n              ctx.set('Allow', allowedArr);\n            }\n          }\n        }\n      }\n    });\n  };\n};\n```\napp.use(router.routes()).use(router.allowedMethods());\n```\nRouter.prototype.use = function () {\n  var router = this;\n  // 将传入参数转换为数组\n  var middleware = Array.prototype.slice.call(arguments);\n  var path = '(.*)';\n\n  // support array of paths\n  if (Array.isArray(middleware[0]) && typeof middleware[0][0] === 'string') {\n    middleware[0].forEach(function (p) {\n      router.use.apply(router, [p].concat(middleware.slice(1)));\n    });\n\n    return this;\n  }\n\n  var hasPath = typeof middleware[0] === 'string';\n  if (hasPath) {\n    path = middleware.shift();\n  }\n\n  middleware.forEach(function (m) {\n    if (m.router) {\n      // 对router.routes()参数的处理\n      m.router.stack.forEach(function (nestedLayer) {\n        if (path) nestedLayer.setPrefix(path);\n        // 绑定layer\n        if (router.opts.prefix) nestedLayer.setPrefix(router.opts.prefix);\n        router.stack.push(nestedLayer);\n      });\n\n      if (router.params) {\n        Object.keys(router.params).forEach(function (key) {\n          m.router.param(key, router.params[key]);\n        });\n      }\n    } else {\n      // 创建并注册一个route\n      router.register(path, [], m, { end: false, ignoreCaptures: !hasPath });\n    }\n  });\n\n  return this;\n};\n// 创建并注册一个route\nRouter.prototype.register = function (path, methods, middleware, opts) {\n  opts = opts || {};\n\n  var router = this;\n  var stack = this.stack;\n\n  // support array of paths\n  if (Array.isArray(path)) {\n    path.forEach(function (p) {\n      router.register.call(router, p, methods, middleware, opts);\n    });\n\n    return this;\n  }\n\n  // create route Layer\n  var route = new Layer(path, methods, middleware, {\n    end: opts.end === false ? opts.end : true,\n    name: opts.name,\n    sensitive: opts.sensitive || this.opts.sensitive || false,\n    strict: opts.strict || this.opts.strict || false,\n    prefix: opts.prefix || this.opts.prefix || \"\",\n    ignoreCaptures: opts.ignoreCaptures\n  });\n\n  if (this.opts.prefix) {\n    route.setPrefix(this.opts.prefix);\n  }\n\n  // add parameter middleware\n  Object.keys(this.params).forEach(function (param) {\n    route.param(param, this.params[param]);\n  }, this);\n\n  stack.push(route);\n\n  return route;\n};\n```\n","slug":"koa-router源码分析","published":1,"updated":"2017-06-06T07:09:30.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3lh07o70004dsow10n4cn4f","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\"><p>本文koa-router版本是7.2.0</p>\n<h2 id=\"路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\"><a href=\"#路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\" class=\"headerlink\" title=\"路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\"></a>路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。</h2><h3 id=\"下面是一个简单的原生路由例子：\"><a href=\"#下面是一个简单的原生路由例子：\" class=\"headerlink\" title=\"下面是一个简单的原生路由例子：\"></a>下面是一个简单的原生路由例子：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\"></div><div class=\"line\">async function route( url ) &#123;</div><div class=\"line\">  let view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">  switch ( url ) &#123;</div><div class=\"line\">    case &apos;/&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    case &apos;/index&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    case &apos;/todo&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;to do&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    case &apos;/404&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    default:</div><div class=\"line\">      break</div><div class=\"line\">  &#125;</div><div class=\"line\">  let html = view</div><div class=\"line\">  return html</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.use( async ( ctx ) =&gt; &#123;</div><div class=\"line\">  let url = ctx.request.url</div><div class=\"line\">  let html = await route( url )</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"一个简单的koa-router例子\"><a href=\"#一个简单的koa-router例子\" class=\"headerlink\" title=\"一个简单的koa-router例子\"></a>一个简单的koa-router例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">var router = new Router()</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/&apos;, function (ctx, next) &#123;</div><div class=\"line\">  console.log(ctx.router)</div><div class=\"line\">  console.log(ctx.params)</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;/&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/name/:id&apos;, function (ctx, next) &#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;name:$&#123;ctx.params.id&#125;&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/company&apos;, function (ctx, next) &#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;company&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\">app.use(router.routes()).use(router.allowedMethods())</div><div class=\"line\">console.log(router)</div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"多个子router的使用\"><a href=\"#多个子router的使用\" class=\"headerlink\" title=\"多个子router的使用\"></a>多个子router的使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">// 子路由1</div><div class=\"line\">let home = new Router()</div><div class=\"line\">home.get(&apos;/&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=&quot;/page/helloworld&quot;&gt;/page/helloworld&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=&quot;/page/404&quot;&gt;/page/404&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 子路由2</div><div class=\"line\">let page = new Router()</div><div class=\"line\">page.get(&apos;/404&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  ctx.body = &apos;404 page!&apos;</div><div class=\"line\">&#125;).get(&apos;/helloworld&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  ctx.body = &apos;helloworld page!&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 装载子路由</div><div class=\"line\">let router = new Router()</div><div class=\"line\">router.use(&apos;/&apos;, home.routes(), home.allowedMethods())</div><div class=\"line\">router.use(&apos;/page&apos;, page.routes(), page.allowedMethods())</div><div class=\"line\"></div><div class=\"line\">// 加载路由中间件</div><div class=\"line\">app.use(router.routes()).use(router.allowedMethods())</div><div class=\"line\"></div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">let home = new Router()</div><div class=\"line\">let page = new Router()</div><div class=\"line\">page.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;page:$&#123;ctx.params.pageid&#125;&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\">// /home/232/page</div><div class=\"line\">home.use(&apos;/home/:fid/page&apos;, page.routes(), page.allowedMethods());</div><div class=\"line\"></div><div class=\"line\">// 加载路由中间件</div><div class=\"line\">app.use(home.routes())</div><div class=\"line\"></div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"路由前缀\"><a href=\"#路由前缀\" class=\"headerlink\" title=\"路由前缀\"></a>路由前缀</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">let router = new Router(&#123;</div><div class=\"line\">  prefix: &apos;/users&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">// /users</div><div class=\"line\">router.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;user home&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\">// /users/:userid</div><div class=\"line\">router.get(&apos;/:userid&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;user-id:$&#123;ctx.params.userid&#125;&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.use(router.routes()).use(router.allowedMethods())</div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h2 id=\"Router的结构，Router构造函数\"><a href=\"#Router的结构，Router构造函数\" class=\"headerlink\" title=\"Router的结构，Router构造函数\"></a>Router的结构，Router构造函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = Router;</div><div class=\"line\"></div><div class=\"line\">function Router(opts) &#123;</div><div class=\"line\">  if (!(this instanceof Router)) &#123;</div><div class=\"line\">    return new Router(opts);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  this.opts = opts || &#123;&#125;;</div><div class=\"line\">  this.methods = this.opts.methods || [</div><div class=\"line\">    &apos;HEAD&apos;,</div><div class=\"line\">    &apos;OPTIONS&apos;,</div><div class=\"line\">    &apos;GET&apos;,</div><div class=\"line\">    &apos;PUT&apos;,</div><div class=\"line\">    &apos;PATCH&apos;,</div><div class=\"line\">    &apos;POST&apos;,</div><div class=\"line\">    &apos;DELETE&apos;</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  this.params = &#123;&#125;;</div><div class=\"line\">  //stack存储不同的Layer，Router和Layer的关系是Router包含Layer</div><div class=\"line\">  this.stack = [];</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"Layer构造函数\"><a href=\"#Layer构造函数\" class=\"headerlink\" title=\"Layer构造函数\"></a>Layer构造函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Layer(path, methods, middleware, opts) &#123;</div><div class=\"line\">  this.opts = opts || &#123;&#125;;</div><div class=\"line\">  this.name = this.opts.name || null;</div><div class=\"line\">  this.methods = [];</div><div class=\"line\">  this.paramNames = [];</div><div class=\"line\">  this.stack = Array.isArray(middleware) ? middleware : [middleware];</div><div class=\"line\"></div><div class=\"line\">  methods.forEach(function(method) &#123;</div><div class=\"line\">    var l = this.methods.push(method.toUpperCase());</div><div class=\"line\">    if (this.methods[l-1] === &apos;GET&apos;) &#123;</div><div class=\"line\">      this.methods.unshift(&apos;HEAD&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, this);</div><div class=\"line\"></div><div class=\"line\">  // ensure middleware is a function</div><div class=\"line\">  this.stack.forEach(function(fn) &#123;</div><div class=\"line\">    var type = (typeof fn);</div><div class=\"line\">    if (type !== &apos;function&apos;) &#123;</div><div class=\"line\">      throw new Error(</div><div class=\"line\">        methods.toString() + &quot; `&quot; + (this.opts.name || path) +&quot;`: `middleware` &quot;</div><div class=\"line\">        + &quot;must be a function, not `&quot; + type + &quot;`&quot;</div><div class=\"line\">      );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, this);</div><div class=\"line\"></div><div class=\"line\">  this.path = path;</div><div class=\"line\">  this.regexp = pathToRegExp(path, this.paramNames, this.opts);</div><div class=\"line\"></div><div class=\"line\">  debug(&apos;defined route %s %s&apos;, this.methods, this.opts.prefix + this.path);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"Router对象\"><a href=\"#Router对象\" class=\"headerlink\" title=\"Router对象\"></a>Router对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router &#123;</div><div class=\"line\">  opts: &#123;&#125;,</div><div class=\"line\">  methods: [ &apos;HEAD&apos;, &apos;OPTIONS&apos;, &apos;GET&apos;, &apos;PUT&apos;, &apos;PATCH&apos;, &apos;POST&apos;, &apos;DELETE&apos; ],</div><div class=\"line\">  params: &#123;&#125;,</div><div class=\"line\">  stack:</div><div class=\"line\">   [ Layer &#123;</div><div class=\"line\">       opts: [Object],</div><div class=\"line\">       name: null,</div><div class=\"line\">       methods: [Object],</div><div class=\"line\">       paramNames: [],</div><div class=\"line\">       stack: [Object],</div><div class=\"line\">       path: &apos;/&apos;,</div><div class=\"line\">       regexp: /^(?:\\/(?=$))?$/i &#125;,</div><div class=\"line\">     Layer &#123;</div><div class=\"line\">       opts: [Object],</div><div class=\"line\">       name: null,</div><div class=\"line\">       methods: [Object],</div><div class=\"line\">       paramNames: [Object],</div><div class=\"line\">       stack: [Object],</div><div class=\"line\">       path: &apos;/name/:id&apos;,</div><div class=\"line\">       regexp: /^\\/name\\/((?:[^\\/]+?))(?:\\/(?=$))?$/i &#125;,</div><div class=\"line\">     Layer &#123;</div><div class=\"line\">       opts: [Object],</div><div class=\"line\">       name: null,</div><div class=\"line\">       methods: [Object],</div><div class=\"line\">       paramNames: [],</div><div class=\"line\">       stack: [Object],</div><div class=\"line\">       path: &apos;/company&apos;,</div><div class=\"line\">       regexp: /^\\/company(?:\\/(?=$))?$/i &#125; ] &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\"><a href=\"#path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\" class=\"headerlink\" title=\"path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\"></a>path的匹配分两层，Router遍历所有layer，返回匹配的matched对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.match = function (path, method) &#123;</div><div class=\"line\">  var layers = this.stack;</div><div class=\"line\">  var layer;</div><div class=\"line\">  var matched = &#123;</div><div class=\"line\">    //存储path匹配的layer</div><div class=\"line\">    path: [],</div><div class=\"line\">    //存储methods匹配的layer</div><div class=\"line\">    pathAndMethod: [],</div><div class=\"line\">    // 是否匹配成功</div><div class=\"line\">    route: false</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  for (var len = layers.length, i = 0; i &lt; len; i++) &#123;</div><div class=\"line\">    layer = layers[i];</div><div class=\"line\"></div><div class=\"line\">    debug(&apos;test %s %s&apos;, layer.path, layer.regexp);</div><div class=\"line\"></div><div class=\"line\">    if (layer.match(path)) &#123;</div><div class=\"line\">      matched.path.push(layer);</div><div class=\"line\"></div><div class=\"line\">      if (layer.methods.length === 0 || ~layer.methods.indexOf(method)) &#123;</div><div class=\"line\">        matched.pathAndMethod.push(layer);</div><div class=\"line\">        if (layer.methods.length) matched.route = true;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return matched;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Layer层通过正则匹配路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Layer.prototype.match = function (path) &#123;</div><div class=\"line\">  return this.regexp.test(path);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Router通过use-将methods方法与Router联系起来app-use-router-routes-use-router-allowedMethods\"><a href=\"#Router通过use-将methods方法与Router联系起来app-use-router-routes-use-router-allowedMethods\" class=\"headerlink\" title=\"Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());\"></a>Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());</h4><p>router.routes()返回一个中间件，用于对请求发起路由匹配，把一些router参数加入ctx对象,执行router.routes()，返回的是一个dispatch(ctx, next)方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.routes = Router.prototype.middleware = function () &#123;</div><div class=\"line\">  var router = this;</div><div class=\"line\"></div><div class=\"line\">  var dispatch = function dispatch(ctx, next) &#123;</div><div class=\"line\">    debug(&apos;%s %s&apos;, ctx.method, ctx.path);</div><div class=\"line\">    // 获取path</div><div class=\"line\">    var path = router.opts.routerPath || ctx.routerPath || ctx.path;</div><div class=\"line\">    // 发起path match，获取matched对象</div><div class=\"line\">    var matched = router.match(path, ctx.method);</div><div class=\"line\">    var layerChain, layer, i;</div><div class=\"line\"></div><div class=\"line\">    if (ctx.matched) &#123;</div><div class=\"line\">      ctx.matched.push.apply(ctx.matched, matched.path);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      ctx.matched = matched.path;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 可以从ctx 取router</div><div class=\"line\">    ctx.router = router;</div><div class=\"line\">    // 判断是否匹配成功</div><div class=\"line\">    if (!matched.route) return next();</div><div class=\"line\"></div><div class=\"line\">    var matchedLayers = matched.pathAndMethod</div><div class=\"line\">    var mostSpecificLayer = matchedLayers[matchedLayers.length - 1]</div><div class=\"line\">    ctx._matchedRoute = mostSpecificLayer.path;</div><div class=\"line\">    if (mostSpecificLayer.name) &#123;</div><div class=\"line\">      ctx._matchedRouteName = mostSpecificLayer.name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    layerChain = matchedLayers.reduce(function(memo, layer) &#123;</div><div class=\"line\">      memo.push(function(ctx, next) &#123;</div><div class=\"line\">        ctx.captures = layer.captures(path, ctx.captures);</div><div class=\"line\">        ctx.params = layer.params(path, ctx.captures, ctx.params);</div><div class=\"line\">        return next();</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return memo.concat(layer.stack);</div><div class=\"line\">    &#125;, []);</div><div class=\"line\"></div><div class=\"line\">    return compose(layerChain)(ctx, next);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  dispatch.router = this;</div><div class=\"line\"></div><div class=\"line\">  return dispatch;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"router-allowedMethods-，执行router-allowedMethods-，返回allowedMethods-ctx-next-方法，判断请求的method是否被允许\"><a href=\"#router-allowedMethods-，执行router-allowedMethods-，返回allowedMethods-ctx-next-方法，判断请求的method是否被允许\" class=\"headerlink\" title=\"router.allowedMethods()，执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许\"></a>router.allowedMethods()，执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.allowedMethods = function (options) &#123;</div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\">  var implemented = this.methods;</div><div class=\"line\"></div><div class=\"line\">  return function allowedMethods(ctx, next) &#123;</div><div class=\"line\">    return next().then(function() &#123;</div><div class=\"line\">      var allowed = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">      if (!ctx.status || ctx.status === 404) &#123;</div><div class=\"line\">        ctx.matched.forEach(function (route) &#123;</div><div class=\"line\">          route.methods.forEach(function (method) &#123;</div><div class=\"line\">            allowed[method] = method;</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        var allowedArr = Object.keys(allowed);</div><div class=\"line\">        // 判断请求method是否在允许范围内</div><div class=\"line\">        if (!~implemented.indexOf(ctx.method)) &#123;</div><div class=\"line\">          if (options.throw) &#123;</div><div class=\"line\">            var notImplementedThrowable;</div><div class=\"line\">            if (typeof options.notImplemented === &apos;function&apos;) &#123;</div><div class=\"line\">              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">              notImplementedThrowable = new HttpError.NotImplemented();</div><div class=\"line\">            &#125;</div><div class=\"line\">            throw notImplementedThrowable;</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            ctx.status = 501;</div><div class=\"line\">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; else if (allowedArr.length) &#123;</div><div class=\"line\">          if (ctx.method === &apos;OPTIONS&apos;) &#123;</div><div class=\"line\">            ctx.status = 204;</div><div class=\"line\">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class=\"line\">          &#125; else if (!allowed[ctx.method]) &#123;</div><div class=\"line\">            if (options.throw) &#123;</div><div class=\"line\">              var notAllowedThrowable;</div><div class=\"line\">              if (typeof options.methodNotAllowed === &apos;function&apos;) &#123;</div><div class=\"line\">                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function</div><div class=\"line\">              &#125; else &#123;</div><div class=\"line\">                notAllowedThrowable = new HttpError.MethodNotAllowed();</div><div class=\"line\">              &#125;</div><div class=\"line\">              throw notAllowedThrowable;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">              ctx.status = 405;</div><div class=\"line\">              ctx.set(&apos;Allow&apos;, allowedArr);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>app.use(router.routes()).use(router.allowedMethods());<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.use = function () &#123;</div><div class=\"line\">  var router = this;</div><div class=\"line\">  // 将传入参数转换为数组</div><div class=\"line\">  var middleware = Array.prototype.slice.call(arguments);</div><div class=\"line\">  var path = &apos;(.*)&apos;;</div><div class=\"line\"></div><div class=\"line\">  // support array of paths</div><div class=\"line\">  if (Array.isArray(middleware[0]) &amp;&amp; typeof middleware[0][0] === &apos;string&apos;) &#123;</div><div class=\"line\">    middleware[0].forEach(function (p) &#123;</div><div class=\"line\">      router.use.apply(router, [p].concat(middleware.slice(1)));</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    return this;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var hasPath = typeof middleware[0] === &apos;string&apos;;</div><div class=\"line\">  if (hasPath) &#123;</div><div class=\"line\">    path = middleware.shift();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  middleware.forEach(function (m) &#123;</div><div class=\"line\">    if (m.router) &#123;</div><div class=\"line\">      // 对router.routes()参数的处理</div><div class=\"line\">      m.router.stack.forEach(function (nestedLayer) &#123;</div><div class=\"line\">        if (path) nestedLayer.setPrefix(path);</div><div class=\"line\">        // 绑定layer</div><div class=\"line\">        if (router.opts.prefix) nestedLayer.setPrefix(router.opts.prefix);</div><div class=\"line\">        router.stack.push(nestedLayer);</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      if (router.params) &#123;</div><div class=\"line\">        Object.keys(router.params).forEach(function (key) &#123;</div><div class=\"line\">          m.router.param(key, router.params[key]);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      // 创建并注册一个route</div><div class=\"line\">      router.register(path, [], m, &#123; end: false, ignoreCaptures: !hasPath &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  return this;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 创建并注册一个route</div><div class=\"line\">Router.prototype.register = function (path, methods, middleware, opts) &#123;</div><div class=\"line\">  opts = opts || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  var router = this;</div><div class=\"line\">  var stack = this.stack;</div><div class=\"line\"></div><div class=\"line\">  // support array of paths</div><div class=\"line\">  if (Array.isArray(path)) &#123;</div><div class=\"line\">    path.forEach(function (p) &#123;</div><div class=\"line\">      router.register.call(router, p, methods, middleware, opts);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    return this;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // create route Layer</div><div class=\"line\">  var route = new Layer(path, methods, middleware, &#123;</div><div class=\"line\">    end: opts.end === false ? opts.end : true,</div><div class=\"line\">    name: opts.name,</div><div class=\"line\">    sensitive: opts.sensitive || this.opts.sensitive || false,</div><div class=\"line\">    strict: opts.strict || this.opts.strict || false,</div><div class=\"line\">    prefix: opts.prefix || this.opts.prefix || &quot;&quot;,</div><div class=\"line\">    ignoreCaptures: opts.ignoreCaptures</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  if (this.opts.prefix) &#123;</div><div class=\"line\">    route.setPrefix(this.opts.prefix);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // add parameter middleware</div><div class=\"line\">  Object.keys(this.params).forEach(function (param) &#123;</div><div class=\"line\">    route.param(param, this.params[param]);</div><div class=\"line\">  &#125;, this);</div><div class=\"line\"></div><div class=\"line\">  stack.push(route);</div><div class=\"line\"></div><div class=\"line\">  return route;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文koa-router版本是7.2.0</p>\n<h2 id=\"路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\"><a href=\"#路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\" class=\"headerlink\" title=\"路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。\"></a>路由是什么？根据请求url路径，通过判断或正则匹配返回对应的页面。</h2><h3 id=\"下面是一个简单的原生路由例子：\"><a href=\"#下面是一个简单的原生路由例子：\" class=\"headerlink\" title=\"下面是一个简单的原生路由例子：\"></a>下面是一个简单的原生路由例子：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\"></div><div class=\"line\">async function route( url ) &#123;</div><div class=\"line\">  let view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">  switch ( url ) &#123;</div><div class=\"line\">    case &apos;/&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    case &apos;/index&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    case &apos;/todo&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;to do&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    case &apos;/404&apos;:</div><div class=\"line\">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class=\"line\">      break</div><div class=\"line\">    default:</div><div class=\"line\">      break</div><div class=\"line\">  &#125;</div><div class=\"line\">  let html = view</div><div class=\"line\">  return html</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.use( async ( ctx ) =&gt; &#123;</div><div class=\"line\">  let url = ctx.request.url</div><div class=\"line\">  let html = await route( url )</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"一个简单的koa-router例子\"><a href=\"#一个简单的koa-router例子\" class=\"headerlink\" title=\"一个简单的koa-router例子\"></a>一个简单的koa-router例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">var router = new Router()</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/&apos;, function (ctx, next) &#123;</div><div class=\"line\">  console.log(ctx.router)</div><div class=\"line\">  console.log(ctx.params)</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;/&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/name/:id&apos;, function (ctx, next) &#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;name:$&#123;ctx.params.id&#125;&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">router.get(&apos;/company&apos;, function (ctx, next) &#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;company&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\">app.use(router.routes()).use(router.allowedMethods())</div><div class=\"line\">console.log(router)</div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"多个子router的使用\"><a href=\"#多个子router的使用\" class=\"headerlink\" title=\"多个子router的使用\"></a>多个子router的使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">// 子路由1</div><div class=\"line\">let home = new Router()</div><div class=\"line\">home.get(&apos;/&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;ul&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=&quot;/page/helloworld&quot;&gt;/page/helloworld&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=&quot;/page/404&quot;&gt;/page/404&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;/ul&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 子路由2</div><div class=\"line\">let page = new Router()</div><div class=\"line\">page.get(&apos;/404&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  ctx.body = &apos;404 page!&apos;</div><div class=\"line\">&#125;).get(&apos;/helloworld&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  ctx.body = &apos;helloworld page!&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 装载子路由</div><div class=\"line\">let router = new Router()</div><div class=\"line\">router.use(&apos;/&apos;, home.routes(), home.allowedMethods())</div><div class=\"line\">router.use(&apos;/page&apos;, page.routes(), page.allowedMethods())</div><div class=\"line\"></div><div class=\"line\">// 加载路由中间件</div><div class=\"line\">app.use(router.routes()).use(router.allowedMethods())</div><div class=\"line\"></div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"路由嵌套\"><a href=\"#路由嵌套\" class=\"headerlink\" title=\"路由嵌套\"></a>路由嵌套</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">let home = new Router()</div><div class=\"line\">let page = new Router()</div><div class=\"line\">page.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;page:$&#123;ctx.params.pageid&#125;&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\">// /home/232/page</div><div class=\"line\">home.use(&apos;/home/:fid/page&apos;, page.routes(), page.allowedMethods());</div><div class=\"line\"></div><div class=\"line\">// 加载路由中间件</div><div class=\"line\">app.use(home.routes())</div><div class=\"line\"></div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h3 id=\"路由前缀\"><a href=\"#路由前缀\" class=\"headerlink\" title=\"路由前缀\"></a>路由前缀</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;)</div><div class=\"line\">const app = new Koa()</div><div class=\"line\">const Router = require(&apos;koa-router&apos;)</div><div class=\"line\"></div><div class=\"line\">let router = new Router(&#123;</div><div class=\"line\">  prefix: &apos;/users&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">// /users</div><div class=\"line\">router.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;user home&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\">// /users/:userid</div><div class=\"line\">router.get(&apos;/:userid&apos;, async ( ctx )=&gt;&#123;</div><div class=\"line\">  let html = `</div><div class=\"line\">    &lt;p&gt;user-id:$&#123;ctx.params.userid&#125;&lt;/p&gt;</div><div class=\"line\">  `</div><div class=\"line\">  ctx.body = html</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.use(router.routes()).use(router.allowedMethods())</div><div class=\"line\">app.listen(3000)</div></pre></td></tr></table></figure>\n<h2 id=\"Router的结构，Router构造函数\"><a href=\"#Router的结构，Router构造函数\" class=\"headerlink\" title=\"Router的结构，Router构造函数\"></a>Router的结构，Router构造函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = Router;</div><div class=\"line\"></div><div class=\"line\">function Router(opts) &#123;</div><div class=\"line\">  if (!(this instanceof Router)) &#123;</div><div class=\"line\">    return new Router(opts);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  this.opts = opts || &#123;&#125;;</div><div class=\"line\">  this.methods = this.opts.methods || [</div><div class=\"line\">    &apos;HEAD&apos;,</div><div class=\"line\">    &apos;OPTIONS&apos;,</div><div class=\"line\">    &apos;GET&apos;,</div><div class=\"line\">    &apos;PUT&apos;,</div><div class=\"line\">    &apos;PATCH&apos;,</div><div class=\"line\">    &apos;POST&apos;,</div><div class=\"line\">    &apos;DELETE&apos;</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  this.params = &#123;&#125;;</div><div class=\"line\">  //stack存储不同的Layer，Router和Layer的关系是Router包含Layer</div><div class=\"line\">  this.stack = [];</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"Layer构造函数\"><a href=\"#Layer构造函数\" class=\"headerlink\" title=\"Layer构造函数\"></a>Layer构造函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Layer(path, methods, middleware, opts) &#123;</div><div class=\"line\">  this.opts = opts || &#123;&#125;;</div><div class=\"line\">  this.name = this.opts.name || null;</div><div class=\"line\">  this.methods = [];</div><div class=\"line\">  this.paramNames = [];</div><div class=\"line\">  this.stack = Array.isArray(middleware) ? middleware : [middleware];</div><div class=\"line\"></div><div class=\"line\">  methods.forEach(function(method) &#123;</div><div class=\"line\">    var l = this.methods.push(method.toUpperCase());</div><div class=\"line\">    if (this.methods[l-1] === &apos;GET&apos;) &#123;</div><div class=\"line\">      this.methods.unshift(&apos;HEAD&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, this);</div><div class=\"line\"></div><div class=\"line\">  // ensure middleware is a function</div><div class=\"line\">  this.stack.forEach(function(fn) &#123;</div><div class=\"line\">    var type = (typeof fn);</div><div class=\"line\">    if (type !== &apos;function&apos;) &#123;</div><div class=\"line\">      throw new Error(</div><div class=\"line\">        methods.toString() + &quot; `&quot; + (this.opts.name || path) +&quot;`: `middleware` &quot;</div><div class=\"line\">        + &quot;must be a function, not `&quot; + type + &quot;`&quot;</div><div class=\"line\">      );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, this);</div><div class=\"line\"></div><div class=\"line\">  this.path = path;</div><div class=\"line\">  this.regexp = pathToRegExp(path, this.paramNames, this.opts);</div><div class=\"line\"></div><div class=\"line\">  debug(&apos;defined route %s %s&apos;, this.methods, this.opts.prefix + this.path);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"Router对象\"><a href=\"#Router对象\" class=\"headerlink\" title=\"Router对象\"></a>Router对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router &#123;</div><div class=\"line\">  opts: &#123;&#125;,</div><div class=\"line\">  methods: [ &apos;HEAD&apos;, &apos;OPTIONS&apos;, &apos;GET&apos;, &apos;PUT&apos;, &apos;PATCH&apos;, &apos;POST&apos;, &apos;DELETE&apos; ],</div><div class=\"line\">  params: &#123;&#125;,</div><div class=\"line\">  stack:</div><div class=\"line\">   [ Layer &#123;</div><div class=\"line\">       opts: [Object],</div><div class=\"line\">       name: null,</div><div class=\"line\">       methods: [Object],</div><div class=\"line\">       paramNames: [],</div><div class=\"line\">       stack: [Object],</div><div class=\"line\">       path: &apos;/&apos;,</div><div class=\"line\">       regexp: /^(?:\\/(?=$))?$/i &#125;,</div><div class=\"line\">     Layer &#123;</div><div class=\"line\">       opts: [Object],</div><div class=\"line\">       name: null,</div><div class=\"line\">       methods: [Object],</div><div class=\"line\">       paramNames: [Object],</div><div class=\"line\">       stack: [Object],</div><div class=\"line\">       path: &apos;/name/:id&apos;,</div><div class=\"line\">       regexp: /^\\/name\\/((?:[^\\/]+?))(?:\\/(?=$))?$/i &#125;,</div><div class=\"line\">     Layer &#123;</div><div class=\"line\">       opts: [Object],</div><div class=\"line\">       name: null,</div><div class=\"line\">       methods: [Object],</div><div class=\"line\">       paramNames: [],</div><div class=\"line\">       stack: [Object],</div><div class=\"line\">       path: &apos;/company&apos;,</div><div class=\"line\">       regexp: /^\\/company(?:\\/(?=$))?$/i &#125; ] &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\"><a href=\"#path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\" class=\"headerlink\" title=\"path的匹配分两层，Router遍历所有layer，返回匹配的matched对象\"></a>path的匹配分两层，Router遍历所有layer，返回匹配的matched对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.match = function (path, method) &#123;</div><div class=\"line\">  var layers = this.stack;</div><div class=\"line\">  var layer;</div><div class=\"line\">  var matched = &#123;</div><div class=\"line\">    //存储path匹配的layer</div><div class=\"line\">    path: [],</div><div class=\"line\">    //存储methods匹配的layer</div><div class=\"line\">    pathAndMethod: [],</div><div class=\"line\">    // 是否匹配成功</div><div class=\"line\">    route: false</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  for (var len = layers.length, i = 0; i &lt; len; i++) &#123;</div><div class=\"line\">    layer = layers[i];</div><div class=\"line\"></div><div class=\"line\">    debug(&apos;test %s %s&apos;, layer.path, layer.regexp);</div><div class=\"line\"></div><div class=\"line\">    if (layer.match(path)) &#123;</div><div class=\"line\">      matched.path.push(layer);</div><div class=\"line\"></div><div class=\"line\">      if (layer.methods.length === 0 || ~layer.methods.indexOf(method)) &#123;</div><div class=\"line\">        matched.pathAndMethod.push(layer);</div><div class=\"line\">        if (layer.methods.length) matched.route = true;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return matched;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Layer层通过正则匹配路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Layer.prototype.match = function (path) &#123;</div><div class=\"line\">  return this.regexp.test(path);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Router通过use-将methods方法与Router联系起来app-use-router-routes-use-router-allowedMethods\"><a href=\"#Router通过use-将methods方法与Router联系起来app-use-router-routes-use-router-allowedMethods\" class=\"headerlink\" title=\"Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());\"></a>Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());</h4><p>router.routes()返回一个中间件，用于对请求发起路由匹配，把一些router参数加入ctx对象,执行router.routes()，返回的是一个dispatch(ctx, next)方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.routes = Router.prototype.middleware = function () &#123;</div><div class=\"line\">  var router = this;</div><div class=\"line\"></div><div class=\"line\">  var dispatch = function dispatch(ctx, next) &#123;</div><div class=\"line\">    debug(&apos;%s %s&apos;, ctx.method, ctx.path);</div><div class=\"line\">    // 获取path</div><div class=\"line\">    var path = router.opts.routerPath || ctx.routerPath || ctx.path;</div><div class=\"line\">    // 发起path match，获取matched对象</div><div class=\"line\">    var matched = router.match(path, ctx.method);</div><div class=\"line\">    var layerChain, layer, i;</div><div class=\"line\"></div><div class=\"line\">    if (ctx.matched) &#123;</div><div class=\"line\">      ctx.matched.push.apply(ctx.matched, matched.path);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      ctx.matched = matched.path;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // 可以从ctx 取router</div><div class=\"line\">    ctx.router = router;</div><div class=\"line\">    // 判断是否匹配成功</div><div class=\"line\">    if (!matched.route) return next();</div><div class=\"line\"></div><div class=\"line\">    var matchedLayers = matched.pathAndMethod</div><div class=\"line\">    var mostSpecificLayer = matchedLayers[matchedLayers.length - 1]</div><div class=\"line\">    ctx._matchedRoute = mostSpecificLayer.path;</div><div class=\"line\">    if (mostSpecificLayer.name) &#123;</div><div class=\"line\">      ctx._matchedRouteName = mostSpecificLayer.name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    layerChain = matchedLayers.reduce(function(memo, layer) &#123;</div><div class=\"line\">      memo.push(function(ctx, next) &#123;</div><div class=\"line\">        ctx.captures = layer.captures(path, ctx.captures);</div><div class=\"line\">        ctx.params = layer.params(path, ctx.captures, ctx.params);</div><div class=\"line\">        return next();</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return memo.concat(layer.stack);</div><div class=\"line\">    &#125;, []);</div><div class=\"line\"></div><div class=\"line\">    return compose(layerChain)(ctx, next);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  dispatch.router = this;</div><div class=\"line\"></div><div class=\"line\">  return dispatch;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"router-allowedMethods-，执行router-allowedMethods-，返回allowedMethods-ctx-next-方法，判断请求的method是否被允许\"><a href=\"#router-allowedMethods-，执行router-allowedMethods-，返回allowedMethods-ctx-next-方法，判断请求的method是否被允许\" class=\"headerlink\" title=\"router.allowedMethods()，执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许\"></a>router.allowedMethods()，执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.allowedMethods = function (options) &#123;</div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\">  var implemented = this.methods;</div><div class=\"line\"></div><div class=\"line\">  return function allowedMethods(ctx, next) &#123;</div><div class=\"line\">    return next().then(function() &#123;</div><div class=\"line\">      var allowed = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">      if (!ctx.status || ctx.status === 404) &#123;</div><div class=\"line\">        ctx.matched.forEach(function (route) &#123;</div><div class=\"line\">          route.methods.forEach(function (method) &#123;</div><div class=\"line\">            allowed[method] = method;</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        var allowedArr = Object.keys(allowed);</div><div class=\"line\">        // 判断请求method是否在允许范围内</div><div class=\"line\">        if (!~implemented.indexOf(ctx.method)) &#123;</div><div class=\"line\">          if (options.throw) &#123;</div><div class=\"line\">            var notImplementedThrowable;</div><div class=\"line\">            if (typeof options.notImplemented === &apos;function&apos;) &#123;</div><div class=\"line\">              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">              notImplementedThrowable = new HttpError.NotImplemented();</div><div class=\"line\">            &#125;</div><div class=\"line\">            throw notImplementedThrowable;</div><div class=\"line\">          &#125; else &#123;</div><div class=\"line\">            ctx.status = 501;</div><div class=\"line\">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125; else if (allowedArr.length) &#123;</div><div class=\"line\">          if (ctx.method === &apos;OPTIONS&apos;) &#123;</div><div class=\"line\">            ctx.status = 204;</div><div class=\"line\">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class=\"line\">          &#125; else if (!allowed[ctx.method]) &#123;</div><div class=\"line\">            if (options.throw) &#123;</div><div class=\"line\">              var notAllowedThrowable;</div><div class=\"line\">              if (typeof options.methodNotAllowed === &apos;function&apos;) &#123;</div><div class=\"line\">                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function</div><div class=\"line\">              &#125; else &#123;</div><div class=\"line\">                notAllowedThrowable = new HttpError.MethodNotAllowed();</div><div class=\"line\">              &#125;</div><div class=\"line\">              throw notAllowedThrowable;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">              ctx.status = 405;</div><div class=\"line\">              ctx.set(&apos;Allow&apos;, allowedArr);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>app.use(router.routes()).use(router.allowedMethods());<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">Router.prototype.use = function () &#123;</div><div class=\"line\">  var router = this;</div><div class=\"line\">  // 将传入参数转换为数组</div><div class=\"line\">  var middleware = Array.prototype.slice.call(arguments);</div><div class=\"line\">  var path = &apos;(.*)&apos;;</div><div class=\"line\"></div><div class=\"line\">  // support array of paths</div><div class=\"line\">  if (Array.isArray(middleware[0]) &amp;&amp; typeof middleware[0][0] === &apos;string&apos;) &#123;</div><div class=\"line\">    middleware[0].forEach(function (p) &#123;</div><div class=\"line\">      router.use.apply(router, [p].concat(middleware.slice(1)));</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    return this;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  var hasPath = typeof middleware[0] === &apos;string&apos;;</div><div class=\"line\">  if (hasPath) &#123;</div><div class=\"line\">    path = middleware.shift();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  middleware.forEach(function (m) &#123;</div><div class=\"line\">    if (m.router) &#123;</div><div class=\"line\">      // 对router.routes()参数的处理</div><div class=\"line\">      m.router.stack.forEach(function (nestedLayer) &#123;</div><div class=\"line\">        if (path) nestedLayer.setPrefix(path);</div><div class=\"line\">        // 绑定layer</div><div class=\"line\">        if (router.opts.prefix) nestedLayer.setPrefix(router.opts.prefix);</div><div class=\"line\">        router.stack.push(nestedLayer);</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      if (router.params) &#123;</div><div class=\"line\">        Object.keys(router.params).forEach(function (key) &#123;</div><div class=\"line\">          m.router.param(key, router.params[key]);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      // 创建并注册一个route</div><div class=\"line\">      router.register(path, [], m, &#123; end: false, ignoreCaptures: !hasPath &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  return this;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 创建并注册一个route</div><div class=\"line\">Router.prototype.register = function (path, methods, middleware, opts) &#123;</div><div class=\"line\">  opts = opts || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  var router = this;</div><div class=\"line\">  var stack = this.stack;</div><div class=\"line\"></div><div class=\"line\">  // support array of paths</div><div class=\"line\">  if (Array.isArray(path)) &#123;</div><div class=\"line\">    path.forEach(function (p) &#123;</div><div class=\"line\">      router.register.call(router, p, methods, middleware, opts);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    return this;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // create route Layer</div><div class=\"line\">  var route = new Layer(path, methods, middleware, &#123;</div><div class=\"line\">    end: opts.end === false ? opts.end : true,</div><div class=\"line\">    name: opts.name,</div><div class=\"line\">    sensitive: opts.sensitive || this.opts.sensitive || false,</div><div class=\"line\">    strict: opts.strict || this.opts.strict || false,</div><div class=\"line\">    prefix: opts.prefix || this.opts.prefix || &quot;&quot;,</div><div class=\"line\">    ignoreCaptures: opts.ignoreCaptures</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  if (this.opts.prefix) &#123;</div><div class=\"line\">    route.setPrefix(this.opts.prefix);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // add parameter middleware</div><div class=\"line\">  Object.keys(this.params).forEach(function (param) &#123;</div><div class=\"line\">    route.param(param, this.params[param]);</div><div class=\"line\">  &#125;, this);</div><div class=\"line\"></div><div class=\"line\">  stack.push(route);</div><div class=\"line\"></div><div class=\"line\">  return route;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n"},{"title":"koa源码分析","date":"2017-05-25T07:29:49.000Z","_content":"本文koa版本是2.2.0\n## 创建一个koa的后端服务只需要3步:\n1. 创建koa的app对象\n2. 为app添加中间件\n3. 监听端口，创建server\n\n下面是一个简单的示例：\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\n// x-response-time\n\napp.use(async function (ctx, next) {\n  console.log('x-response-time start')\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n  console.log('x-response-time end')\n});\n\n// logger\n\napp.use(async function (ctx, next) {\n  console.log('logger start')\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n  console.log('logger end')\n});\n\n// response\n\napp.use(ctx => {\n  console.log('hello world')\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n\n```\n当请求http://localhost:3000/时，页面返回'Hello World'\n#### 命令行里面顺序打印日志：'x-response-time start' -->  'logger start' --> 'hello world' --> 'logger end' --> 'x-response-time end'\n#### 从请求到响应类似下图\n![](koa源码分析/koa-onion.png)\n\n#### 创建Koa的app对象，Application继承Emitter对象，代码结构如下\n![](koa源码分析/koa2.png)\n```\n class Application extends Emitter {\n  constructor() {\n    super();\n\n    this.proxy = false;\n    // 用于存储中间件的数组\n    this.middleware = [];\n    this.subdomainOffset = 2;\n    this.env = process.env.NODE_ENV || 'development';\n    // 上下文对象\n    this.context = Object.create(context);\n    // 请求对象\n    this.request = Object.create(request);\n    // 响应对象\n    this.response = Object.create(response);\n  }\n }\n```\n#### koa的中间件是很重要，使用app.use()添加中间件\n```\n  use(fn) {\n    //判断fn不是函数返回错误\n    if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n    if (isGeneratorFunction(fn)) {\n      deprecate('Support for generators will be removed in v3. ' +\n                'See the documentation for examples of how to convert old middleware ' +\n                'https://github.com/koajs/koa/blob/master/docs/migration.md');\n      fn = convert(fn);\n    }\n    debug('use %s', fn._name || fn.name || '-');\n    //把中间件函数push进application的middleware数组内\n    this.middleware.push(fn);\n    return this;\n  }\n```\n#### app.listen()监听端口，listen是createServer()的封装\n```\n  listen() {\n    debug('listen');\n    const server = http.createServer(this.callback());\n    return server.listen.apply(server, arguments);\n  }\n```\n#### 当服务接收到http请求时，触发callback函数，\n```\n  callback() {\n    // 执行中间件\n    const fn = compose(this.middleware);\n\n    if (!this.listeners('error').length) this.on('error', this.onerror);\n\n    const handleRequest = (req, res) => {\n      res.statusCode = 404;\n      const ctx = this.createContext(req, res);\n      const onerror = err => ctx.onerror(err);\n      const handleResponse = () => respond(ctx);\n      onFinished(res, onerror);\n      return fn(ctx).then(handleResponse).catch(onerror);\n    };\n\n    return handleRequest;\n  }\n```\n#### compose用于执行中间件函数，在callback()函数执行fn(ctx)，相当于从dispatch(0)开始，递归执行dispatch(i),直到执行完所有中间件函数\n```\nfunction compose (middleware) {\n  // 参数判断\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  return function (context, next) {\n    // last called middleware #\n    // 闭包，存储index变量，中间件执行当前坐标\n    let index = -1\n    // 从第一个中间件开始执行\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        // 执行中间件函数\n        return Promise.resolve(fn(context, function next () {\n          // 执行下一个中间件\n          return dispatch(i + 1)\n        }))\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n```\n#### context上下文用于管理请求，响应\n```\n  createContext(req, res) {\n    const context = Object.create(this.context);\n    const request = context.request = Object.create(this.request);\n    const response = context.response = Object.create(this.response);\n    // 通过context可以获取app,request,response对象\n    context.app = request.app = response.app = this;\n    context.req = request.req = response.req = req;\n    context.res = request.res = response.res = res;\n    request.ctx = response.ctx = context;\n    request.response = response;\n    response.request = request;\n    context.originalUrl = request.originalUrl = req.url;\n    context.cookies = new Cookies(req, res, {\n      keys: this.keys,\n      secure: request.secure\n    });\n    request.ip = request.ips[0] || req.socket.remoteAddress || '';\n    context.accept = request.accept = accepts(req);\n    context.state = {};\n    return context;\n  }\n```\n","source":"_posts/koa源码分析.md","raw":"---\ntitle: koa源码分析\ndate: 2017-05-25 15:29:49\ntags: koa\ncategories: nodejs\n---\n本文koa版本是2.2.0\n## 创建一个koa的后端服务只需要3步:\n1. 创建koa的app对象\n2. 为app添加中间件\n3. 监听端口，创建server\n\n下面是一个简单的示例：\n```\nconst Koa = require('koa');\nconst app = new Koa();\n\n// x-response-time\n\napp.use(async function (ctx, next) {\n  console.log('x-response-time start')\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  ctx.set('X-Response-Time', `${ms}ms`);\n  console.log('x-response-time end')\n});\n\n// logger\n\napp.use(async function (ctx, next) {\n  console.log('logger start')\n  const start = new Date();\n  await next();\n  const ms = new Date() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}`);\n  console.log('logger end')\n});\n\n// response\n\napp.use(ctx => {\n  console.log('hello world')\n  ctx.body = 'Hello World';\n});\n\napp.listen(3000);\n\n```\n当请求http://localhost:3000/时，页面返回'Hello World'\n#### 命令行里面顺序打印日志：'x-response-time start' -->  'logger start' --> 'hello world' --> 'logger end' --> 'x-response-time end'\n#### 从请求到响应类似下图\n![](koa源码分析/koa-onion.png)\n\n#### 创建Koa的app对象，Application继承Emitter对象，代码结构如下\n![](koa源码分析/koa2.png)\n```\n class Application extends Emitter {\n  constructor() {\n    super();\n\n    this.proxy = false;\n    // 用于存储中间件的数组\n    this.middleware = [];\n    this.subdomainOffset = 2;\n    this.env = process.env.NODE_ENV || 'development';\n    // 上下文对象\n    this.context = Object.create(context);\n    // 请求对象\n    this.request = Object.create(request);\n    // 响应对象\n    this.response = Object.create(response);\n  }\n }\n```\n#### koa的中间件是很重要，使用app.use()添加中间件\n```\n  use(fn) {\n    //判断fn不是函数返回错误\n    if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n    if (isGeneratorFunction(fn)) {\n      deprecate('Support for generators will be removed in v3. ' +\n                'See the documentation for examples of how to convert old middleware ' +\n                'https://github.com/koajs/koa/blob/master/docs/migration.md');\n      fn = convert(fn);\n    }\n    debug('use %s', fn._name || fn.name || '-');\n    //把中间件函数push进application的middleware数组内\n    this.middleware.push(fn);\n    return this;\n  }\n```\n#### app.listen()监听端口，listen是createServer()的封装\n```\n  listen() {\n    debug('listen');\n    const server = http.createServer(this.callback());\n    return server.listen.apply(server, arguments);\n  }\n```\n#### 当服务接收到http请求时，触发callback函数，\n```\n  callback() {\n    // 执行中间件\n    const fn = compose(this.middleware);\n\n    if (!this.listeners('error').length) this.on('error', this.onerror);\n\n    const handleRequest = (req, res) => {\n      res.statusCode = 404;\n      const ctx = this.createContext(req, res);\n      const onerror = err => ctx.onerror(err);\n      const handleResponse = () => respond(ctx);\n      onFinished(res, onerror);\n      return fn(ctx).then(handleResponse).catch(onerror);\n    };\n\n    return handleRequest;\n  }\n```\n#### compose用于执行中间件函数，在callback()函数执行fn(ctx)，相当于从dispatch(0)开始，递归执行dispatch(i),直到执行完所有中间件函数\n```\nfunction compose (middleware) {\n  // 参数判断\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  return function (context, next) {\n    // last called middleware #\n    // 闭包，存储index变量，中间件执行当前坐标\n    let index = -1\n    // 从第一个中间件开始执行\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        // 执行中间件函数\n        return Promise.resolve(fn(context, function next () {\n          // 执行下一个中间件\n          return dispatch(i + 1)\n        }))\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n```\n#### context上下文用于管理请求，响应\n```\n  createContext(req, res) {\n    const context = Object.create(this.context);\n    const request = context.request = Object.create(this.request);\n    const response = context.response = Object.create(this.response);\n    // 通过context可以获取app,request,response对象\n    context.app = request.app = response.app = this;\n    context.req = request.req = response.req = req;\n    context.res = request.res = response.res = res;\n    request.ctx = response.ctx = context;\n    request.response = response;\n    response.request = request;\n    context.originalUrl = request.originalUrl = req.url;\n    context.cookies = new Cookies(req, res, {\n      keys: this.keys,\n      secure: request.secure\n    });\n    request.ip = request.ips[0] || req.socket.remoteAddress || '';\n    context.accept = request.accept = accepts(req);\n    context.state = {};\n    return context;\n  }\n```\n","slug":"koa源码分析","published":1,"updated":"2017-06-06T07:10:32.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3lh07ol0006dsow7y7z4jql","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\"><p>本文koa版本是2.2.0</p>\n<h2 id=\"创建一个koa的后端服务只需要3步\"><a href=\"#创建一个koa的后端服务只需要3步\" class=\"headerlink\" title=\"创建一个koa的后端服务只需要3步:\"></a>创建一个koa的后端服务只需要3步:</h2><ol>\n<li>创建koa的app对象</li>\n<li>为app添加中间件</li>\n<li>监听端口，创建server</li>\n</ol>\n<p>下面是一个简单的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;);</div><div class=\"line\">const app = new Koa();</div><div class=\"line\"></div><div class=\"line\">// x-response-time</div><div class=\"line\"></div><div class=\"line\">app.use(async function (ctx, next) &#123;</div><div class=\"line\">  console.log(&apos;x-response-time start&apos;)</div><div class=\"line\">  const start = new Date();</div><div class=\"line\">  await next();</div><div class=\"line\">  const ms = new Date() - start;</div><div class=\"line\">  ctx.set(&apos;X-Response-Time&apos;, `$&#123;ms&#125;ms`);</div><div class=\"line\">  console.log(&apos;x-response-time end&apos;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// logger</div><div class=\"line\"></div><div class=\"line\">app.use(async function (ctx, next) &#123;</div><div class=\"line\">  console.log(&apos;logger start&apos;)</div><div class=\"line\">  const start = new Date();</div><div class=\"line\">  await next();</div><div class=\"line\">  const ms = new Date() - start;</div><div class=\"line\">  console.log(`$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;ms&#125;`);</div><div class=\"line\">  console.log(&apos;logger end&apos;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// response</div><div class=\"line\"></div><div class=\"line\">app.use(ctx =&gt; &#123;</div><div class=\"line\">  console.log(&apos;hello world&apos;)</div><div class=\"line\">  ctx.body = &apos;Hello World&apos;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000);</div></pre></td></tr></table></figure></p>\n<p>当请求<a href=\"http://localhost:3000/时，页面返回&#39;Hello\" target=\"_blank\" rel=\"external\">http://localhost:3000/时，页面返回&#39;Hello</a> World’</p>\n<h4 id=\"命令行里面顺序打印日志：’x-response-time-start’-–-gt-‘logger-start’-–-gt-‘hello-world’-–-gt-‘logger-end’-–-gt-‘x-response-time-end’\"><a href=\"#命令行里面顺序打印日志：’x-response-time-start’-–-gt-‘logger-start’-–-gt-‘hello-world’-–-gt-‘logger-end’-–-gt-‘x-response-time-end’\" class=\"headerlink\" title=\"命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’\"></a>命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’</h4><h4 id=\"从请求到响应类似下图\"><a href=\"#从请求到响应类似下图\" class=\"headerlink\" title=\"从请求到响应类似下图\"></a>从请求到响应类似下图</h4><p><img src=\"/2017/05/25/koa源码分析/koa-onion.png\" alt=\"\"></p>\n<h4 id=\"创建Koa的app对象，Application继承Emitter对象，代码结构如下\"><a href=\"#创建Koa的app对象，Application继承Emitter对象，代码结构如下\" class=\"headerlink\" title=\"创建Koa的app对象，Application继承Emitter对象，代码结构如下\"></a>创建Koa的app对象，Application继承Emitter对象，代码结构如下</h4><p><img src=\"/2017/05/25/koa源码分析/koa2.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Application extends Emitter &#123;</div><div class=\"line\"> constructor() &#123;</div><div class=\"line\">   super();</div><div class=\"line\"></div><div class=\"line\">   this.proxy = false;</div><div class=\"line\">   // 用于存储中间件的数组</div><div class=\"line\">   this.middleware = [];</div><div class=\"line\">   this.subdomainOffset = 2;</div><div class=\"line\">   this.env = process.env.NODE_ENV || &apos;development&apos;;</div><div class=\"line\">   // 上下文对象</div><div class=\"line\">   this.context = Object.create(context);</div><div class=\"line\">   // 请求对象</div><div class=\"line\">   this.request = Object.create(request);</div><div class=\"line\">   // 响应对象</div><div class=\"line\">   this.response = Object.create(response);</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"koa的中间件是很重要，使用app-use-添加中间件\"><a href=\"#koa的中间件是很重要，使用app-use-添加中间件\" class=\"headerlink\" title=\"koa的中间件是很重要，使用app.use()添加中间件\"></a>koa的中间件是很重要，使用app.use()添加中间件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">use(fn) &#123;</div><div class=\"line\">  //判断fn不是函数返回错误</div><div class=\"line\">  if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;middleware must be a function!&apos;);</div><div class=\"line\">  if (isGeneratorFunction(fn)) &#123;</div><div class=\"line\">    deprecate(&apos;Support for generators will be removed in v3. &apos; +</div><div class=\"line\">              &apos;See the documentation for examples of how to convert old middleware &apos; +</div><div class=\"line\">              &apos;https://github.com/koajs/koa/blob/master/docs/migration.md&apos;);</div><div class=\"line\">    fn = convert(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">  debug(&apos;use %s&apos;, fn._name || fn.name || &apos;-&apos;);</div><div class=\"line\">  //把中间件函数push进application的middleware数组内</div><div class=\"line\">  this.middleware.push(fn);</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"app-listen-监听端口，listen是createServer-的封装\"><a href=\"#app-listen-监听端口，listen是createServer-的封装\" class=\"headerlink\" title=\"app.listen()监听端口，listen是createServer()的封装\"></a>app.listen()监听端口，listen是createServer()的封装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen() &#123;</div><div class=\"line\">  debug(&apos;listen&apos;);</div><div class=\"line\">  const server = http.createServer(this.callback());</div><div class=\"line\">  return server.listen.apply(server, arguments);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"当服务接收到http请求时，触发callback函数，\"><a href=\"#当服务接收到http请求时，触发callback函数，\" class=\"headerlink\" title=\"当服务接收到http请求时，触发callback函数，\"></a>当服务接收到http请求时，触发callback函数，</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">callback() &#123;</div><div class=\"line\">  // 执行中间件</div><div class=\"line\">  const fn = compose(this.middleware);</div><div class=\"line\"></div><div class=\"line\">  if (!this.listeners(&apos;error&apos;).length) this.on(&apos;error&apos;, this.onerror);</div><div class=\"line\"></div><div class=\"line\">  const handleRequest = (req, res) =&gt; &#123;</div><div class=\"line\">    res.statusCode = 404;</div><div class=\"line\">    const ctx = this.createContext(req, res);</div><div class=\"line\">    const onerror = err =&gt; ctx.onerror(err);</div><div class=\"line\">    const handleResponse = () =&gt; respond(ctx);</div><div class=\"line\">    onFinished(res, onerror);</div><div class=\"line\">    return fn(ctx).then(handleResponse).catch(onerror);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  return handleRequest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"compose用于执行中间件函数，在callback-函数执行fn-ctx-，相当于从dispatch-0-开始，递归执行dispatch-i-直到执行完所有中间件函数\"><a href=\"#compose用于执行中间件函数，在callback-函数执行fn-ctx-，相当于从dispatch-0-开始，递归执行dispatch-i-直到执行完所有中间件函数\" class=\"headerlink\" title=\"compose用于执行中间件函数，在callback()函数执行fn(ctx)，相当于从dispatch(0)开始，递归执行dispatch(i),直到执行完所有中间件函数\"></a>compose用于执行中间件函数，在callback()函数执行fn(ctx)，相当于从dispatch(0)开始，递归执行dispatch(i),直到执行完所有中间件函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function compose (middleware) &#123;</div><div class=\"line\">  // 参数判断</div><div class=\"line\">  if (!Array.isArray(middleware)) throw new TypeError(&apos;Middleware stack must be an array!&apos;)</div><div class=\"line\">  for (const fn of middleware) &#123;</div><div class=\"line\">    if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;Middleware must be composed of functions!&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return function (context, next) &#123;</div><div class=\"line\">    // last called middleware #</div><div class=\"line\">    // 闭包，存储index变量，中间件执行当前坐标</div><div class=\"line\">    let index = -1</div><div class=\"line\">    // 从第一个中间件开始执行</div><div class=\"line\">    return dispatch(0)</div><div class=\"line\">    function dispatch (i) &#123;</div><div class=\"line\">      if (i &lt;= index) return Promise.reject(new Error(&apos;next() called multiple times&apos;))</div><div class=\"line\">      index = i</div><div class=\"line\">      let fn = middleware[i]</div><div class=\"line\">      if (i === middleware.length) fn = next</div><div class=\"line\">      if (!fn) return Promise.resolve()</div><div class=\"line\">      try &#123;</div><div class=\"line\">        // 执行中间件函数</div><div class=\"line\">        return Promise.resolve(fn(context, function next () &#123;</div><div class=\"line\">          // 执行下一个中间件</div><div class=\"line\">          return dispatch(i + 1)</div><div class=\"line\">        &#125;))</div><div class=\"line\">      &#125; catch (err) &#123;</div><div class=\"line\">        return Promise.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"context上下文用于管理请求，响应\"><a href=\"#context上下文用于管理请求，响应\" class=\"headerlink\" title=\"context上下文用于管理请求，响应\"></a>context上下文用于管理请求，响应</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">createContext(req, res) &#123;</div><div class=\"line\">  const context = Object.create(this.context);</div><div class=\"line\">  const request = context.request = Object.create(this.request);</div><div class=\"line\">  const response = context.response = Object.create(this.response);</div><div class=\"line\">  // 通过context可以获取app,request,response对象</div><div class=\"line\">  context.app = request.app = response.app = this;</div><div class=\"line\">  context.req = request.req = response.req = req;</div><div class=\"line\">  context.res = request.res = response.res = res;</div><div class=\"line\">  request.ctx = response.ctx = context;</div><div class=\"line\">  request.response = response;</div><div class=\"line\">  response.request = request;</div><div class=\"line\">  context.originalUrl = request.originalUrl = req.url;</div><div class=\"line\">  context.cookies = new Cookies(req, res, &#123;</div><div class=\"line\">    keys: this.keys,</div><div class=\"line\">    secure: request.secure</div><div class=\"line\">  &#125;);</div><div class=\"line\">  request.ip = request.ips[0] || req.socket.remoteAddress || &apos;&apos;;</div><div class=\"line\">  context.accept = request.accept = accepts(req);</div><div class=\"line\">  context.state = &#123;&#125;;</div><div class=\"line\">  return context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>本文koa版本是2.2.0</p>\n<h2 id=\"创建一个koa的后端服务只需要3步\"><a href=\"#创建一个koa的后端服务只需要3步\" class=\"headerlink\" title=\"创建一个koa的后端服务只需要3步:\"></a>创建一个koa的后端服务只需要3步:</h2><ol>\n<li>创建koa的app对象</li>\n<li>为app添加中间件</li>\n<li>监听端口，创建server</li>\n</ol>\n<p>下面是一个简单的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Koa = require(&apos;koa&apos;);</div><div class=\"line\">const app = new Koa();</div><div class=\"line\"></div><div class=\"line\">// x-response-time</div><div class=\"line\"></div><div class=\"line\">app.use(async function (ctx, next) &#123;</div><div class=\"line\">  console.log(&apos;x-response-time start&apos;)</div><div class=\"line\">  const start = new Date();</div><div class=\"line\">  await next();</div><div class=\"line\">  const ms = new Date() - start;</div><div class=\"line\">  ctx.set(&apos;X-Response-Time&apos;, `$&#123;ms&#125;ms`);</div><div class=\"line\">  console.log(&apos;x-response-time end&apos;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// logger</div><div class=\"line\"></div><div class=\"line\">app.use(async function (ctx, next) &#123;</div><div class=\"line\">  console.log(&apos;logger start&apos;)</div><div class=\"line\">  const start = new Date();</div><div class=\"line\">  await next();</div><div class=\"line\">  const ms = new Date() - start;</div><div class=\"line\">  console.log(`$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;ms&#125;`);</div><div class=\"line\">  console.log(&apos;logger end&apos;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// response</div><div class=\"line\"></div><div class=\"line\">app.use(ctx =&gt; &#123;</div><div class=\"line\">  console.log(&apos;hello world&apos;)</div><div class=\"line\">  ctx.body = &apos;Hello World&apos;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000);</div></pre></td></tr></table></figure></p>\n<p>当请求<a href=\"http://localhost:3000/时，页面返回&#39;Hello\" target=\"_blank\" rel=\"external\">http://localhost:3000/时，页面返回&#39;Hello</a> World’</p>\n<h4 id=\"命令行里面顺序打印日志：’x-response-time-start’-–-gt-‘logger-start’-–-gt-‘hello-world’-–-gt-‘logger-end’-–-gt-‘x-response-time-end’\"><a href=\"#命令行里面顺序打印日志：’x-response-time-start’-–-gt-‘logger-start’-–-gt-‘hello-world’-–-gt-‘logger-end’-–-gt-‘x-response-time-end’\" class=\"headerlink\" title=\"命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’\"></a>命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’</h4><h4 id=\"从请求到响应类似下图\"><a href=\"#从请求到响应类似下图\" class=\"headerlink\" title=\"从请求到响应类似下图\"></a>从请求到响应类似下图</h4><p><img src=\"/2017/05/25/koa源码分析/koa-onion.png\" alt=\"\"></p>\n<h4 id=\"创建Koa的app对象，Application继承Emitter对象，代码结构如下\"><a href=\"#创建Koa的app对象，Application继承Emitter对象，代码结构如下\" class=\"headerlink\" title=\"创建Koa的app对象，Application继承Emitter对象，代码结构如下\"></a>创建Koa的app对象，Application继承Emitter对象，代码结构如下</h4><p><img src=\"/2017/05/25/koa源码分析/koa2.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Application extends Emitter &#123;</div><div class=\"line\"> constructor() &#123;</div><div class=\"line\">   super();</div><div class=\"line\"></div><div class=\"line\">   this.proxy = false;</div><div class=\"line\">   // 用于存储中间件的数组</div><div class=\"line\">   this.middleware = [];</div><div class=\"line\">   this.subdomainOffset = 2;</div><div class=\"line\">   this.env = process.env.NODE_ENV || &apos;development&apos;;</div><div class=\"line\">   // 上下文对象</div><div class=\"line\">   this.context = Object.create(context);</div><div class=\"line\">   // 请求对象</div><div class=\"line\">   this.request = Object.create(request);</div><div class=\"line\">   // 响应对象</div><div class=\"line\">   this.response = Object.create(response);</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"koa的中间件是很重要，使用app-use-添加中间件\"><a href=\"#koa的中间件是很重要，使用app-use-添加中间件\" class=\"headerlink\" title=\"koa的中间件是很重要，使用app.use()添加中间件\"></a>koa的中间件是很重要，使用app.use()添加中间件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">use(fn) &#123;</div><div class=\"line\">  //判断fn不是函数返回错误</div><div class=\"line\">  if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;middleware must be a function!&apos;);</div><div class=\"line\">  if (isGeneratorFunction(fn)) &#123;</div><div class=\"line\">    deprecate(&apos;Support for generators will be removed in v3. &apos; +</div><div class=\"line\">              &apos;See the documentation for examples of how to convert old middleware &apos; +</div><div class=\"line\">              &apos;https://github.com/koajs/koa/blob/master/docs/migration.md&apos;);</div><div class=\"line\">    fn = convert(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">  debug(&apos;use %s&apos;, fn._name || fn.name || &apos;-&apos;);</div><div class=\"line\">  //把中间件函数push进application的middleware数组内</div><div class=\"line\">  this.middleware.push(fn);</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"app-listen-监听端口，listen是createServer-的封装\"><a href=\"#app-listen-监听端口，listen是createServer-的封装\" class=\"headerlink\" title=\"app.listen()监听端口，listen是createServer()的封装\"></a>app.listen()监听端口，listen是createServer()的封装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen() &#123;</div><div class=\"line\">  debug(&apos;listen&apos;);</div><div class=\"line\">  const server = http.createServer(this.callback());</div><div class=\"line\">  return server.listen.apply(server, arguments);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"当服务接收到http请求时，触发callback函数，\"><a href=\"#当服务接收到http请求时，触发callback函数，\" class=\"headerlink\" title=\"当服务接收到http请求时，触发callback函数，\"></a>当服务接收到http请求时，触发callback函数，</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">callback() &#123;</div><div class=\"line\">  // 执行中间件</div><div class=\"line\">  const fn = compose(this.middleware);</div><div class=\"line\"></div><div class=\"line\">  if (!this.listeners(&apos;error&apos;).length) this.on(&apos;error&apos;, this.onerror);</div><div class=\"line\"></div><div class=\"line\">  const handleRequest = (req, res) =&gt; &#123;</div><div class=\"line\">    res.statusCode = 404;</div><div class=\"line\">    const ctx = this.createContext(req, res);</div><div class=\"line\">    const onerror = err =&gt; ctx.onerror(err);</div><div class=\"line\">    const handleResponse = () =&gt; respond(ctx);</div><div class=\"line\">    onFinished(res, onerror);</div><div class=\"line\">    return fn(ctx).then(handleResponse).catch(onerror);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  return handleRequest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"compose用于执行中间件函数，在callback-函数执行fn-ctx-，相当于从dispatch-0-开始，递归执行dispatch-i-直到执行完所有中间件函数\"><a href=\"#compose用于执行中间件函数，在callback-函数执行fn-ctx-，相当于从dispatch-0-开始，递归执行dispatch-i-直到执行完所有中间件函数\" class=\"headerlink\" title=\"compose用于执行中间件函数，在callback()函数执行fn(ctx)，相当于从dispatch(0)开始，递归执行dispatch(i),直到执行完所有中间件函数\"></a>compose用于执行中间件函数，在callback()函数执行fn(ctx)，相当于从dispatch(0)开始，递归执行dispatch(i),直到执行完所有中间件函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function compose (middleware) &#123;</div><div class=\"line\">  // 参数判断</div><div class=\"line\">  if (!Array.isArray(middleware)) throw new TypeError(&apos;Middleware stack must be an array!&apos;)</div><div class=\"line\">  for (const fn of middleware) &#123;</div><div class=\"line\">    if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;Middleware must be composed of functions!&apos;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return function (context, next) &#123;</div><div class=\"line\">    // last called middleware #</div><div class=\"line\">    // 闭包，存储index变量，中间件执行当前坐标</div><div class=\"line\">    let index = -1</div><div class=\"line\">    // 从第一个中间件开始执行</div><div class=\"line\">    return dispatch(0)</div><div class=\"line\">    function dispatch (i) &#123;</div><div class=\"line\">      if (i &lt;= index) return Promise.reject(new Error(&apos;next() called multiple times&apos;))</div><div class=\"line\">      index = i</div><div class=\"line\">      let fn = middleware[i]</div><div class=\"line\">      if (i === middleware.length) fn = next</div><div class=\"line\">      if (!fn) return Promise.resolve()</div><div class=\"line\">      try &#123;</div><div class=\"line\">        // 执行中间件函数</div><div class=\"line\">        return Promise.resolve(fn(context, function next () &#123;</div><div class=\"line\">          // 执行下一个中间件</div><div class=\"line\">          return dispatch(i + 1)</div><div class=\"line\">        &#125;))</div><div class=\"line\">      &#125; catch (err) &#123;</div><div class=\"line\">        return Promise.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"context上下文用于管理请求，响应\"><a href=\"#context上下文用于管理请求，响应\" class=\"headerlink\" title=\"context上下文用于管理请求，响应\"></a>context上下文用于管理请求，响应</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">createContext(req, res) &#123;</div><div class=\"line\">  const context = Object.create(this.context);</div><div class=\"line\">  const request = context.request = Object.create(this.request);</div><div class=\"line\">  const response = context.response = Object.create(this.response);</div><div class=\"line\">  // 通过context可以获取app,request,response对象</div><div class=\"line\">  context.app = request.app = response.app = this;</div><div class=\"line\">  context.req = request.req = response.req = req;</div><div class=\"line\">  context.res = request.res = response.res = res;</div><div class=\"line\">  request.ctx = response.ctx = context;</div><div class=\"line\">  request.response = response;</div><div class=\"line\">  response.request = request;</div><div class=\"line\">  context.originalUrl = request.originalUrl = req.url;</div><div class=\"line\">  context.cookies = new Cookies(req, res, &#123;</div><div class=\"line\">    keys: this.keys,</div><div class=\"line\">    secure: request.secure</div><div class=\"line\">  &#125;);</div><div class=\"line\">  request.ip = request.ips[0] || req.socket.remoteAddress || &apos;&apos;;</div><div class=\"line\">  context.accept = request.accept = accepts(req);</div><div class=\"line\">  context.state = &#123;&#125;;</div><div class=\"line\">  return context;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/koa源码分析/koa-onion.png","post":"cj3lh07ol0006dsow7y7z4jql","slug":"koa-onion.png","modified":1,"renderable":1},{"_id":"source/_posts/koa源码分析/koa2.png","post":"cj3lh07ol0006dsow7y7z4jql","slug":"koa2.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj3lh07o70004dsow10n4cn4f","category_id":"cj3lh07os0007dsowp5s8ldpz","_id":"cj3lh07pf000cdsowsd0tkjcp"},{"post_id":"cj3lh07ol0006dsow7y7z4jql","category_id":"cj3lh07os0007dsowp5s8ldpz","_id":"cj3lh07pu000edsowij84qyx4"}],"PostTag":[{"post_id":"cj3lh07o10002dsowc6lqf6qh","tag_id":"cj3lh07ob0005dsowaczkcl7p","_id":"cj3lh07p20009dsowjlgbnkw7"},{"post_id":"cj3lh07o70004dsow10n4cn4f","tag_id":"cj3lh07ox0008dsow3prcadvw","_id":"cj3lh07pt000ddsowk8eqpycq"},{"post_id":"cj3lh07ol0006dsow7y7z4jql","tag_id":"cj3lh07p9000bdsow1dce0ssk","_id":"cj3lh07pv000fdsowkxz64cy7"}],"Tag":[{"name":"AI","_id":"cj3lh07ob0005dsowaczkcl7p"},{"name":"koa-router","_id":"cj3lh07ox0008dsow3prcadvw"},{"name":"koa","_id":"cj3lh07p9000bdsow1dce0ssk"}]}}