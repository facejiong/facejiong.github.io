<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一步一步实现一个小的koa]]></title>
      <url>/2017/06/08/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9A%84koa/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="koa对象"><a href="#koa对象" class="headerlink" title="koa对象"></a>koa对象</h2><p>1 http服务创建<br>2 中间件的添加<br>3 为中间件传入请求，响应参数<br>4 中间件的执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">const Emitter = require(&apos;events&apos;);</div><div class="line">const http = require(&apos;http&apos;);</div><div class="line"></div><div class="line">module.exports = class Application extends Emitter &#123;</div><div class="line">    constructor() &#123;</div><div class="line">    super();</div><div class="line"></div><div class="line">    this.middleware = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 创建http服务，监听端口</div><div class="line">  listen() &#123;</div><div class="line">    const server = http.createServer(this.callback());</div><div class="line">    return server.listen.apply(server, arguments);</div><div class="line">  &#125;</div><div class="line">  // 接收到http请求，触发的回调函数</div><div class="line">  callback() &#123;</div><div class="line">    console.log(&apos;http callback&apos;)</div><div class="line">    console.log(this)</div><div class="line">    const fn = this.compose(this.middleware);</div><div class="line"></div><div class="line">    const handleRequest = (request, response) =&gt; &#123;</div><div class="line">      // 把http请求，响应放进context传入中间件</div><div class="line">      const context = Object.create(null, &#123;</div><div class="line">        request: &#123;value: request&#125;,</div><div class="line">        response: &#123;value: response&#125;,</div><div class="line">      &#125;)</div><div class="line">      return fn(context).catch((err) =&gt; &#123;</div><div class="line">        console.log(&apos;err&apos;)</div><div class="line">        console.log(err)</div><div class="line">      &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    return handleRequest;</div><div class="line">  &#125;</div><div class="line">  // 添加中间件</div><div class="line">  use(fn) &#123;</div><div class="line">    this.middleware.push(fn);</div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line">  // 执行所有中间件</div><div class="line">  compose(middleware) &#123;</div><div class="line">    console.log(&apos;compose&apos;)</div><div class="line">    console.log(middleware)</div><div class="line">    return function(context, next) &#123;</div><div class="line">      console.log(&apos;dispatch&apos;)</div><div class="line">      let index = -1</div><div class="line">      return dispatch(0)</div><div class="line">      function dispatch(i) &#123;</div><div class="line">        console.log(&apos;dispatch:&apos; + i)</div><div class="line">        index = i</div><div class="line">        let fn = middleware[i]</div><div class="line">        if (i === middleware.length) fn = next</div><div class="line">        if (!fn) return Promise.resolve()</div><div class="line">        try &#123;</div><div class="line">        return Promise.resolve(fn(context, function next () &#123;</div><div class="line">          return dispatch(i + 1)</div><div class="line">        &#125;))</div><div class="line">      &#125; catch (err) &#123;</div><div class="line">        return Promise.reject(err)</div><div class="line">      &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;./application&apos;)</div><div class="line">const app = new Koa()</div><div class="line"></div><div class="line">// x-response-time</div><div class="line"></div><div class="line">app.use(async function (context, next) &#123;</div><div class="line">  console.log(&apos;x-response-time start&apos;)</div><div class="line">  console.log(context)</div><div class="line">  const start = new Date()</div><div class="line">  await next()</div><div class="line">  const ms = new Date() - start</div><div class="line">  console.log(&apos;x-response-time end&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// logger</div><div class="line"></div><div class="line">app.use(async function (context, next) &#123;</div><div class="line">  console.log(&apos;logger start&apos;)</div><div class="line">  const start = new Date()</div><div class="line">  await next()</div><div class="line">  const ms = new Date() - start</div><div class="line">  console.log(&apos;logger end&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// response</div><div class="line"></div><div class="line">app.use(context =&gt; &#123;</div><div class="line">  // 可以使用原生的方法处理请求，响应</div><div class="line">  console.log(&apos;hello world&apos;)</div><div class="line">  context.response.stateCode = &apos;200&apos;</div><div class="line">  context.response.end(&apos;Hello World&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(3001)</div></pre></td></tr></table></figure>
<h3 id="最终输出log"><a href="#最终输出log" class="headerlink" title="最终输出log"></a>最终输出log</h3><p>koa-dispatch 中间件执行发起<br><img src="/2017/06/08/一步一步实现一个小的koa/log.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> koa </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习-朴素贝叶斯]]></title>
      <url>/2017/06/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="贝叶斯"><a href="#贝叶斯" class="headerlink" title="贝叶斯"></a>贝叶斯</h2><h3 id="贝叶斯推断：先估计一个值，根据实际结果不断修正。"><a href="#贝叶斯推断：先估计一个值，根据实际结果不断修正。" class="headerlink" title="贝叶斯推断：先估计一个值，根据实际结果不断修正。"></a>贝叶斯推断：先估计一个值，根据实际结果不断修正。</h3><h3 id="贝叶斯定理：P-A-B-，条件概率，事件B发生的情况下，事件A发生的概率。"><a href="#贝叶斯定理：P-A-B-，条件概率，事件B发生的情况下，事件A发生的概率。" class="headerlink" title="贝叶斯定理：P(A|B)，条件概率，事件B发生的情况下，事件A发生的概率。"></a>贝叶斯定理：P(A|B)，条件概率，事件B发生的情况下，事件A发生的概率。</h3><p><img src="/2017/06/06/机器学习-朴素贝叶斯/venturi-diagram.jpg" alt="文氏图"><br>由文氏图得<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo>⋂</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = \frac {P \left ( A \bigcap B \right )} {P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0100069999999999em;"></span><span class="strut bottom" style="height:1.530007em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.48500699999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="op-symbol small-op mop" style="top:0.074995em;">⋂</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>又<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo>⋂</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( B|A \right ) = \frac {P \left ( A \bigcap B \right )} {P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0100069999999999em;"></span><span class="strut bottom" style="height:1.530007em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.48500699999999997em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="op-symbol small-op mop" style="top:0.074995em;">⋂</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>故<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo>⋂</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( A \bigcap B \right ) = P \left ( A|B \right ) \ast P \left ( B \right ) = P \left ( B|A \right ) \ast P \left ( A \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>最终<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = \frac{P \left ( B|A \right ) \ast P \left ( A \right )}{P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p>
<h3 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h3><p>由文氏图得<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo>⋂</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo>⋂</mo><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( B \right ) = P \left ( B \bigcap A \right ) + P \left (  B \bigcap{A}&#x27; \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.751892em;"></span><span class="strut bottom" style="height:1.001902em;vertical-align:-0.25001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord"><span class="mord textstyle uncramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>由条件概率公式得<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo>⋂</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( B \bigcap A \right ) = P \left ( B|A \right ) \ast P \left ( A \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">⋂</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>代入得全概率公式<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
P \left ( B \right ) = P \left ( B|A \right ) \ast P \left ( A \right ) + P \left ( B|{A}&#x27; \right ) \ast P \left ( {A}&#x27; \right )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.751892em;"></span><span class="strut bottom" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord"><span class="mord textstyle uncramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord textstyle uncramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span></span></span></span><br>代入条件概率公式得到条件概率另一种写法</p>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow><mo>∗</mo><mi>P</mi><mrow><mo fence="true">(</mo><msup><mrow><mi>A</mi></mrow><mrow><mi mathvariant="normal">′</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = \frac{P \left ( B|A \right ) \ast P \left ( A \right )}{P \left ( B \right )} = \frac{P\left ( B|A \right )\ast P\left ( A \right )}{P \left ( B|A \right ) \ast P \left ( A \right ) + P \left ( B|{A}&#x27; \right ) \ast P \left ( {A}&#x27; \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord"><span class="mord scriptstyle cramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord"><span class="mord scriptstyle cramped"><span class="mord mathit">A</span></span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">′</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>
<h3 id="贝叶斯推断"><a href="#贝叶斯推断" class="headerlink" title="贝叶斯推断"></a>贝叶斯推断</h3><p>条件概率<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>P</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>∗</mo><mfrac><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>B</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">
P \left ( A|B \right ) = P \left ( A \right ) \ast \frac{P \left ( B|A \right )}{P \left ( B \right )}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.01em;"></span><span class="strut bottom" style="height:1.53em;vertical-align:-0.52em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">(</span><span class="mord mathit">A</span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;">)</span></span><span class="mbin">∗</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.34500000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle cramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.485em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="minner scriptstyle uncramped"><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="style-wrap reset-scriptstyle scriptstyle uncramped" style="top:0em;">)</span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0.7em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span><br>P(A)：先验概率，在事件B发生之前，事件A发生的概率，与事件B无关。<br>P(A|B)：后验概率，在事件B发生之后，事件A发生的概率。<br>P(B|A)/P(B)：可能性函数，用于调整先验概率，使之接近后验概率。若大于1，先验概率被增强，后验概率变大，反之，先验概率被削弱，后验概率变小。</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scikit-learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人工智能应用收集]]></title>
      <url>/2017/06/06/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">介绍</th>
<th style="text-align:left">链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">logojoy</td>
<td style="text-align:left">使用遗传算法生成logo</td>
<td style="text-align:left"><a href="https://www.logojoy.com/" target="_blank" rel="external">https://www.logojoy.com/</a></td>
</tr>
<tr>
<td style="text-align:left">PaintsChainer</td>
<td style="text-align:left">漫画线稿自动上色</td>
<td style="text-align:left"><a href="https://github.com/pfnet/PaintsChainer" target="_blank" rel="external">https://github.com/pfnet/PaintsChainer</a></td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/06/06/hello-world/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h3 id="katex"><a href="#katex" class="headerlink" title="katex"></a>katex</h3><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><msup><mi>b</mi><mrow><msqrt><mrow><mi>c</mi></mrow></msqrt></mrow></msup></mrow></msup></mrow><annotation encoding="application/x-tex">
a^{b^{\sqrt{c}}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.05974em;"></span><span class="strut bottom" style="height:1.05974em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:-0.363em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1.4285714285714286em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle uncramped"><span class="mord scriptscriptstyle uncramped"><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.00527999999999984em;"><span class="style-wrap reset-scriptscriptstyle scriptscriptstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:2em;">​</span></span><span class="mord scriptscriptstyle cramped"><span class="mord mathit">c</span></span></span><span style="top:-0.7252799999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:2em;">​</span></span><span class="reset-scriptscriptstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:2em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1.4285714285714286em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[koa-router源码分析]]></title>
      <url>/2017/05/31/koa-router%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>本文koa-router版本是7.2.0</p>
<p>路由定义：根据请求url路径，通过判断或正则匹配返回对应的页面。</p>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="原生示例："><a href="#原生示例：" class="headerlink" title="原生示例："></a>原生示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line"></div><div class="line">async function route( url ) &#123;</div><div class="line">  let view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class="line">  switch ( url ) &#123;</div><div class="line">    case &apos;/&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    case &apos;/index&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;index&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    case &apos;/todo&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;to do&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    case &apos;/404&apos;:</div><div class="line">      view = `&lt;html&gt;&lt;header&gt;&lt;/header&gt;&lt;body&gt;404&lt;/body&gt;&lt;/html&gt;`</div><div class="line">      break</div><div class="line">    default:</div><div class="line">      break</div><div class="line">  &#125;</div><div class="line">  let html = view</div><div class="line">  return html</div><div class="line">&#125;</div><div class="line"></div><div class="line">app.use( async ( ctx ) =&gt; &#123;</div><div class="line">  let url = ctx.request.url</div><div class="line">  let html = await route( url )</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="一个简单的koa-router例子"><a href="#一个简单的koa-router例子" class="headerlink" title="一个简单的koa-router例子"></a>一个简单的koa-router例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">var router = new Router()</div><div class="line"></div><div class="line">router.get(&apos;/&apos;, function (ctx, next) &#123;</div><div class="line">  console.log(ctx.router)</div><div class="line">  console.log(ctx.params)</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;/&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.get(&apos;/name/:id&apos;, function (ctx, next) &#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;name:$&#123;ctx.params.id&#125;&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.get(&apos;/company&apos;, function (ctx, next) &#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;company&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line">app.use(router.routes()).use(router.allowedMethods())</div><div class="line">console.log(router)</div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="多个子router的使用"><a href="#多个子router的使用" class="headerlink" title="多个子router的使用"></a>多个子router的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">// 子路由1</div><div class="line">let home = new Router()</div><div class="line">home.get(&apos;/&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li&gt;&lt;a href=&quot;/page/helloworld&quot;&gt;/page/helloworld&lt;/a&gt;&lt;/li&gt;</div><div class="line">      &lt;li&gt;&lt;a href=&quot;/page/404&quot;&gt;/page/404&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 子路由2</div><div class="line">let page = new Router()</div><div class="line">page.get(&apos;/404&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  ctx.body = &apos;404 page!&apos;</div><div class="line">&#125;).get(&apos;/helloworld&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  ctx.body = &apos;helloworld page!&apos;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 装载子路由</div><div class="line">let router = new Router()</div><div class="line">router.use(&apos;/&apos;, home.routes(), home.allowedMethods())</div><div class="line">router.use(&apos;/page&apos;, page.routes(), page.allowedMethods())</div><div class="line"></div><div class="line">// 加载路由中间件</div><div class="line">app.use(router.routes()).use(router.allowedMethods())</div><div class="line"></div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">let home = new Router()</div><div class="line">let page = new Router()</div><div class="line">page.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;page:$&#123;ctx.params.pageid&#125;&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line">// /home/232/page</div><div class="line">home.use(&apos;/home/:fid/page&apos;, page.routes(), page.allowedMethods());</div><div class="line"></div><div class="line">// 加载路由中间件</div><div class="line">app.use(home.routes())</div><div class="line"></div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h3 id="路由前缀"><a href="#路由前缀" class="headerlink" title="路由前缀"></a>路由前缀</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;)</div><div class="line">const app = new Koa()</div><div class="line">const Router = require(&apos;koa-router&apos;)</div><div class="line"></div><div class="line">let router = new Router(&#123;</div><div class="line">  prefix: &apos;/users&apos;</div><div class="line">&#125;)</div><div class="line">// /users</div><div class="line">router.get(&apos;/:pageid&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;user home&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line">// /users/:userid</div><div class="line">router.get(&apos;/:userid&apos;, async ( ctx )=&gt;&#123;</div><div class="line">  let html = `</div><div class="line">    &lt;p&gt;user-id:$&#123;ctx.params.userid&#125;&lt;/p&gt;</div><div class="line">  `</div><div class="line">  ctx.body = html</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(router.routes()).use(router.allowedMethods())</div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<h2 id="Router的结构"><a href="#Router的结构" class="headerlink" title="Router的结构"></a>Router的结构</h2><p>Router构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = Router;</div><div class="line"></div><div class="line">function Router(opts) &#123;</div><div class="line">  if (!(this instanceof Router)) &#123;</div><div class="line">    return new Router(opts);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  this.opts = opts || &#123;&#125;;</div><div class="line">  this.methods = this.opts.methods || [</div><div class="line">    &apos;HEAD&apos;,</div><div class="line">    &apos;OPTIONS&apos;,</div><div class="line">    &apos;GET&apos;,</div><div class="line">    &apos;PUT&apos;,</div><div class="line">    &apos;PATCH&apos;,</div><div class="line">    &apos;POST&apos;,</div><div class="line">    &apos;DELETE&apos;</div><div class="line">  ];</div><div class="line"></div><div class="line">  this.params = &#123;&#125;;</div><div class="line">  //stack存储不同的Layer，Router和Layer的关系是Router包含Layer</div><div class="line">  this.stack = [];</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p> Layer构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">function Layer(path, methods, middleware, opts) &#123;</div><div class="line">  this.opts = opts || &#123;&#125;;</div><div class="line">  this.name = this.opts.name || null;</div><div class="line">  this.methods = [];</div><div class="line">  this.paramNames = [];</div><div class="line">  this.stack = Array.isArray(middleware) ? middleware : [middleware];</div><div class="line"></div><div class="line">  methods.forEach(function(method) &#123;</div><div class="line">    var l = this.methods.push(method.toUpperCase());</div><div class="line">    if (this.methods[l-1] === &apos;GET&apos;) &#123;</div><div class="line">      this.methods.unshift(&apos;HEAD&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;, this);</div><div class="line"></div><div class="line">  // ensure middleware is a function</div><div class="line">  this.stack.forEach(function(fn) &#123;</div><div class="line">    var type = (typeof fn);</div><div class="line">    if (type !== &apos;function&apos;) &#123;</div><div class="line">      throw new Error(</div><div class="line">        methods.toString() + &quot; `&quot; + (this.opts.name || path) +&quot;`: `middleware` &quot;</div><div class="line">        + &quot;must be a function, not `&quot; + type + &quot;`&quot;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;, this);</div><div class="line"></div><div class="line">  this.path = path;</div><div class="line">  this.regexp = pathToRegExp(path, this.paramNames, this.opts);</div><div class="line"></div><div class="line">  debug(&apos;defined route %s %s&apos;, this.methods, this.opts.prefix + this.path);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Router对象"><a href="#Router对象" class="headerlink" title="Router对象"></a>Router对象</h3><p>可以看出layer存储匹配规则等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Router &#123;</div><div class="line">  opts: &#123;&#125;,</div><div class="line">  methods: [ &apos;HEAD&apos;, &apos;OPTIONS&apos;, &apos;GET&apos;, &apos;PUT&apos;, &apos;PATCH&apos;, &apos;POST&apos;, &apos;DELETE&apos; ],</div><div class="line">  params: &#123;&#125;,</div><div class="line">  stack:</div><div class="line">   [ Layer &#123;</div><div class="line">       opts: [Object],</div><div class="line">       name: null,</div><div class="line">       methods: [Object],</div><div class="line">       paramNames: [],</div><div class="line">       stack: [Object],</div><div class="line">       path: &apos;/&apos;,</div><div class="line">       regexp: /^(?:\/(?=$))?$/i &#125;,</div><div class="line">     Layer &#123;</div><div class="line">       opts: [Object],</div><div class="line">       name: null,</div><div class="line">       methods: [Object],</div><div class="line">       paramNames: [Object],</div><div class="line">       stack: [Object],</div><div class="line">       path: &apos;/name/:id&apos;,</div><div class="line">       regexp: /^\/name\/((?:[^\/]+?))(?:\/(?=$))?$/i &#125;,</div><div class="line">     Layer &#123;</div><div class="line">       opts: [Object],</div><div class="line">       name: null,</div><div class="line">       methods: [Object],</div><div class="line">       paramNames: [],</div><div class="line">       stack: [Object],</div><div class="line">       path: &apos;/company&apos;,</div><div class="line">       regexp: /^\/company(?:\/(?=$))?$/i &#125; ] &#125;</div></pre></td></tr></table></figure></p>
<h3 id="path的匹配"><a href="#path的匹配" class="headerlink" title="path的匹配"></a>path的匹配</h3><p>分两层，Router遍历所有layer，返回匹配的matched对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Router.prototype.match = function (path, method) &#123;</div><div class="line">  var layers = this.stack;</div><div class="line">  var layer;</div><div class="line">  var matched = &#123;</div><div class="line">    //存储path匹配的layer</div><div class="line">    path: [],</div><div class="line">    //存储methods匹配的layer</div><div class="line">    pathAndMethod: [],</div><div class="line">    // 是否匹配成功</div><div class="line">    route: false</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  for (var len = layers.length, i = 0; i &lt; len; i++) &#123;</div><div class="line">    layer = layers[i];</div><div class="line"></div><div class="line">    debug(&apos;test %s %s&apos;, layer.path, layer.regexp);</div><div class="line"></div><div class="line">    if (layer.match(path)) &#123;</div><div class="line">      matched.path.push(layer);</div><div class="line"></div><div class="line">      if (layer.methods.length === 0 || ~layer.methods.indexOf(method)) &#123;</div><div class="line">        matched.pathAndMethod.push(layer);</div><div class="line">        if (layer.methods.length) matched.route = true;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return matched;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Layer层通过正则匹配路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Layer.prototype.match = function (path) &#123;</div><div class="line">  return this.regexp.test(path);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Router-use"><a href="#Router-use" class="headerlink" title="Router.use()"></a>Router.use()</h3><p>Router通过use()将methods方法与Router联系起来app.use(router.routes()).use(router.allowedMethods());<br>router.routes()返回一个中间件，用于对请求发起路由匹配，把一些router参数加入ctx对象,执行router.routes()，返回的是一个dispatch(ctx, next)方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">Router.prototype.routes = Router.prototype.middleware = function () &#123;</div><div class="line">  var router = this;</div><div class="line"></div><div class="line">  var dispatch = function dispatch(ctx, next) &#123;</div><div class="line">    debug(&apos;%s %s&apos;, ctx.method, ctx.path);</div><div class="line">    // 获取path</div><div class="line">    var path = router.opts.routerPath || ctx.routerPath || ctx.path;</div><div class="line">    // 发起path match，获取matched对象</div><div class="line">    var matched = router.match(path, ctx.method);</div><div class="line">    var layerChain, layer, i;</div><div class="line"></div><div class="line">    if (ctx.matched) &#123;</div><div class="line">      ctx.matched.push.apply(ctx.matched, matched.path);</div><div class="line">    &#125; else &#123;</div><div class="line">      ctx.matched = matched.path;</div><div class="line">    &#125;</div><div class="line">    // 可以从ctx 取router</div><div class="line">    ctx.router = router;</div><div class="line">    // 判断是否匹配成功</div><div class="line">    if (!matched.route) return next();</div><div class="line"></div><div class="line">    var matchedLayers = matched.pathAndMethod</div><div class="line">    var mostSpecificLayer = matchedLayers[matchedLayers.length - 1]</div><div class="line">    ctx._matchedRoute = mostSpecificLayer.path;</div><div class="line">    if (mostSpecificLayer.name) &#123;</div><div class="line">      ctx._matchedRouteName = mostSpecificLayer.name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    layerChain = matchedLayers.reduce(function(memo, layer) &#123;</div><div class="line">      memo.push(function(ctx, next) &#123;</div><div class="line">        ctx.captures = layer.captures(path, ctx.captures);</div><div class="line">        ctx.params = layer.params(path, ctx.captures, ctx.params);</div><div class="line">        return next();</div><div class="line">      &#125;);</div><div class="line">      return memo.concat(layer.stack);</div><div class="line">    &#125;, []);</div><div class="line"></div><div class="line">    return compose(layerChain)(ctx, next);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  dispatch.router = this;</div><div class="line"></div><div class="line">  return dispatch;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="Router-allowedMethods"><a href="#Router-allowedMethods" class="headerlink" title="Router.allowedMethods()"></a>Router.allowedMethods()</h3><p>执行router.allowedMethods()，返回allowedMethods(ctx, next)方法，判断请求的method是否被允许<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">Router.prototype.allowedMethods = function (options) &#123;</div><div class="line">  options = options || &#123;&#125;;</div><div class="line">  var implemented = this.methods;</div><div class="line"></div><div class="line">  return function allowedMethods(ctx, next) &#123;</div><div class="line">    return next().then(function() &#123;</div><div class="line">      var allowed = &#123;&#125;;</div><div class="line"></div><div class="line">      if (!ctx.status || ctx.status === 404) &#123;</div><div class="line">        ctx.matched.forEach(function (route) &#123;</div><div class="line">          route.methods.forEach(function (method) &#123;</div><div class="line">            allowed[method] = method;</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        var allowedArr = Object.keys(allowed);</div><div class="line">        // 判断请求method是否在允许范围内</div><div class="line">        if (!~implemented.indexOf(ctx.method)) &#123;</div><div class="line">          if (options.throw) &#123;</div><div class="line">            var notImplementedThrowable;</div><div class="line">            if (typeof options.notImplemented === &apos;function&apos;) &#123;</div><div class="line">              notImplementedThrowable = options.notImplemented(); // set whatever the user returns from their function</div><div class="line">            &#125; else &#123;</div><div class="line">              notImplementedThrowable = new HttpError.NotImplemented();</div><div class="line">            &#125;</div><div class="line">            throw notImplementedThrowable;</div><div class="line">          &#125; else &#123;</div><div class="line">            ctx.status = 501;</div><div class="line">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class="line">          &#125;</div><div class="line">        &#125; else if (allowedArr.length) &#123;</div><div class="line">          if (ctx.method === &apos;OPTIONS&apos;) &#123;</div><div class="line">            ctx.status = 204;</div><div class="line">            ctx.set(&apos;Allow&apos;, allowedArr);</div><div class="line">          &#125; else if (!allowed[ctx.method]) &#123;</div><div class="line">            if (options.throw) &#123;</div><div class="line">              var notAllowedThrowable;</div><div class="line">              if (typeof options.methodNotAllowed === &apos;function&apos;) &#123;</div><div class="line">                notAllowedThrowable = options.methodNotAllowed(); // set whatever the user returns from their function</div><div class="line">              &#125; else &#123;</div><div class="line">                notAllowedThrowable = new HttpError.MethodNotAllowed();</div><div class="line">              &#125;</div><div class="line">              throw notAllowedThrowable;</div><div class="line">            &#125; else &#123;</div><div class="line">              ctx.status = 405;</div><div class="line">              ctx.set(&apos;Allow&apos;, allowedArr);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>app.use(router.routes()).use(router.allowedMethods());<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">Router.prototype.use = function () &#123;</div><div class="line">  var router = this;</div><div class="line">  // 将传入参数转换为数组</div><div class="line">  var middleware = Array.prototype.slice.call(arguments);</div><div class="line">  var path = &apos;(.*)&apos;;</div><div class="line"></div><div class="line">  // support array of paths</div><div class="line">  if (Array.isArray(middleware[0]) &amp;&amp; typeof middleware[0][0] === &apos;string&apos;) &#123;</div><div class="line">    middleware[0].forEach(function (p) &#123;</div><div class="line">      router.use.apply(router, [p].concat(middleware.slice(1)));</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var hasPath = typeof middleware[0] === &apos;string&apos;;</div><div class="line">  if (hasPath) &#123;</div><div class="line">    path = middleware.shift();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  middleware.forEach(function (m) &#123;</div><div class="line">    if (m.router) &#123;</div><div class="line">      // 对router.routes()参数的处理</div><div class="line">      m.router.stack.forEach(function (nestedLayer) &#123;</div><div class="line">        if (path) nestedLayer.setPrefix(path);</div><div class="line">        // 绑定layer</div><div class="line">        if (router.opts.prefix) nestedLayer.setPrefix(router.opts.prefix);</div><div class="line">        router.stack.push(nestedLayer);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      if (router.params) &#123;</div><div class="line">        Object.keys(router.params).forEach(function (key) &#123;</div><div class="line">          m.router.param(key, router.params[key]);</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">      // 创建并注册一个route</div><div class="line">      router.register(path, [], m, &#123; end: false, ignoreCaptures: !hasPath &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  return this;</div><div class="line">&#125;;</div><div class="line">// 创建并注册一个route</div><div class="line">Router.prototype.register = function (path, methods, middleware, opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line"></div><div class="line">  var router = this;</div><div class="line">  var stack = this.stack;</div><div class="line"></div><div class="line">  // support array of paths</div><div class="line">  if (Array.isArray(path)) &#123;</div><div class="line">    path.forEach(function (p) &#123;</div><div class="line">      router.register.call(router, p, methods, middleware, opts);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // create route Layer</div><div class="line">  var route = new Layer(path, methods, middleware, &#123;</div><div class="line">    end: opts.end === false ? opts.end : true,</div><div class="line">    name: opts.name,</div><div class="line">    sensitive: opts.sensitive || this.opts.sensitive || false,</div><div class="line">    strict: opts.strict || this.opts.strict || false,</div><div class="line">    prefix: opts.prefix || this.opts.prefix || &quot;&quot;,</div><div class="line">    ignoreCaptures: opts.ignoreCaptures</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  if (this.opts.prefix) &#123;</div><div class="line">    route.setPrefix(this.opts.prefix);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // add parameter middleware</div><div class="line">  Object.keys(this.params).forEach(function (param) &#123;</div><div class="line">    route.param(param, this.params[param]);</div><div class="line">  &#125;, this);</div><div class="line"></div><div class="line">  stack.push(route);</div><div class="line"></div><div class="line">  return route;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> koa-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa源码分析]]></title>
      <url>/2017/05/25/koa%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>本文koa版本是2.2.0</p>
<h2 id="创建koa服务"><a href="#创建koa服务" class="headerlink" title="创建koa服务:"></a>创建koa服务:</h2><ol>
<li>创建koa的app对象</li>
<li>为app添加中间件</li>
<li>监听端口，创建server</li>
</ol>
<p>下面是一个简单的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;);</div><div class="line">const app = new Koa();</div><div class="line"></div><div class="line">// x-response-time</div><div class="line"></div><div class="line">app.use(async function (ctx, next) &#123;</div><div class="line">  console.log(&apos;x-response-time start&apos;)</div><div class="line">  const start = new Date();</div><div class="line">  await next();</div><div class="line">  const ms = new Date() - start;</div><div class="line">  ctx.set(&apos;X-Response-Time&apos;, `$&#123;ms&#125;ms`);</div><div class="line">  console.log(&apos;x-response-time end&apos;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logger</div><div class="line"></div><div class="line">app.use(async function (ctx, next) &#123;</div><div class="line">  console.log(&apos;logger start&apos;)</div><div class="line">  const start = new Date();</div><div class="line">  await next();</div><div class="line">  const ms = new Date() - start;</div><div class="line">  console.log(`$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;ms&#125;`);</div><div class="line">  console.log(&apos;logger end&apos;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// response</div><div class="line"></div><div class="line">app.use(ctx =&gt; &#123;</div><div class="line">  console.log(&apos;hello world&apos;)</div><div class="line">  ctx.body = &apos;Hello World&apos;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(3000);</div></pre></td></tr></table></figure></p>
<p>当请求<a href="http://localhost:3000/时，页面返回&#39;Hello" target="_blank" rel="external">http://localhost:3000/时，页面返回&#39;Hello</a> World’</p>
<h3 id="中间件执行顺序"><a href="#中间件执行顺序" class="headerlink" title="中间件执行顺序"></a>中间件执行顺序</h3><p>命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’</p>
<h3 id="async异步函数"><a href="#async异步函数" class="headerlink" title="async异步函数"></a>async异步函数</h3><p>从请求到响应类似下图<br><img src="/2017/05/25/koa源码分析/koa-onion.png" alt=""></p>
<h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><h3 id="app对象结构"><a href="#app对象结构" class="headerlink" title="app对象结构"></a>app对象结构</h3><p><img src="/2017/05/25/koa源码分析/koa2.png" alt=""><br>创建Koa的app对象，Application继承Emitter对象，代码结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Application extends Emitter &#123;</div><div class="line"> constructor() &#123;</div><div class="line">   super();</div><div class="line"></div><div class="line">   this.proxy = false;</div><div class="line">   // 用于存储中间件的数组</div><div class="line">   this.middleware = [];</div><div class="line">   this.subdomainOffset = 2;</div><div class="line">   this.env = process.env.NODE_ENV || &apos;development&apos;;</div><div class="line">   // 上下文对象</div><div class="line">   this.context = Object.create(context);</div><div class="line">   // 请求对象</div><div class="line">   this.request = Object.create(request);</div><div class="line">   // 响应对象</div><div class="line">   this.response = Object.create(response);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="添加中间件"><a href="#添加中间件" class="headerlink" title="添加中间件"></a>添加中间件</h3><p>koa的中间件是很重要，使用app.use()添加中间件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">use(fn) &#123;</div><div class="line">  //判断fn不是函数返回错误</div><div class="line">  if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;middleware must be a function!&apos;);</div><div class="line">  if (isGeneratorFunction(fn)) &#123;</div><div class="line">    deprecate(&apos;Support for generators will be removed in v3. &apos; +</div><div class="line">              &apos;See the documentation for examples of how to convert old middleware &apos; +</div><div class="line">              &apos;https://github.com/koajs/koa/blob/master/docs/migration.md&apos;);</div><div class="line">    fn = convert(fn);</div><div class="line">  &#125;</div><div class="line">  debug(&apos;use %s&apos;, fn._name || fn.name || &apos;-&apos;);</div><div class="line">  //把中间件函数push进application的middleware数组内</div><div class="line">  this.middleware.push(fn);</div><div class="line">  return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h3><p>app.listen()监听端口，listen是createServer()的封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen() &#123;</div><div class="line">  debug(&apos;listen&apos;);</div><div class="line">  const server = http.createServer(this.callback());</div><div class="line">  return server.listen.apply(server, arguments);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="接收到请求时的回调函数"><a href="#接收到请求时的回调函数" class="headerlink" title="接收到请求时的回调函数"></a>接收到请求时的回调函数</h3><p>当服务接收到http请求时，触发callback函数，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">callback() &#123;</div><div class="line">  // 执行中间件</div><div class="line">  const fn = compose(this.middleware);</div><div class="line"></div><div class="line">  if (!this.listeners(&apos;error&apos;).length) this.on(&apos;error&apos;, this.onerror);</div><div class="line"></div><div class="line">  const handleRequest = (req, res) =&gt; &#123;</div><div class="line">    res.statusCode = 404;</div><div class="line">    const ctx = this.createContext(req, res);</div><div class="line">    const onerror = err =&gt; ctx.onerror(err);</div><div class="line">    const handleResponse = () =&gt; respond(ctx);</div><div class="line">    onFinished(res, onerror);</div><div class="line">    // fn()</div><div class="line">    return fn(ctx).then(handleResponse).catch(onerror);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  return handleRequest;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p> compose返回一个用于执行中间件的函数，在callback()函数执行fn(ctx)，从dispatch(0)开始，执行第一个中间件函数，然后递归执行dispatch(i)，执行中间件函数，直到执行完所有中间件函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function compose (middleware) &#123;</div><div class="line">  // 参数判断</div><div class="line">  if (!Array.isArray(middleware)) throw new TypeError(&apos;Middleware stack must be an array!&apos;)</div><div class="line">  for (const fn of middleware) &#123;</div><div class="line">    if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;Middleware must be composed of functions!&apos;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return function (context, next) &#123;</div><div class="line">    // last called middleware #</div><div class="line">    // 闭包，存储index变量，中间件执行当前坐标</div><div class="line">    let index = -1</div><div class="line">    // 从第一个中间件开始执行</div><div class="line">    return dispatch(0)</div><div class="line">    function dispatch (i) &#123;</div><div class="line">      if (i &lt;= index) return Promise.reject(new Error(&apos;next() called multiple times&apos;))</div><div class="line">      index = i</div><div class="line">      // 取出中间件函数</div><div class="line">      let fn = middleware[i]</div><div class="line">      // 最后一个是请求处理</div><div class="line">      if (i === middleware.length) fn = next</div><div class="line">      if (!fn) return Promise.resolve()</div><div class="line">      try &#123;</div><div class="line">        // 执行中间件函数</div><div class="line">        return Promise.resolve(fn(context, function next () &#123;</div><div class="line">          // 执行下一个中间件</div><div class="line">          return dispatch(i + 1)</div><div class="line">        &#125;))</div><div class="line">      &#125; catch (err) &#123;</div><div class="line">        return Promise.reject(err)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="context保存请求，响应对象"><a href="#context保存请求，响应对象" class="headerlink" title="context保存请求，响应对象"></a>context保存请求，响应对象</h3><p> context上下文用于管理请求，响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">createContext(req, res) &#123;</div><div class="line">  const context = Object.create(this.context);</div><div class="line">  const request = context.request = Object.create(this.request);</div><div class="line">  const response = context.response = Object.create(this.response);</div><div class="line">  // 通过context可以获取app,request,response对象</div><div class="line">  context.app = request.app = response.app = this;</div><div class="line">  context.req = request.req = response.req = req;</div><div class="line">  context.res = request.res = response.res = res;</div><div class="line">  request.ctx = response.ctx = context;</div><div class="line">  request.response = response;</div><div class="line">  response.request = request;</div><div class="line">  context.originalUrl = request.originalUrl = req.url;</div><div class="line">  context.cookies = new Cookies(req, res, &#123;</div><div class="line">    keys: this.keys,</div><div class="line">    secure: request.secure</div><div class="line">  &#125;);</div><div class="line">  request.ip = request.ips[0] || req.socket.remoteAddress || &apos;&apos;;</div><div class="line">  context.accept = request.accept = accepts(req);</div><div class="line">  context.state = &#123;&#125;;</div><div class="line">  return context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="请求和响应委托-Delegator-给context"><a href="#请求和响应委托-Delegator-给context" class="headerlink" title="请求和响应委托(Delegator)给context"></a>请求和响应委托(Delegator)给context</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// context 对象</div><div class="line">const delegate = require(&apos;delegates&apos;);</div><div class="line">const proto = module.exports = &#123;</div><div class="line">  // 请求委托</div><div class="line">  delegate(proto, &apos;response&apos;)</div><div class="line">    .method(&apos;set&apos;)</div><div class="line">    .access(&apos;body&apos;)</div><div class="line">    .getter(&apos;headerSent&apos;)</div><div class="line">  // 响应委托</div><div class="line">  delegate(proto, &apos;request&apos;)</div><div class="line">    .method(&apos;get&apos;)</div><div class="line">    .access(&apos;url&apos;)</div><div class="line">    .getter(&apos;origin&apos;)</div><div class="line">&#125;</div><div class="line">// delegate 实现</div><div class="line">// proto 被委托的对象</div><div class="line">function Delegator(proto, target) &#123;</div><div class="line">  if (!(this instanceof Delegator)) return new Delegator(proto, target);</div><div class="line">  this.proto = proto;</div><div class="line">  this.target = target;</div><div class="line">  this.methods = [];</div><div class="line">  this.getters = [];</div><div class="line">  this.setters = [];</div><div class="line">  this.fluents = [];</div><div class="line">&#125;</div><div class="line">// 获取委托对象</div><div class="line">Delegator.prototype.access = function(name)&#123;</div><div class="line">  return this.getter(name).setter(name);</div><div class="line">&#125;;</div><div class="line">Delegator.prototype.getter = function(name)&#123;</div><div class="line">  var proto = this.proto;</div><div class="line">  var target = this.target;</div><div class="line">  this.getters.push(name);</div><div class="line"></div><div class="line">  proto.__defineGetter__(name, function()&#123;</div><div class="line">    return this[target][name];</div><div class="line">  &#125;);</div><div class="line">  // 用于链式调用</div><div class="line">  return this;</div><div class="line">&#125;;</div><div class="line">Delegator.prototype.method = function(name)&#123;</div><div class="line">  var proto = this.proto;</div><div class="line">  var target = this.target;</div><div class="line">  this.methods.push(name);</div><div class="line"></div><div class="line">  proto[name] = function()&#123;</div><div class="line">    // 方法委托</div><div class="line">    return this[target][name].apply(this[target], arguments);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  return this;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="response-body-处理"><a href="#response-body-处理" class="headerlink" title="response body 处理"></a>response body 处理</h3><p>分三种情况string,buffer,stream<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  get body() &#123;</div><div class="line">    return this._body;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  set body(val) &#123;</div><div class="line">    const original = this._body;</div><div class="line">    this._body = val;</div><div class="line"></div><div class="line">    if (this.res.headersSent) return;</div><div class="line"></div><div class="line">    // no content</div><div class="line">    if (null == val) &#123;</div><div class="line">      if (!statuses.empty[this.status]) this.status = 204;</div><div class="line">      this.remove(&apos;Content-Type&apos;);</div><div class="line">      this.remove(&apos;Content-Length&apos;);</div><div class="line">      this.remove(&apos;Transfer-Encoding&apos;);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // set the status</div><div class="line">    if (!this._explicitStatus) this.status = 200;</div><div class="line"></div><div class="line">    // set the content-type only if not yet set</div><div class="line">    const setType = !this.header[&apos;content-type&apos;];</div><div class="line"></div><div class="line">    // string字符串处理</div><div class="line">    if (&apos;string&apos; == typeof val) &#123;</div><div class="line">      if (setType) this.type = /^\s*&lt;/.test(val) ? &apos;html&apos; : &apos;text&apos;;</div><div class="line">      this.length = Buffer.byteLength(val);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // buffer</div><div class="line">    if (Buffer.isBuffer(val)) &#123;</div><div class="line">      if (setType) this.type = &apos;bin&apos;;</div><div class="line">      this.length = val.length;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // stream流</div><div class="line">    if (&apos;function&apos; == typeof val.pipe) &#123;</div><div class="line">      onFinish(this.res, destroy.bind(null, val));</div><div class="line">      ensureErrorHandler(val, err =&gt; this.ctx.onerror(err));</div><div class="line"></div><div class="line">      // overwriting</div><div class="line">      if (null != original &amp;&amp; original != val) this.remove(&apos;Content-Length&apos;);</div><div class="line"></div><div class="line">      if (setType) this.type = &apos;bin&apos;;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // json</div><div class="line">    this.remove(&apos;Content-Length&apos;);</div><div class="line">    this.type = &apos;json&apos;;</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> koa </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
