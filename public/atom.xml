<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangjiong&#39;s blog</title>
  <subtitle>everyday is new day</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://facejiong.github.io/"/>
  <updated>2017-05-25T09:42:21.537Z</updated>
  <id>https://facejiong.github.io/</id>
  
  <author>
    <name>Wang Jiong</name>
    <email>2279763407@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>koa源码分析</title>
    <link href="https://facejiong.github.io/2017/05/25/koa%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://facejiong.github.io/2017/05/25/koa源码分析/</id>
    <published>2017-05-25T07:29:49.000Z</published>
    <updated>2017-05-25T09:42:21.537Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个koa的后端服务只需要3步:</p>
<ol>
<li>创建koa的app对象</li>
<li>为app添加中间件</li>
<li>监听端口，创建server</li>
</ol>
<p>下面是一个简单的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;);</div><div class="line">const app = new Koa();</div><div class="line"></div><div class="line">// x-response-time</div><div class="line"></div><div class="line">app.use(async function (ctx, next) &#123;</div><div class="line">  console.log(&apos;x-response-time start&apos;)</div><div class="line">  const start = new Date();</div><div class="line">  await next();</div><div class="line">  const ms = new Date() - start;</div><div class="line">  ctx.set(&apos;X-Response-Time&apos;, `$&#123;ms&#125;ms`);</div><div class="line">  console.log(&apos;x-response-time end&apos;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logger</div><div class="line"></div><div class="line">app.use(async function (ctx, next) &#123;</div><div class="line">  console.log(&apos;logger start&apos;)</div><div class="line">  const start = new Date();</div><div class="line">  await next();</div><div class="line">  const ms = new Date() - start;</div><div class="line">  console.log(`$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;ms&#125;`);</div><div class="line">  console.log(&apos;logger end&apos;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// response</div><div class="line"></div><div class="line">app.use(ctx =&gt; &#123;</div><div class="line">  console.log(&apos;hello world&apos;)</div><div class="line">  ctx.body = &apos;Hello World&apos;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(3000);</div></pre></td></tr></table></figure></p>
<p>当请求<a href="http://localhost:3000/时，页面返回&#39;Hello" target="_blank" rel="external">http://localhost:3000/时，页面返回&#39;Hello</a> World’</p>
<h4 id="命令行里面顺序打印日志：’x-response-time-start’-–-gt-‘logger-start’-–-gt-‘hello-world’-–-gt-‘logger-end’-–-gt-‘x-response-time-end’"><a href="#命令行里面顺序打印日志：’x-response-time-start’-–-gt-‘logger-start’-–-gt-‘hello-world’-–-gt-‘logger-end’-–-gt-‘x-response-time-end’" class="headerlink" title="命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’"></a>命令行里面顺序打印日志：’x-response-time start’ –&gt;  ‘logger start’ –&gt; ‘hello world’ –&gt; ‘logger end’ –&gt; ‘x-response-time end’</h4><h4 id="从请求到响应类似下图"><a href="#从请求到响应类似下图" class="headerlink" title="从请求到响应类似下图"></a>从请求到响应类似下图</h4><p><img src="/2017/05/25/koa源码分析/koa-onion.png" alt=""></p>
<p>创建Koa的app对象，Application继承Emitter对象，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Application extends Emitter &#123;</div><div class="line"> constructor() &#123;</div><div class="line">   super();</div><div class="line"></div><div class="line">   this.proxy = false;</div><div class="line">   // 用于存储中间件的数组</div><div class="line">   this.middleware = [];</div><div class="line">   this.subdomainOffset = 2;</div><div class="line">   this.env = process.env.NODE_ENV || &apos;development&apos;;</div><div class="line">   // 上下文对象</div><div class="line">   this.context = Object.create(context);</div><div class="line">   // 请求对象</div><div class="line">   this.request = Object.create(request);</div><div class="line">   // 响应对象</div><div class="line">   this.response = Object.create(response);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用app.use()添加中间件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">use(fn) &#123;</div><div class="line">  //判断fn不是函数返回错误</div><div class="line">  if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;middleware must be a function!&apos;);</div><div class="line">  if (isGeneratorFunction(fn)) &#123;</div><div class="line">    deprecate(&apos;Support for generators will be removed in v3. &apos; +</div><div class="line">              &apos;See the documentation for examples of how to convert old middleware &apos; +</div><div class="line">              &apos;https://github.com/koajs/koa/blob/master/docs/migration.md&apos;);</div><div class="line">    fn = convert(fn);</div><div class="line">  &#125;</div><div class="line">  debug(&apos;use %s&apos;, fn._name || fn.name || &apos;-&apos;);</div><div class="line">  //把中间件函数push进application的middleware数组内</div><div class="line">  this.middleware.push(fn);</div><div class="line">  return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>app.listen()监听端口，listen是createServer()的封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">listen() &#123;</div><div class="line">  debug(&apos;listen&apos;);</div><div class="line">  const server = http.createServer(this.callback());</div><div class="line">  return server.listen.apply(server, arguments);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当服务接收到http请求时，触发callback函数，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">callback() &#123;</div><div class="line">  const fn = compose(this.middleware);</div><div class="line"></div><div class="line">  if (!this.listeners(&apos;error&apos;).length) this.on(&apos;error&apos;, this.onerror);</div><div class="line"></div><div class="line">  const handleRequest = (req, res) =&gt; &#123;</div><div class="line">    res.statusCode = 404;</div><div class="line">    const ctx = this.createContext(req, res);</div><div class="line">    const onerror = err =&gt; ctx.onerror(err);</div><div class="line">    const handleResponse = () =&gt; respond(ctx);</div><div class="line">    onFinished(res, onerror);</div><div class="line">    return fn(ctx).then(handleResponse).catch(onerror);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  return handleRequest;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>compose用于执行中间件函数，在callback()函数执行fn(ctx)，相当于从dispatch(0)开始，递归执行dispatch(i),直到执行完所有中间件函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">function compose (middleware) &#123;</div><div class="line">  // 参数判断</div><div class="line">  if (!Array.isArray(middleware)) throw new TypeError(&apos;Middleware stack must be an array!&apos;)</div><div class="line">  for (const fn of middleware) &#123;</div><div class="line">    if (typeof fn !== &apos;function&apos;) throw new TypeError(&apos;Middleware must be composed of functions!&apos;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return function (context, next) &#123;</div><div class="line">    // last called middleware #</div><div class="line">    let index = -1</div><div class="line">    return dispatch(0)</div><div class="line">    function dispatch (i) &#123;</div><div class="line">      if (i &lt;= index) return Promise.reject(new Error(&apos;next() called multiple times&apos;))</div><div class="line">      index = i</div><div class="line">      let fn = middleware[i]</div><div class="line">      if (i === middleware.length) fn = next</div><div class="line">      if (!fn) return Promise.resolve()</div><div class="line">      try &#123;</div><div class="line">        // 执行中间件函数</div><div class="line">        return Promise.resolve(fn(context, function next () &#123;</div><div class="line">          return dispatch(i + 1)</div><div class="line">        &#125;))</div><div class="line">      &#125; catch (err) &#123;</div><div class="line">        return Promise.reject(err)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>context用于管理请求，响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">createContext(req, res) &#123;</div><div class="line">  const context = Object.create(this.context);</div><div class="line">  const request = context.request = Object.create(this.request);</div><div class="line">  const response = context.response = Object.create(this.response);</div><div class="line">  // 通过context可以获取app,request,response对象</div><div class="line">  context.app = request.app = response.app = this;</div><div class="line">  context.req = request.req = response.req = req;</div><div class="line">  context.res = request.res = response.res = res;</div><div class="line">  request.ctx = response.ctx = context;</div><div class="line">  request.response = response;</div><div class="line">  response.request = request;</div><div class="line">  context.originalUrl = request.originalUrl = req.url;</div><div class="line">  context.cookies = new Cookies(req, res, &#123;</div><div class="line">    keys: this.keys,</div><div class="line">    secure: request.secure</div><div class="line">  &#125;);</div><div class="line">  request.ip = request.ips[0] || req.socket.remoteAddress || &apos;&apos;;</div><div class="line">  context.accept = request.accept = accepts(req);</div><div class="line">  context.state = &#123;&#125;;</div><div class="line">  return context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建一个koa的后端服务只需要3步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建koa的app对象&lt;/li&gt;
&lt;li&gt;为app添加中间件&lt;/li&gt;
&lt;li&gt;监听端口，创建server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个简单的示例：&lt;br&gt;&lt;figure class=&quot;highlig
    
    </summary>
    
      <category term="nodejs" scheme="https://facejiong.github.io/categories/nodejs/"/>
    
    
      <category term="koa" scheme="https://facejiong.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://facejiong.github.io/2017/05/25/hello-world/"/>
    <id>https://facejiong.github.io/2017/05/25/hello-world/</id>
    <published>2017-05-25T01:02:03.356Z</published>
    <updated>2017-05-25T01:02:03.359Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
